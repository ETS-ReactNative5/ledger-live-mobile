(() => {
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $parcel$global =
typeof globalThis !== 'undefined'
  ? globalThis
  : typeof self !== 'undefined'
  ? self
  : typeof window !== 'undefined'
  ? window
  : typeof global !== 'undefined'
  ? global
  : {};
var $parcel$modules = {};
var $parcel$inits = {};

var parcelRequire = $parcel$global["parcelRequire8f99"];
if (parcelRequire == null) {
  parcelRequire = function(id) {
    if (id in $parcel$modules) {
      return $parcel$modules[id].exports;
    }
    if (id in $parcel$inits) {
      var init = $parcel$inits[id];
      delete $parcel$inits[id];
      var module = {id: id, exports: {}};
      $parcel$modules[id] = module;
      init.call(module.exports, module, module.exports);
      return module.exports;
    }
    var err = new Error("Cannot find module '" + id + "'");
    err.code = 'MODULE_NOT_FOUND';
    throw err;
  };

  parcelRequire.register = function register(id, init) {
    $parcel$inits[id] = init;
  };

  $parcel$global["parcelRequire8f99"] = parcelRequire;
}
parcelRequire.register("a0h4l", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var $7487250c9841db87$var$R = typeof Reflect === 'object' ? Reflect : null;
var $7487250c9841db87$var$ReflectApply = $7487250c9841db87$var$R && typeof $7487250c9841db87$var$R.apply === 'function' ? $7487250c9841db87$var$R.apply : function ReflectApply(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var $7487250c9841db87$var$ReflectOwnKeys;
if ($7487250c9841db87$var$R && typeof $7487250c9841db87$var$R.ownKeys === 'function') $7487250c9841db87$var$ReflectOwnKeys = $7487250c9841db87$var$R.ownKeys;
else if (Object.getOwnPropertySymbols) $7487250c9841db87$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else $7487250c9841db87$var$ReflectOwnKeys = function ReflectOwnKeys(target) {
    return Object.getOwnPropertyNames(target);
};
function $7487250c9841db87$var$ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var $7487250c9841db87$var$NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {
    return value !== value;
};
function $7487250c9841db87$var$EventEmitter() {
    $7487250c9841db87$var$EventEmitter.init.call(this);
}
module.exports = $7487250c9841db87$var$EventEmitter;
module.exports.once = $7487250c9841db87$var$once;
// Backwards-compat with node 0.10.x
$7487250c9841db87$var$EventEmitter.EventEmitter = $7487250c9841db87$var$EventEmitter;
$7487250c9841db87$var$EventEmitter.prototype._events = undefined;
$7487250c9841db87$var$EventEmitter.prototype._eventsCount = 0;
$7487250c9841db87$var$EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var $7487250c9841db87$var$defaultMaxListeners = 10;
function $7487250c9841db87$var$checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty($7487250c9841db87$var$EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return $7487250c9841db87$var$defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || $7487250c9841db87$var$NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        $7487250c9841db87$var$defaultMaxListeners = arg;
    }
});
$7487250c9841db87$var$EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
$7487250c9841db87$var$EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || $7487250c9841db87$var$NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function $7487250c9841db87$var$_getMaxListeners(that) {
    if (that._maxListeners === undefined) return $7487250c9841db87$var$EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
$7487250c9841db87$var$EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return $7487250c9841db87$var$_getMaxListeners(this);
};
$7487250c9841db87$var$EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') $7487250c9841db87$var$ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = $7487250c9841db87$var$arrayClone(handler, len);
        for(var i = 0; i < len; ++i)$7487250c9841db87$var$ReflectApply(listeners[i], this, args);
    }
    return true;
};
function $7487250c9841db87$var$_addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    $7487250c9841db87$var$checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = $7487250c9841db87$var$_getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            $7487250c9841db87$var$ProcessEmitWarning(w);
        }
    }
    return target;
}
$7487250c9841db87$var$EventEmitter.prototype.addListener = function addListener(type, listener) {
    return $7487250c9841db87$var$_addListener(this, type, listener, false);
};
$7487250c9841db87$var$EventEmitter.prototype.on = $7487250c9841db87$var$EventEmitter.prototype.addListener;
$7487250c9841db87$var$EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return $7487250c9841db87$var$_addListener(this, type, listener, true);
};
function $7487250c9841db87$var$onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function $7487250c9841db87$var$_onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = $7487250c9841db87$var$onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
$7487250c9841db87$var$EventEmitter.prototype.once = function once(type, listener) {
    $7487250c9841db87$var$checkListener(listener);
    this.on(type, $7487250c9841db87$var$_onceWrap(this, type, listener));
    return this;
};
$7487250c9841db87$var$EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    $7487250c9841db87$var$checkListener(listener);
    this.prependListener(type, $7487250c9841db87$var$_onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
$7487250c9841db87$var$EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    $7487250c9841db87$var$checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else $7487250c9841db87$var$spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
$7487250c9841db87$var$EventEmitter.prototype.off = $7487250c9841db87$var$EventEmitter.prototype.removeListener;
$7487250c9841db87$var$EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if (--this._eventsCount === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function $7487250c9841db87$var$_listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? $7487250c9841db87$var$unwrapListeners(evlistener) : $7487250c9841db87$var$arrayClone(evlistener, evlistener.length);
}
$7487250c9841db87$var$EventEmitter.prototype.listeners = function listeners(type) {
    return $7487250c9841db87$var$_listeners(this, type, true);
};
$7487250c9841db87$var$EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return $7487250c9841db87$var$_listeners(this, type, false);
};
$7487250c9841db87$var$EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return $7487250c9841db87$var$listenerCount.call(emitter, type);
};
$7487250c9841db87$var$EventEmitter.prototype.listenerCount = $7487250c9841db87$var$listenerCount;
function $7487250c9841db87$var$listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
$7487250c9841db87$var$EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? $7487250c9841db87$var$ReflectOwnKeys(this._events) : [];
};
function $7487250c9841db87$var$arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function $7487250c9841db87$var$spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function $7487250c9841db87$var$unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function $7487250c9841db87$var$once(emitter, name) {
    return new Promise(function(resolve, reject) {
        function eventListener() {
            if (errorListener !== undefined) emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        var errorListener;
        // Adding an error listener is not optional because
        // if an error is thrown on an event emitter we cannot
        // guarantee that the actual event we are waiting will
        // be fired. The result could be a silent way to create
        // memory or file descriptor leaks, which is something
        // we should avoid.
        if (name !== 'error') {
            errorListener = function errorListener(err) {
                emitter.removeListener(name, eventListener);
                reject(err);
            };
            emitter.once('error', errorListener);
        }
        emitter.once(name, eventListener);
    });
}

});

parcelRequire.register("jNPKL", function(module, exports) {
'use strict';
var $e6aabd0ebd2c8701$var$_typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
    return typeof obj;
} : function(obj) {
    return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
};

var $fydUV = parcelRequire("fydUV");
var $e6aabd0ebd2c8701$var$keccak224 = $fydUV.keccak224, $e6aabd0ebd2c8701$var$keccak384 = $fydUV.keccak384, $e6aabd0ebd2c8701$var$k256 = $fydUV.keccak256, $e6aabd0ebd2c8701$var$keccak512 = $fydUV.keccak512;

var $amVGm = parcelRequire("amVGm");

var $cAqPD = parcelRequire("cAqPD");

var $f9tZZ = parcelRequire("f9tZZ");

var $fD3dS = parcelRequire("fD3dS");

var $cGz00 = parcelRequire("cGz00");

var $cBldb = parcelRequire("cBldb");
var $e6aabd0ebd2c8701$require$Buffer = $cBldb.Buffer;

Object.assign(module.exports, (parcelRequire("785Wy")));
/**
 * the max integer that this VM can handle (a ```BN```)
 * @var {BN} MAX_INTEGER
 */ module.exports.MAX_INTEGER = new $fD3dS('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
/**
 * 2^256 (a ```BN```)
 * @var {BN} TWO_POW256
 */ module.exports.TWO_POW256 = new $fD3dS('10000000000000000000000000000000000000000000000000000000000000000', 16);
/**
 * Keccak-256 hash of null (a ```String```)
 * @var {String} KECCAK256_NULL_S
 */ module.exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
module.exports.SHA3_NULL_S = module.exports.KECCAK256_NULL_S;
/**
 * Keccak-256 hash of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_NULL
 */ module.exports.KECCAK256_NULL = $e6aabd0ebd2c8701$require$Buffer.from(module.exports.KECCAK256_NULL_S, 'hex');
module.exports.SHA3_NULL = module.exports.KECCAK256_NULL;
/**
 * Keccak-256 of an RLP of an empty array (a ```String```)
 * @var {String} KECCAK256_RLP_ARRAY_S
 */ module.exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
module.exports.SHA3_RLP_ARRAY_S = module.exports.KECCAK256_RLP_ARRAY_S;
/**
 * Keccak-256 of an RLP of an empty array (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP_ARRAY
 */ module.exports.KECCAK256_RLP_ARRAY = $e6aabd0ebd2c8701$require$Buffer.from(module.exports.KECCAK256_RLP_ARRAY_S, 'hex');
module.exports.SHA3_RLP_ARRAY = module.exports.KECCAK256_RLP_ARRAY;
/**
 * Keccak-256 hash of the RLP of null  (a ```String```)
 * @var {String} KECCAK256_RLP_S
 */ module.exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
module.exports.SHA3_RLP_S = module.exports.KECCAK256_RLP_S;
/**
 * Keccak-256 hash of the RLP of null (a ```Buffer```)
 * @var {Buffer} KECCAK256_RLP
 */ module.exports.KECCAK256_RLP = $e6aabd0ebd2c8701$require$Buffer.from(module.exports.KECCAK256_RLP_S, 'hex');
module.exports.SHA3_RLP = module.exports.KECCAK256_RLP;
/**
 * [`BN`](https://github.com/indutny/bn.js)
 * @var {Function}
 */ module.exports.BN = $fD3dS;
/**
 * [`rlp`](https://github.com/ethereumjs/rlp)
 * @var {Function}
 */ module.exports.rlp = $f9tZZ;
/**
 * [`secp256k1`](https://github.com/cryptocoinjs/secp256k1-node/)
 * @var {Object}
 */ module.exports.secp256k1 = $amVGm;
/**
 * Returns a buffer filled with 0s
 * @method zeros
 * @param {Number} bytes  the number of bytes the buffer should be
 * @return {Buffer}
 */ module.exports.zeros = function(bytes) {
    return $e6aabd0ebd2c8701$require$Buffer.allocUnsafe(bytes).fill(0);
};
/**
  * Returns a zero address
  * @method zeroAddress
  * @return {String}
  */ module.exports.zeroAddress = function() {
    var addressLength = 20;
    var zeroAddress = module.exports.zeros(addressLength);
    return module.exports.bufferToHex(zeroAddress);
};
/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @method lsetLength
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @param {Boolean} [right=false] whether to start padding form the left or right
 * @return {Buffer|Array}
 */ module.exports.setLengthLeft = module.exports.setLength = function(msg, length, right) {
    var buf = module.exports.zeros(length);
    msg = module.exports.toBuffer(msg);
    if (right) {
        if (msg.length < length) {
            msg.copy(buf);
            return buf;
        }
        return msg.slice(0, length);
    } else {
        if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
        }
        return msg.slice(-length);
    }
};
/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param {Buffer|Array} msg the value to pad
 * @param {Number} length the number of bytes the output should be
 * @return {Buffer|Array}
 */ module.exports.setLengthRight = function(msg, length) {
    return module.exports.setLength(msg, length, true);
};
/**
 * Trims leading zeros from a `Buffer` or an `Array`
 * @param {Buffer|Array|String} a
 * @return {Buffer|Array|String}
 */ module.exports.unpad = module.exports.stripZeros = function(a) {
    a = module.exports.stripHexPrefix(a);
    var first = a[0];
    while(a.length > 0 && first.toString() === '0'){
        a = a.slice(1);
        first = a[0];
    }
    return a;
};
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param {*} v the value
 */ module.exports.toBuffer = function(v) {
    if (!$e6aabd0ebd2c8701$require$Buffer.isBuffer(v)) {
        if (Array.isArray(v)) v = $e6aabd0ebd2c8701$require$Buffer.from(v);
        else if (typeof v === 'string') {
            if (module.exports.isHexString(v)) v = $e6aabd0ebd2c8701$require$Buffer.from(module.exports.padToEven(module.exports.stripHexPrefix(v)), 'hex');
            else v = $e6aabd0ebd2c8701$require$Buffer.from(v);
        } else if (typeof v === 'number') v = module.exports.intToBuffer(v);
        else if (v === null || v === undefined) v = $e6aabd0ebd2c8701$require$Buffer.allocUnsafe(0);
        else if ($fD3dS.isBN(v)) v = v.toArrayLike($e6aabd0ebd2c8701$require$Buffer);
        else if (v.toArray) // converts a BN to a Buffer
        v = $e6aabd0ebd2c8701$require$Buffer.from(v.toArray());
        else throw new Error('invalid type');
    }
    return v;
};
/**
 * Converts a `Buffer` to a `Number`
 * @param {Buffer} buf
 * @return {Number}
 * @throws If the input number exceeds 53 bits.
 */ module.exports.bufferToInt = function(buf) {
    return new $fD3dS(module.exports.toBuffer(buf)).toNumber();
};
/**
 * Converts a `Buffer` into a hex `String`
 * @param {Buffer} buf
 * @return {String}
 */ module.exports.bufferToHex = function(buf) {
    buf = module.exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
};
/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param {Buffer} num
 * @return {BN}
 */ module.exports.fromSigned = function(num) {
    return new $fD3dS(num).fromTwos(256);
};
/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param {BN} num
 * @return {Buffer}
 */ module.exports.toUnsigned = function(num) {
    return $e6aabd0ebd2c8701$require$Buffer.from(num.toTwos(256).toArray());
};
/**
 * Creates Keccak hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the Keccak width
 * @return {Buffer}
 */ module.exports.keccak = function(a, bits) {
    a = module.exports.toBuffer(a);
    if (!bits) bits = 256;
    switch(bits){
        case 224:
            return $e6aabd0ebd2c8701$var$keccak224(a);
        case 256:
            return $e6aabd0ebd2c8701$var$k256(a);
        case 384:
            return $e6aabd0ebd2c8701$var$keccak384(a);
        case 512:
            return $e6aabd0ebd2c8701$var$keccak512(a);
        default:
            throw new Error('Invald algorithm: keccak' + bits);
    }
};
/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256)
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */ module.exports.keccak256 = function(a) {
    return module.exports.keccak(a);
};
/**
 * Creates SHA-3 (Keccak) hash of the input [OBSOLETE]
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Number} [bits=256] the SHA-3 width
 * @return {Buffer}
 */ module.exports.sha3 = module.exports.keccak;
/**
 * Creates SHA256 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */ module.exports.sha256 = function(a) {
    a = module.exports.toBuffer(a);
    return $cGz00('sha256').update(a).digest();
};
/**
 * Creates RIPEMD160 hash of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @param {Boolean} padded whether it should be padded to 256 bits or not
 * @return {Buffer}
 */ module.exports.ripemd160 = function(a, padded) {
    a = module.exports.toBuffer(a);
    var hash = $cGz00('rmd160').update(a).digest();
    if (padded === true) return module.exports.setLength(hash, 32);
    else return hash;
};
/**
 * Creates SHA-3 hash of the RLP encoded version of the input
 * @param {Buffer|Array|String|Number} a the input data
 * @return {Buffer}
 */ module.exports.rlphash = function(a) {
    return module.exports.keccak($f9tZZ.encode(a));
};
/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 * @param {Buffer} privateKey
 * @return {Boolean}
 */ module.exports.isValidPrivate = function(privateKey) {
    return $amVGm.privateKeyVerify(privateKey);
};
/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param {Buffer} publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Boolean}
 */ module.exports.isValidPublic = function(publicKey, sanitize) {
    if (publicKey.length === 64) // Convert to SEC1 for secp256k1
    return $amVGm.publicKeyVerify($e6aabd0ebd2c8701$require$Buffer.concat([
        $e6aabd0ebd2c8701$require$Buffer.from([
            4
        ]),
        publicKey
    ]));
    if (!sanitize) return false;
    return $amVGm.publicKeyVerify(publicKey);
};
/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param {Buffer} pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param {Boolean} [sanitize=false] Accept public keys in other formats
 * @return {Buffer}
 */ module.exports.pubToAddress = module.exports.publicToAddress = function(pubKey, sanitize) {
    pubKey = module.exports.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) pubKey = $amVGm.publicKeyConvert(pubKey, false).slice(1);
    $cAqPD(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return module.exports.keccak(pubKey).slice(-20);
};
/**
 * Returns the ethereum public key of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */ var $e6aabd0ebd2c8701$var$privateToPublic = module.exports.privateToPublic = function(privateKey) {
    privateKey = module.exports.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return $amVGm.publicKeyCreate(privateKey, false).slice(1);
};
/**
 * Converts a public key to the Ethereum format.
 * @param {Buffer} publicKey
 * @return {Buffer}
 */ module.exports.importPublic = function(publicKey) {
    publicKey = module.exports.toBuffer(publicKey);
    if (publicKey.length !== 64) publicKey = $amVGm.publicKeyConvert(publicKey, false).slice(1);
    return publicKey;
};
/**
 * ECDSA sign
 * @param {Buffer} msgHash
 * @param {Buffer} privateKey
 * @return {Object}
 */ module.exports.ecsign = function(msgHash, privateKey) {
    var sig = $amVGm.sign(msgHash, privateKey);
    var ret = {};
    ret.r = sig.signature.slice(0, 32);
    ret.s = sig.signature.slice(32, 64);
    ret.v = sig.recovery + 27;
    return ret;
};
/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 * @param message
 * @returns {Buffer} hash
 */ module.exports.hashPersonalMessage = function(message) {
    var prefix = module.exports.toBuffer('\x19Ethereum Signed Message:\n' + message.length.toString());
    return module.exports.keccak($e6aabd0ebd2c8701$require$Buffer.concat([
        prefix,
        message
    ]));
};
/**
 * ECDSA public key recovery from signature
 * @param {Buffer} msgHash
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {Buffer} publicKey
 */ module.exports.ecrecover = function(msgHash, v, r, s) {
    var signature = $e6aabd0ebd2c8701$require$Buffer.concat([
        module.exports.setLength(r, 32),
        module.exports.setLength(s, 32)
    ], 64);
    var recovery = v - 27;
    if (recovery !== 0 && recovery !== 1) throw new Error('Invalid signature v value');
    var senderPubKey = $amVGm.recover(msgHash, signature, recovery);
    return $amVGm.publicKeyConvert(senderPubKey, false).slice(1);
};
/**
 * Convert signature parameters into the format of `eth_sign` RPC method
 * @param {Number} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @return {String} sig
 */ module.exports.toRpcSig = function(v, r, s) {
    // NOTE: with potential introduction of chainId this might need to be updated
    if (v !== 27 && v !== 28) throw new Error('Invalid recovery id');
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    // FIXME: this might change in the future - https://github.com/ethereum/go-ethereum/issues/2053
    return module.exports.bufferToHex($e6aabd0ebd2c8701$require$Buffer.concat([
        module.exports.setLengthLeft(r, 32),
        module.exports.setLengthLeft(s, 32),
        module.exports.toBuffer(v - 27)
    ]));
};
/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 * @param {String} sig
 * @return {Object}
 */ module.exports.fromRpcSig = function(sig) {
    sig = module.exports.toBuffer(sig);
    // NOTE: with potential introduction of chainId this might need to be updated
    if (sig.length !== 65) throw new Error('Invalid signature length');
    var v = sig[64];
    // support both versions of `eth_sign` responses
    if (v < 27) v += 27;
    return {
        v: v,
        r: sig.slice(0, 32),
        s: sig.slice(32, 64)
    };
};
/**
 * Returns the ethereum address of a given private key
 * @param {Buffer} privateKey A private key must be 256 bits wide
 * @return {Buffer}
 */ module.exports.privateToAddress = function(privateKey) {
    return module.exports.publicToAddress($e6aabd0ebd2c8701$var$privateToPublic(privateKey));
};
/**
 * Checks if the address is a valid. Accepts checksummed addresses too
 * @param {String} address
 * @return {Boolean}
 */ module.exports.isValidAddress = function(address) {
    return /^0x[0-9a-fA-F]{40}$/.test(address);
};
/**
  * Checks if a given address is a zero address
  * @method isZeroAddress
  * @param {String} address
  * @return {Boolean}
  */ module.exports.isZeroAddress = function(address) {
    var zeroAddress = module.exports.zeroAddress();
    return zeroAddress === module.exports.addHexPrefix(address);
};
/**
 * Returns a checksummed address
 * @param {String} address
 * @return {String}
 */ module.exports.toChecksumAddress = function(address) {
    address = module.exports.stripHexPrefix(address).toLowerCase();
    var hash = module.exports.keccak(address).toString('hex');
    var ret = '0x';
    for(var i = 0; i < address.length; i++)if (parseInt(hash[i], 16) >= 8) ret += address[i].toUpperCase();
    else ret += address[i];
    return ret;
};
/**
 * Checks if the address is a valid checksummed address
 * @param {Buffer} address
 * @return {Boolean}
 */ module.exports.isValidChecksumAddress = function(address) {
    return module.exports.isValidAddress(address) && module.exports.toChecksumAddress(address) === address;
};
/**
 * Generates an address of a newly created contract
 * @param {Buffer} from the address which is creating this new address
 * @param {Buffer} nonce the nonce of the from account
 * @return {Buffer}
 */ module.exports.generateAddress = function(from, nonce) {
    from = module.exports.toBuffer(from);
    nonce = new $fD3dS(nonce);
    if (nonce.isZero()) // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    nonce = null;
    else nonce = $e6aabd0ebd2c8701$require$Buffer.from(nonce.toArray());
    // Only take the lower 160bits of the hash
    return module.exports.rlphash([
        from,
        nonce
    ]).slice(-20);
};
/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium)
 * @param {Buffer|String} address
 * @return {Boolean}
 */ module.exports.isPrecompiled = function(address) {
    var a = module.exports.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};
/**
 * Adds "0x" to a given `String` if it does not already start with "0x"
 * @param {String} str
 * @return {String}
 */ module.exports.addHexPrefix = function(str) {
    if (typeof str !== 'string') return str;
    return module.exports.isHexPrefixed(str) ? str : '0x' + str;
};
/**
 * Validate ECDSA signature
 * @method isValidSignature
 * @param {Buffer} v
 * @param {Buffer} r
 * @param {Buffer} s
 * @param {Boolean} [homestead=true]
 * @return {Boolean}
 */ module.exports.isValidSignature = function(v, r, s, homestead) {
    var SECP256K1_N_DIV_2 = new $fD3dS('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new $fD3dS('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
    if (r.length !== 32 || s.length !== 32) return false;
    if (v !== 27 && v !== 28) return false;
    r = new $fD3dS(r);
    s = new $fD3dS(s);
    if (r.isZero() || r.gt(SECP256K1_N) || s.isZero() || s.gt(SECP256K1_N)) return false;
    if (homestead === false && new $fD3dS(s).cmp(SECP256K1_N_DIV_2) === 1) return false;
    return true;
};
/**
 * Converts a `Buffer` or `Array` to JSON
 * @param {Buffer|Array} ba
 * @return {Array|String|null}
 */ module.exports.baToJSON = function(ba) {
    if ($e6aabd0ebd2c8701$require$Buffer.isBuffer(ba)) return '0x' + ba.toString('hex');
    else if (ba instanceof Array) {
        var array = [];
        for(var i = 0; i < ba.length; i++)array.push(module.exports.baToJSON(ba[i]));
        return array;
    }
};
/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param {Object} self the `Object` to define properties on
 * @param {Array} fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param {*} data data to be validated against the definitions
 */ module.exports.defineProperties = function(self, fields, data) {
    self.raw = [];
    self._fields = [];
    // attach the `toJSON`
    self.toJSON = function(label) {
        if (label) {
            var obj = {};
            self._fields.forEach(function(field) {
                obj[field] = '0x' + self[field].toString('hex');
            });
            return obj;
        }
        return module.exports.baToJSON(this.raw);
    };
    self.serialize = function serialize() {
        return $f9tZZ.encode(self.raw);
    };
    fields.forEach(function(field, i) {
        self._fields.push(field.name);
        function getter() {
            return self.raw[i];
        }
        function setter(v) {
            v = module.exports.toBuffer(v);
            if (v.toString('hex') === '00' && !field.allowZero) v = $e6aabd0ebd2c8701$require$Buffer.allocUnsafe(0);
            if (field.allowLess && field.length) {
                v = module.exports.stripZeros(v);
                $cAqPD(field.length >= v.length, 'The field ' + field.name + ' must not have more ' + field.length + ' bytes');
            } else if (!(field.allowZero && v.length === 0) && field.length) $cAqPD(field.length === v.length, 'The field ' + field.name + ' must have byte length of ' + field.length);
            self.raw[i] = v;
        }
        Object.defineProperty(self, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter
        });
        if (field.default) self[field.name] = field.default;
        // attach alias
        if (field.alias) Object.defineProperty(self, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
        });
    });
    // if the constuctor is passed data
    if (data) {
        if (typeof data === 'string') data = $e6aabd0ebd2c8701$require$Buffer.from(module.exports.stripHexPrefix(data), 'hex');
        if ($e6aabd0ebd2c8701$require$Buffer.isBuffer(data)) data = $f9tZZ.decode(data);
        if (Array.isArray(data)) {
            if (data.length > self._fields.length) throw new Error('wrong number of fields in data');
            // make sure all the items are buffers
            data.forEach(function(d, i) {
                self[self._fields[i]] = module.exports.toBuffer(d);
            });
        } else if ((typeof data === 'undefined' ? 'undefined' : $e6aabd0ebd2c8701$var$_typeof(data)) === 'object') {
            var keys = Object.keys(data);
            fields.forEach(function(field) {
                if (keys.indexOf(field.name) !== -1) self[field.name] = data[field.name];
                if (keys.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
            });
        } else throw new Error('invalid data');
    }
};

});
parcelRequire.register("fydUV", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $hvYA6 = parcelRequire("hvYA6");

var $fkSI0 = parcelRequire("fkSI0");
module.exports.keccak224 = $hvYA6.createHashFunction(function() {
    return $fkSI0("keccak224");
});
module.exports.keccak256 = $hvYA6.createHashFunction(function() {
    return $fkSI0("keccak256");
});
module.exports.keccak384 = $hvYA6.createHashFunction(function() {
    return $fkSI0("keccak384");
});
module.exports.keccak512 = $hvYA6.createHashFunction(function() {
    return $fkSI0("keccak512");
});

});
parcelRequire.register("hvYA6", function(module, exports) {
"use strict";

var $cc04531f65f23312$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
function $cc04531f65f23312$var$createHashFunction(hashConstructor) {
    return function(msg) {
        var hash = hashConstructor();
        hash.update(msg);
        return $cc04531f65f23312$require$Buffer.from(hash.digest());
    };
}
module.exports.createHashFunction = $cc04531f65f23312$var$createHashFunction;

});
var $ef9975513e2e43d1$exports = {};

$parcel$export($ef9975513e2e43d1$exports, "Buffer", () => $ef9975513e2e43d1$export$a143d493d941bafc, (v) => $ef9975513e2e43d1$export$a143d493d941bafc = v);
$parcel$export($ef9975513e2e43d1$exports, "SlowBuffer", () => $ef9975513e2e43d1$export$e4cf37d7f6fb9e0a, (v) => $ef9975513e2e43d1$export$e4cf37d7f6fb9e0a = v);
$parcel$export($ef9975513e2e43d1$exports, "INSPECT_MAX_BYTES", () => $ef9975513e2e43d1$export$f99ded8fe4b79145, (v) => $ef9975513e2e43d1$export$f99ded8fe4b79145 = v);
$parcel$export($ef9975513e2e43d1$exports, "kMaxLength", () => $ef9975513e2e43d1$export$599f31c3813fae4d, (v) => $ef9975513e2e43d1$export$599f31c3813fae4d = v);
var $ef9975513e2e43d1$export$a143d493d941bafc;
var $ef9975513e2e43d1$export$e4cf37d7f6fb9e0a;
var $ef9975513e2e43d1$export$f99ded8fe4b79145;
var $ef9975513e2e43d1$export$599f31c3813fae4d;
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var $b5831eb1d6c96426$export$a48f0734ac7c2329;
var $b5831eb1d6c96426$export$d622b2ad8d90c771;
var $b5831eb1d6c96426$export$6100ba28696e12de;
'use strict';
$b5831eb1d6c96426$export$a48f0734ac7c2329 = $b5831eb1d6c96426$var$byteLength;
$b5831eb1d6c96426$export$d622b2ad8d90c771 = $b5831eb1d6c96426$var$toByteArray;
$b5831eb1d6c96426$export$6100ba28696e12de = $b5831eb1d6c96426$var$fromByteArray;
var $b5831eb1d6c96426$var$lookup = [];
var $b5831eb1d6c96426$var$revLookup = [];
var $b5831eb1d6c96426$var$Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var $b5831eb1d6c96426$var$code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var $b5831eb1d6c96426$var$i = 0, $b5831eb1d6c96426$var$len = $b5831eb1d6c96426$var$code.length; $b5831eb1d6c96426$var$i < $b5831eb1d6c96426$var$len; ++$b5831eb1d6c96426$var$i){
    $b5831eb1d6c96426$var$lookup[$b5831eb1d6c96426$var$i] = $b5831eb1d6c96426$var$code[$b5831eb1d6c96426$var$i];
    $b5831eb1d6c96426$var$revLookup[$b5831eb1d6c96426$var$code.charCodeAt($b5831eb1d6c96426$var$i)] = $b5831eb1d6c96426$var$i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
$b5831eb1d6c96426$var$revLookup['-'.charCodeAt(0)] = 62;
$b5831eb1d6c96426$var$revLookup['_'.charCodeAt(0)] = 63;
function $b5831eb1d6c96426$var$getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function $b5831eb1d6c96426$var$byteLength(b64) {
    var lens = $b5831eb1d6c96426$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $b5831eb1d6c96426$var$_byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function $b5831eb1d6c96426$var$toByteArray(b64) {
    var tmp;
    var lens = $b5831eb1d6c96426$var$getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new $b5831eb1d6c96426$var$Arr($b5831eb1d6c96426$var$_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i)] << 18 | $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i + 1)] << 12 | $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i + 2)] << 6 | $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i)] << 2 | $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i)] << 10 | $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i + 1)] << 4 | $b5831eb1d6c96426$var$revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function $b5831eb1d6c96426$var$tripletToBase64(num) {
    return $b5831eb1d6c96426$var$lookup[num >> 18 & 63] + $b5831eb1d6c96426$var$lookup[num >> 12 & 63] + $b5831eb1d6c96426$var$lookup[num >> 6 & 63] + $b5831eb1d6c96426$var$lookup[num & 63];
}
function $b5831eb1d6c96426$var$encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 16711680) + (uint8[i + 1] << 8 & 65280) + (uint8[i + 2] & 255);
        output.push($b5831eb1d6c96426$var$tripletToBase64(tmp));
    }
    return output.join('');
}
function $b5831eb1d6c96426$var$fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push($b5831eb1d6c96426$var$encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push($b5831eb1d6c96426$var$lookup[tmp >> 2] + $b5831eb1d6c96426$var$lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push($b5831eb1d6c96426$var$lookup[tmp >> 10] + $b5831eb1d6c96426$var$lookup[tmp >> 4 & 63] + $b5831eb1d6c96426$var$lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}


/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ var $a11c6733277d3ca0$export$aafa59e2e03f2942;
var $a11c6733277d3ca0$export$68d8715fc104d294;
$a11c6733277d3ca0$export$aafa59e2e03f2942 = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
$a11c6733277d3ca0$export$68d8715fc104d294 = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};


var $ef9975513e2e43d1$var$customInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : null;
$ef9975513e2e43d1$export$a143d493d941bafc = $ef9975513e2e43d1$var$Buffer;
$ef9975513e2e43d1$export$e4cf37d7f6fb9e0a = $ef9975513e2e43d1$var$SlowBuffer;
$ef9975513e2e43d1$export$f99ded8fe4b79145 = 50;
var $ef9975513e2e43d1$var$K_MAX_LENGTH = 2147483647;
$ef9975513e2e43d1$export$599f31c3813fae4d = $ef9975513e2e43d1$var$K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ $ef9975513e2e43d1$var$Buffer.TYPED_ARRAY_SUPPORT = $ef9975513e2e43d1$var$typedArraySupport();
if (!$ef9975513e2e43d1$var$Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function $ef9975513e2e43d1$var$typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty($ef9975513e2e43d1$var$Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!$ef9975513e2e43d1$var$Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty($ef9975513e2e43d1$var$Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!$ef9975513e2e43d1$var$Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function $ef9975513e2e43d1$var$createBuffer(length) {
    if (length > $ef9975513e2e43d1$var$K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, $ef9975513e2e43d1$var$Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function $ef9975513e2e43d1$var$Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return $ef9975513e2e43d1$var$allocUnsafe(arg);
    }
    return $ef9975513e2e43d1$var$from(arg, encodingOrOffset, length);
}
$ef9975513e2e43d1$var$Buffer.poolSize = 8192 // not used by this implementation
;
function $ef9975513e2e43d1$var$from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return $ef9975513e2e43d1$var$fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return $ef9975513e2e43d1$var$fromArrayLike(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if ($ef9975513e2e43d1$var$isInstance(value, ArrayBuffer) || value && $ef9975513e2e43d1$var$isInstance(value.buffer, ArrayBuffer)) return $ef9975513e2e43d1$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && ($ef9975513e2e43d1$var$isInstance(value, SharedArrayBuffer) || value && $ef9975513e2e43d1$var$isInstance(value.buffer, SharedArrayBuffer))) return $ef9975513e2e43d1$var$fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return $ef9975513e2e43d1$var$Buffer.from(valueOf, encodingOrOffset, length);
    var b = $ef9975513e2e43d1$var$fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return $ef9975513e2e43d1$var$Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ $ef9975513e2e43d1$var$Buffer.from = function(value, encodingOrOffset, length) {
    return $ef9975513e2e43d1$var$from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf($ef9975513e2e43d1$var$Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf($ef9975513e2e43d1$var$Buffer, Uint8Array);
function $ef9975513e2e43d1$var$assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function $ef9975513e2e43d1$var$alloc(size, fill, encoding) {
    $ef9975513e2e43d1$var$assertSize(size);
    if (size <= 0) return $ef9975513e2e43d1$var$createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string' ? $ef9975513e2e43d1$var$createBuffer(size).fill(fill, encoding) : $ef9975513e2e43d1$var$createBuffer(size).fill(fill);
    return $ef9975513e2e43d1$var$createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ $ef9975513e2e43d1$var$Buffer.alloc = function(size, fill, encoding) {
    return $ef9975513e2e43d1$var$alloc(size, fill, encoding);
};
function $ef9975513e2e43d1$var$allocUnsafe(size) {
    $ef9975513e2e43d1$var$assertSize(size);
    return $ef9975513e2e43d1$var$createBuffer(size < 0 ? 0 : $ef9975513e2e43d1$var$checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ $ef9975513e2e43d1$var$Buffer.allocUnsafe = function(size) {
    return $ef9975513e2e43d1$var$allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ $ef9975513e2e43d1$var$Buffer.allocUnsafeSlow = function(size) {
    return $ef9975513e2e43d1$var$allocUnsafe(size);
};
function $ef9975513e2e43d1$var$fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!$ef9975513e2e43d1$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = $ef9975513e2e43d1$var$byteLength(string, encoding) | 0;
    var buf = $ef9975513e2e43d1$var$createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function $ef9975513e2e43d1$var$fromArrayLike(array) {
    var length = array.length < 0 ? 0 : $ef9975513e2e43d1$var$checked(array.length) | 0;
    var buf = $ef9975513e2e43d1$var$createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function $ef9975513e2e43d1$var$fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, $ef9975513e2e43d1$var$Buffer.prototype);
    return buf;
}
function $ef9975513e2e43d1$var$fromObject(obj) {
    if ($ef9975513e2e43d1$var$Buffer.isBuffer(obj)) {
        var len = $ef9975513e2e43d1$var$checked(obj.length) | 0;
        var buf = $ef9975513e2e43d1$var$createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || $ef9975513e2e43d1$var$numberIsNaN(obj.length)) return $ef9975513e2e43d1$var$createBuffer(0);
        return $ef9975513e2e43d1$var$fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return $ef9975513e2e43d1$var$fromArrayLike(obj.data);
}
function $ef9975513e2e43d1$var$checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= $ef9975513e2e43d1$var$K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + $ef9975513e2e43d1$var$K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function $ef9975513e2e43d1$var$SlowBuffer(length) {
    if (+length != length) length = 0;
    return $ef9975513e2e43d1$var$Buffer.alloc(+length);
}
$ef9975513e2e43d1$var$Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== $ef9975513e2e43d1$var$Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
$ef9975513e2e43d1$var$Buffer.compare = function compare(a, b) {
    if ($ef9975513e2e43d1$var$isInstance(a, Uint8Array)) a = $ef9975513e2e43d1$var$Buffer.from(a, a.offset, a.byteLength);
    if ($ef9975513e2e43d1$var$isInstance(b, Uint8Array)) b = $ef9975513e2e43d1$var$Buffer.from(b, b.offset, b.byteLength);
    if (!$ef9975513e2e43d1$var$Buffer.isBuffer(a) || !$ef9975513e2e43d1$var$Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
$ef9975513e2e43d1$var$Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
$ef9975513e2e43d1$var$Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return $ef9975513e2e43d1$var$Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = $ef9975513e2e43d1$var$Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if ($ef9975513e2e43d1$var$isInstance(buf, Uint8Array)) buf = $ef9975513e2e43d1$var$Buffer.from(buf);
        if (!$ef9975513e2e43d1$var$Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function $ef9975513e2e43d1$var$byteLength(string, encoding) {
    if ($ef9975513e2e43d1$var$Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || $ef9975513e2e43d1$var$isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return $ef9975513e2e43d1$var$utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return $ef9975513e2e43d1$var$base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : $ef9975513e2e43d1$var$utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
$ef9975513e2e43d1$var$Buffer.byteLength = $ef9975513e2e43d1$var$byteLength;
function $ef9975513e2e43d1$var$slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return $ef9975513e2e43d1$var$hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return $ef9975513e2e43d1$var$utf8Slice(this, start, end);
        case 'ascii':
            return $ef9975513e2e43d1$var$asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return $ef9975513e2e43d1$var$latin1Slice(this, start, end);
        case 'base64':
            return $ef9975513e2e43d1$var$base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $ef9975513e2e43d1$var$utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
$ef9975513e2e43d1$var$Buffer.prototype._isBuffer = true;
function $ef9975513e2e43d1$var$swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
$ef9975513e2e43d1$var$Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)$ef9975513e2e43d1$var$swap(this, i, i + 1);
    return this;
};
$ef9975513e2e43d1$var$Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        $ef9975513e2e43d1$var$swap(this, i, i + 3);
        $ef9975513e2e43d1$var$swap(this, i + 1, i + 2);
    }
    return this;
};
$ef9975513e2e43d1$var$Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        $ef9975513e2e43d1$var$swap(this, i, i + 7);
        $ef9975513e2e43d1$var$swap(this, i + 1, i + 6);
        $ef9975513e2e43d1$var$swap(this, i + 2, i + 5);
        $ef9975513e2e43d1$var$swap(this, i + 3, i + 4);
    }
    return this;
};
$ef9975513e2e43d1$var$Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return $ef9975513e2e43d1$var$utf8Slice(this, 0, length);
    return $ef9975513e2e43d1$var$slowToString.apply(this, arguments);
};
$ef9975513e2e43d1$var$Buffer.prototype.toLocaleString = $ef9975513e2e43d1$var$Buffer.prototype.toString;
$ef9975513e2e43d1$var$Buffer.prototype.equals = function equals(b) {
    if (!$ef9975513e2e43d1$var$Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return $ef9975513e2e43d1$var$Buffer.compare(this, b) === 0;
};
$ef9975513e2e43d1$var$Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = $ef9975513e2e43d1$export$f99ded8fe4b79145;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if ($ef9975513e2e43d1$var$customInspectSymbol) $ef9975513e2e43d1$var$Buffer.prototype[$ef9975513e2e43d1$var$customInspectSymbol] = $ef9975513e2e43d1$var$Buffer.prototype.inspect;
$ef9975513e2e43d1$var$Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if ($ef9975513e2e43d1$var$isInstance(target, Uint8Array)) target = $ef9975513e2e43d1$var$Buffer.from(target, target.offset, target.byteLength);
    if (!$ef9975513e2e43d1$var$Buffer.isBuffer(target)) throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function $ef9975513e2e43d1$var$bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if ($ef9975513e2e43d1$var$numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = $ef9975513e2e43d1$var$Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if ($ef9975513e2e43d1$var$Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return $ef9975513e2e43d1$var$arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return $ef9975513e2e43d1$var$arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function $ef9975513e2e43d1$var$arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i1;
    if (dir) {
        var foundIndex = -1;
        for(i1 = byteOffset; i1 < arrLength; i1++)if (read(arr, i1) === read(val, foundIndex === -1 ? 0 : i1 - foundIndex)) {
            if (foundIndex === -1) foundIndex = i1;
            if (i1 - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i1 -= i1 - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i1 = byteOffset; i1 >= 0; i1--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i1 + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i1;
        }
    }
    return -1;
}
$ef9975513e2e43d1$var$Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
$ef9975513e2e43d1$var$Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return $ef9975513e2e43d1$var$bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
$ef9975513e2e43d1$var$Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return $ef9975513e2e43d1$var$bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function $ef9975513e2e43d1$var$hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if ($ef9975513e2e43d1$var$numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function $ef9975513e2e43d1$var$utf8Write(buf, string, offset, length) {
    return $ef9975513e2e43d1$var$blitBuffer($ef9975513e2e43d1$var$utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function $ef9975513e2e43d1$var$asciiWrite(buf, string, offset, length) {
    return $ef9975513e2e43d1$var$blitBuffer($ef9975513e2e43d1$var$asciiToBytes(string), buf, offset, length);
}
function $ef9975513e2e43d1$var$latin1Write(buf, string, offset, length) {
    return $ef9975513e2e43d1$var$asciiWrite(buf, string, offset, length);
}
function $ef9975513e2e43d1$var$base64Write(buf, string, offset, length) {
    return $ef9975513e2e43d1$var$blitBuffer($ef9975513e2e43d1$var$base64ToBytes(string), buf, offset, length);
}
function $ef9975513e2e43d1$var$ucs2Write(buf, string, offset, length) {
    return $ef9975513e2e43d1$var$blitBuffer($ef9975513e2e43d1$var$utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
$ef9975513e2e43d1$var$Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return $ef9975513e2e43d1$var$hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return $ef9975513e2e43d1$var$utf8Write(this, string, offset, length);
        case 'ascii':
            return $ef9975513e2e43d1$var$asciiWrite(this, string, offset, length);
        case 'latin1':
        case 'binary':
            return $ef9975513e2e43d1$var$latin1Write(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return $ef9975513e2e43d1$var$base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return $ef9975513e2e43d1$var$ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
$ef9975513e2e43d1$var$Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function $ef9975513e2e43d1$var$base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return $b5831eb1d6c96426$export$6100ba28696e12de(buf);
    else return $b5831eb1d6c96426$export$6100ba28696e12de(buf.slice(start, end));
}
function $ef9975513e2e43d1$var$utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return $ef9975513e2e43d1$var$decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var $ef9975513e2e43d1$var$MAX_ARGUMENTS_LENGTH = 4096;
function $ef9975513e2e43d1$var$decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= $ef9975513e2e43d1$var$MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += $ef9975513e2e43d1$var$MAX_ARGUMENTS_LENGTH));
    return res;
}
function $ef9975513e2e43d1$var$asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function $ef9975513e2e43d1$var$latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function $ef9975513e2e43d1$var$hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += $ef9975513e2e43d1$var$hexSliceLookupTable[buf[i]];
    return out;
}
function $ef9975513e2e43d1$var$utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    for(var i = 0; i < bytes.length; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
$ef9975513e2e43d1$var$Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, $ef9975513e2e43d1$var$Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function $ef9975513e2e43d1$var$checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
$ef9975513e2e43d1$var$Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
$ef9975513e2e43d1$var$Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 256))val += this[offset + --byteLength] * mul;
    return val;
};
$ef9975513e2e43d1$var$Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 1, this.length);
    return this[offset];
};
$ef9975513e2e43d1$var$Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
$ef9975513e2e43d1$var$Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
$ef9975513e2e43d1$var$Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
$ef9975513e2e43d1$var$Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
$ef9975513e2e43d1$var$Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$ef9975513e2e43d1$var$Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
$ef9975513e2e43d1$var$Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
$ef9975513e2e43d1$var$Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$ef9975513e2e43d1$var$Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
$ef9975513e2e43d1$var$Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
$ef9975513e2e43d1$var$Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
$ef9975513e2e43d1$var$Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 4, this.length);
    return $a11c6733277d3ca0$export$aafa59e2e03f2942(this, offset, true, 23, 4);
};
$ef9975513e2e43d1$var$Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 4, this.length);
    return $a11c6733277d3ca0$export$aafa59e2e03f2942(this, offset, false, 23, 4);
};
$ef9975513e2e43d1$var$Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 8, this.length);
    return $a11c6733277d3ca0$export$aafa59e2e03f2942(this, offset, true, 52, 8);
};
$ef9975513e2e43d1$var$Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkOffset(offset, 8, this.length);
    return $a11c6733277d3ca0$export$aafa59e2e03f2942(this, offset, false, 52, 8);
};
function $ef9975513e2e43d1$var$checkInt(buf, value, offset, ext, max, min) {
    if (!$ef9975513e2e43d1$var$Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
$ef9975513e2e43d1$var$Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $ef9975513e2e43d1$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength = byteLength >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        $ef9975513e2e43d1$var$checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $ef9975513e2e43d1$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while(++i < byteLength && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        $ef9975513e2e43d1$var$checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 255;
    while(--i >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
$ef9975513e2e43d1$var$Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function $ef9975513e2e43d1$var$checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function $ef9975513e2e43d1$var$writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    $a11c6733277d3ca0$export$68d8715fc104d294(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
$ef9975513e2e43d1$var$Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return $ef9975513e2e43d1$var$writeFloat(this, value, offset, true, noAssert);
};
$ef9975513e2e43d1$var$Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return $ef9975513e2e43d1$var$writeFloat(this, value, offset, false, noAssert);
};
function $ef9975513e2e43d1$var$writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) $ef9975513e2e43d1$var$checkIEEE754(buf, value, offset
    $a11c6733277d3ca0$export$68d8715fc104d294(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
$ef9975513e2e43d1$var$Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return $ef9975513e2e43d1$var$writeDouble(this, value, offset, true, noAssert);
};
$ef9975513e2e43d1$var$Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return $ef9975513e2e43d1$var$writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
$ef9975513e2e43d1$var$Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!$ef9975513e2e43d1$var$Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else if (this === target && start < targetStart && targetStart < end) // descending copy from end
    for(var i = len - 1; i >= 0; --i)target[i + targetStart] = this[i + start];
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
$ef9975513e2e43d1$var$Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !$ef9975513e2e43d1$var$Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = $ef9975513e2e43d1$var$Buffer.isBuffer(val) ? val : $ef9975513e2e43d1$var$Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var $ef9975513e2e43d1$var$INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function $ef9975513e2e43d1$var$base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace($ef9975513e2e43d1$var$INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function $ef9975513e2e43d1$var$utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function $ef9975513e2e43d1$var$asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function $ef9975513e2e43d1$var$utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function $ef9975513e2e43d1$var$base64ToBytes(str) {
    return $b5831eb1d6c96426$export$d622b2ad8d90c771($ef9975513e2e43d1$var$base64clean(str));
}
function $ef9975513e2e43d1$var$blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function $ef9975513e2e43d1$var$isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function $ef9975513e2e43d1$var$numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var $ef9975513e2e43d1$var$hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();


parcelRequire.register("fkSI0", function(module, exports) {


module.exports = (parcelRequire("9bYOE"))((parcelRequire("jM9sR")));

});
parcelRequire.register("9bYOE", function(module, exports) {

var $4ccNw = parcelRequire("4ccNw");

var $KzfAU = parcelRequire("KzfAU");
module.exports = function(KeccakState) {
    const Keccak = $4ccNw(KeccakState);
    const Shake = $KzfAU(KeccakState);
    return function(algorithm, options) {
        const hash = typeof algorithm === 'string' ? algorithm.toLowerCase() : algorithm;
        switch(hash){
            case 'keccak224':
                return new Keccak(1152, 448, null, 224, options);
            case 'keccak256':
                return new Keccak(1088, 512, null, 256, options);
            case 'keccak384':
                return new Keccak(832, 768, null, 384, options);
            case 'keccak512':
                return new Keccak(576, 1024, null, 512, options);
            case 'sha3-224':
                return new Keccak(1152, 448, 6, 224, options);
            case 'sha3-256':
                return new Keccak(1088, 512, 6, 256, options);
            case 'sha3-384':
                return new Keccak(832, 768, 6, 384, options);
            case 'sha3-512':
                return new Keccak(576, 1024, 6, 512, options);
            case 'shake128':
                return new Shake(1344, 256, 31, options);
            case 'shake256':
                return new Shake(1088, 512, 31, options);
            default:
                throw new Error('Invald algorithm: ' + algorithm);
        }
    };
};

});
parcelRequire.register("4ccNw", function(module, exports) {

var $30e235c4fea789fe$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $55xsE = parcelRequire("55xsE");
var $30e235c4fea789fe$require$Transform = $55xsE.Transform;
module.exports = (KeccakState)=>class Keccak extends $30e235c4fea789fe$require$Transform {
        constructor(rate, capacity, delimitedSuffix, hashBitLength, options){
            super(options);
            this._rate = rate;
            this._capacity = capacity;
            this._delimitedSuffix = delimitedSuffix;
            this._hashBitLength = hashBitLength;
            this._options = options;
            this._state = new KeccakState();
            this._state.initialize(rate, capacity);
            this._finalized = false;
        }
        _transform(chunk, encoding, callback) {
            let error = null;
            try {
                this.update(chunk, encoding);
            } catch (err) {
                error = err;
            }
            callback(error);
        }
        _flush(callback) {
            let error = null;
            try {
                this.push(this.digest());
            } catch (err) {
                error = err;
            }
            callback(error);
        }
        update(data, encoding) {
            if (!$30e235c4fea789fe$require$Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
            if (this._finalized) throw new Error('Digest already called');
            if (!$30e235c4fea789fe$require$Buffer.isBuffer(data)) data = $30e235c4fea789fe$require$Buffer.from(data, encoding);
            this._state.absorb(data);
            return this;
        }
        digest(encoding) {
            if (this._finalized) throw new Error('Digest already called');
            this._finalized = true;
            if (this._delimitedSuffix) this._state.absorbLastFewBits(this._delimitedSuffix);
            let digest = this._state.squeeze(this._hashBitLength / 8);
            if (encoding !== undefined) digest = digest.toString(encoding);
            this._resetState();
            return digest;
        }
        // remove result from memory
        _resetState() {
            this._state.initialize(this._rate, this._capacity);
            return this;
        }
        // because sometimes we need hash right now and little later
        _clone() {
            const clone = new Keccak(this._rate, this._capacity, this._delimitedSuffix, this._hashBitLength, this._options);
            this._state.copy(clone._state);
            clone._finalized = this._finalized;
            return clone;
        }
    }
;

});
parcelRequire.register("55xsE", function(module, exports) {

exports = module.exports = (parcelRequire("70JXy"));
exports.Stream = exports;
exports.Readable = exports;

exports.Writable = (parcelRequire("kQozz"));

exports.Duplex = (parcelRequire("a3gl0"));

exports.Transform = (parcelRequire("3SaH0"));

exports.PassThrough = (parcelRequire("1Nz0S"));

exports.finished = (parcelRequire("kwxiL"));

exports.pipeline = (parcelRequire("jcAAk"));

});
parcelRequire.register("70JXy", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $FkHbz = parcelRequire("FkHbz");
module.exports = $51ac2f1f715d319e$var$Readable;
/*<replacement>*/ var $51ac2f1f715d319e$var$Duplex;
/*</replacement>*/ $51ac2f1f715d319e$var$Readable.ReadableState = $51ac2f1f715d319e$var$ReadableState;

var $a0h4l = parcelRequire("a0h4l");
var $51ac2f1f715d319e$require$EE = $a0h4l.EventEmitter;
var $51ac2f1f715d319e$var$EElistenerCount = function EElistenerCount(emitter, type) {
    return emitter.listeners(type).length;
};

var $9rDhX = parcelRequire("9rDhX");

var $51ac2f1f715d319e$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
var $51ac2f1f715d319e$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $51ac2f1f715d319e$var$_uint8ArrayToBuffer(chunk) {
    return $51ac2f1f715d319e$require$Buffer.from(chunk);
}
function $51ac2f1f715d319e$var$_isUint8Array(obj) {
    return $51ac2f1f715d319e$require$Buffer.isBuffer(obj) || obj instanceof $51ac2f1f715d319e$var$OurUint8Array;
}

var $lb6jJ = parcelRequire("lb6jJ");
var $51ac2f1f715d319e$var$debug;
if ($lb6jJ && $lb6jJ.debuglog) $51ac2f1f715d319e$var$debug = $lb6jJ.debuglog('stream');
else $51ac2f1f715d319e$var$debug = function debug() {};

var $jUq3X = parcelRequire("jUq3X");

var $3vh9p = parcelRequire("3vh9p");

var $b3SmW = parcelRequire("b3SmW");
var $51ac2f1f715d319e$var$getHighWaterMark = $b3SmW.getHighWaterMark;

var $kaRdo = parcelRequire("kaRdo");
var $51ac2f1f715d319e$require$_require$codes = $kaRdo.codes;
var $51ac2f1f715d319e$var$ERR_INVALID_ARG_TYPE = $51ac2f1f715d319e$require$_require$codes.ERR_INVALID_ARG_TYPE, $51ac2f1f715d319e$var$ERR_STREAM_PUSH_AFTER_EOF = $51ac2f1f715d319e$require$_require$codes.ERR_STREAM_PUSH_AFTER_EOF, $51ac2f1f715d319e$var$ERR_METHOD_NOT_IMPLEMENTED = $51ac2f1f715d319e$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $51ac2f1f715d319e$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT = $51ac2f1f715d319e$require$_require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var $51ac2f1f715d319e$var$StringDecoder;
var $51ac2f1f715d319e$var$createReadableStreamAsyncIterator;
var $51ac2f1f715d319e$var$from;

(parcelRequire("fGyu9"))($51ac2f1f715d319e$var$Readable, $9rDhX);
var $51ac2f1f715d319e$var$errorOrDestroy = $3vh9p.errorOrDestroy;
var $51ac2f1f715d319e$var$kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function $51ac2f1f715d319e$var$prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}


function $51ac2f1f715d319e$var$ReadableState(options, stream, isDuplex) {
    $51ac2f1f715d319e$var$Duplex = $51ac2f1f715d319e$var$Duplex || (parcelRequire("a3gl0"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $51ac2f1f715d319e$var$Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = $51ac2f1f715d319e$var$getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new $jUq3X();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!$51ac2f1f715d319e$var$StringDecoder) $51ac2f1f715d319e$var$StringDecoder = (parcelRequire("5oJF3")).StringDecoder;
        this.decoder = new $51ac2f1f715d319e$var$StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}

function $51ac2f1f715d319e$var$Readable(options) {
    $51ac2f1f715d319e$var$Duplex = $51ac2f1f715d319e$var$Duplex || (parcelRequire("a3gl0"));
    if (!(this instanceof $51ac2f1f715d319e$var$Readable)) return new $51ac2f1f715d319e$var$Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $51ac2f1f715d319e$var$Duplex;
    this._readableState = new $51ac2f1f715d319e$var$ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    $9rDhX.call(this);
}
Object.defineProperty($51ac2f1f715d319e$var$Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
$51ac2f1f715d319e$var$Readable.prototype.destroy = $3vh9p.destroy;
$51ac2f1f715d319e$var$Readable.prototype._undestroy = $3vh9p.undestroy;
$51ac2f1f715d319e$var$Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
$51ac2f1f715d319e$var$Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = $51ac2f1f715d319e$require$Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return $51ac2f1f715d319e$var$readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
$51ac2f1f715d319e$var$Readable.prototype.unshift = function(chunk) {
    return $51ac2f1f715d319e$var$readableAddChunk(this, chunk, null, true, false);
};
function $51ac2f1f715d319e$var$readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    $51ac2f1f715d319e$var$debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        $51ac2f1f715d319e$var$onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = $51ac2f1f715d319e$var$chunkInvalid(state, chunk);
        if (er) $51ac2f1f715d319e$var$errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== $51ac2f1f715d319e$require$Buffer.prototype) chunk = $51ac2f1f715d319e$var$_uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) $51ac2f1f715d319e$var$errorOrDestroy(stream, new $51ac2f1f715d319e$var$ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else $51ac2f1f715d319e$var$addChunk(stream, state, chunk, true);
            } else if (state.ended) $51ac2f1f715d319e$var$errorOrDestroy(stream, new $51ac2f1f715d319e$var$ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) $51ac2f1f715d319e$var$addChunk(stream, state, chunk, false);
                    else $51ac2f1f715d319e$var$maybeReadMore(stream, state);
                } else $51ac2f1f715d319e$var$addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            $51ac2f1f715d319e$var$maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function $51ac2f1f715d319e$var$addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) $51ac2f1f715d319e$var$emitReadable(stream);
    }
    $51ac2f1f715d319e$var$maybeReadMore(stream, state);
}
function $51ac2f1f715d319e$var$chunkInvalid(state, chunk) {
    var er;
    if (!$51ac2f1f715d319e$var$_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new $51ac2f1f715d319e$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
$51ac2f1f715d319e$var$Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.

$51ac2f1f715d319e$var$Readable.prototype.setEncoding = function(enc) {
    if (!$51ac2f1f715d319e$var$StringDecoder) $51ac2f1f715d319e$var$StringDecoder = (parcelRequire("5oJF3")).StringDecoder;
    var decoder = new $51ac2f1f715d319e$var$StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var $51ac2f1f715d319e$var$MAX_HWM = 1073741824;
function $51ac2f1f715d319e$var$computeNewHighWaterMark(n) {
    if (n >= $51ac2f1f715d319e$var$MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = $51ac2f1f715d319e$var$MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $51ac2f1f715d319e$var$howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = $51ac2f1f715d319e$var$computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
$51ac2f1f715d319e$var$Readable.prototype.read = function(n) {
    $51ac2f1f715d319e$var$debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        $51ac2f1f715d319e$var$debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) $51ac2f1f715d319e$var$endReadable(this);
        else $51ac2f1f715d319e$var$emitReadable(this);
        return null;
    }
    n = $51ac2f1f715d319e$var$howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) $51ac2f1f715d319e$var$endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    $51ac2f1f715d319e$var$debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        $51ac2f1f715d319e$var$debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        $51ac2f1f715d319e$var$debug('reading or ended', doRead);
    } else if (doRead) {
        $51ac2f1f715d319e$var$debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = $51ac2f1f715d319e$var$howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = $51ac2f1f715d319e$var$fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) $51ac2f1f715d319e$var$endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function $51ac2f1f715d319e$var$onEofChunk(stream, state) {
    $51ac2f1f715d319e$var$debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    $51ac2f1f715d319e$var$emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            $51ac2f1f715d319e$var$emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function $51ac2f1f715d319e$var$emitReadable(stream) {
    var state = stream._readableState;
    $51ac2f1f715d319e$var$debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        $51ac2f1f715d319e$var$debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        $FkHbz.nextTick($51ac2f1f715d319e$var$emitReadable_, stream);
    }
}
function $51ac2f1f715d319e$var$emitReadable_(stream) {
    var state = stream._readableState;
    $51ac2f1f715d319e$var$debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    $51ac2f1f715d319e$var$flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function $51ac2f1f715d319e$var$maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        $FkHbz.nextTick($51ac2f1f715d319e$var$maybeReadMore_, stream, state);
    }
}
function $51ac2f1f715d319e$var$maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        $51ac2f1f715d319e$var$debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
$51ac2f1f715d319e$var$Readable.prototype._read = function(n) {
    $51ac2f1f715d319e$var$errorOrDestroy(this, new $51ac2f1f715d319e$var$ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
$51ac2f1f715d319e$var$Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    $51ac2f1f715d319e$var$debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== $FkHbz.stdout && dest !== $FkHbz.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) $FkHbz.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        $51ac2f1f715d319e$var$debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        $51ac2f1f715d319e$var$debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = $51ac2f1f715d319e$var$pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        $51ac2f1f715d319e$var$debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        $51ac2f1f715d319e$var$debug('ondata');
        var ret = dest.write(chunk);
        $51ac2f1f715d319e$var$debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && $51ac2f1f715d319e$var$indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                $51ac2f1f715d319e$var$debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        $51ac2f1f715d319e$var$debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if ($51ac2f1f715d319e$var$EElistenerCount(dest, 'error') === 0) $51ac2f1f715d319e$var$errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    $51ac2f1f715d319e$var$prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        $51ac2f1f715d319e$var$debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        $51ac2f1f715d319e$var$debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        $51ac2f1f715d319e$var$debug('pipe resume');
        src.resume();
    }
    return dest;
};
function $51ac2f1f715d319e$var$pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        $51ac2f1f715d319e$var$debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && $51ac2f1f715d319e$var$EElistenerCount(src, 'data')) {
            state.flowing = true;
            $51ac2f1f715d319e$var$flow(src);
        }
    };
}
$51ac2f1f715d319e$var$Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = $51ac2f1f715d319e$var$indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
$51ac2f1f715d319e$var$Readable.prototype.on = function(ev, fn) {
    var res = $9rDhX.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            $51ac2f1f715d319e$var$debug('on readable', state.length, state.reading);
            if (state.length) $51ac2f1f715d319e$var$emitReadable(this);
            else if (!state.reading) $FkHbz.nextTick($51ac2f1f715d319e$var$nReadingNextTick, this);
        }
    }
    return res;
};
$51ac2f1f715d319e$var$Readable.prototype.addListener = $51ac2f1f715d319e$var$Readable.prototype.on;
$51ac2f1f715d319e$var$Readable.prototype.removeListener = function(ev, fn) {
    var res = $9rDhX.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $FkHbz.nextTick($51ac2f1f715d319e$var$updateReadableListening, this);
    return res;
};
$51ac2f1f715d319e$var$Readable.prototype.removeAllListeners = function(ev) {
    var res = $9rDhX.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    $FkHbz.nextTick($51ac2f1f715d319e$var$updateReadableListening, this);
    return res;
};
function $51ac2f1f715d319e$var$updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function $51ac2f1f715d319e$var$nReadingNextTick(self) {
    $51ac2f1f715d319e$var$debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
$51ac2f1f715d319e$var$Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        $51ac2f1f715d319e$var$debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        $51ac2f1f715d319e$var$resume(this, state);
    }
    state.paused = false;
    return this;
};
function $51ac2f1f715d319e$var$resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        $FkHbz.nextTick($51ac2f1f715d319e$var$resume_, stream, state);
    }
}
function $51ac2f1f715d319e$var$resume_(stream, state) {
    $51ac2f1f715d319e$var$debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    $51ac2f1f715d319e$var$flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
$51ac2f1f715d319e$var$Readable.prototype.pause = function() {
    $51ac2f1f715d319e$var$debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        $51ac2f1f715d319e$var$debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function $51ac2f1f715d319e$var$flow(stream) {
    var state = stream._readableState;
    $51ac2f1f715d319e$var$debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
$51ac2f1f715d319e$var$Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        $51ac2f1f715d319e$var$debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        $51ac2f1f715d319e$var$debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    }(i);
     // proxy certain important events.
    for(var n1 = 0; n1 < $51ac2f1f715d319e$var$kProxyEvents.length; n1++)stream.on($51ac2f1f715d319e$var$kProxyEvents[n1], this.emit.bind(this, $51ac2f1f715d319e$var$kProxyEvents[n1]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n) {
        $51ac2f1f715d319e$var$debug('wrapped _read', n);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};

if (typeof Symbol === 'function') $51ac2f1f715d319e$var$Readable.prototype[Symbol.asyncIterator] = function() {
    if ($51ac2f1f715d319e$var$createReadableStreamAsyncIterator === undefined) $51ac2f1f715d319e$var$createReadableStreamAsyncIterator = (parcelRequire("917sB"));
    return $51ac2f1f715d319e$var$createReadableStreamAsyncIterator(this);
};
Object.defineProperty($51ac2f1f715d319e$var$Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty($51ac2f1f715d319e$var$Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty($51ac2f1f715d319e$var$Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
$51ac2f1f715d319e$var$Readable._fromList = $51ac2f1f715d319e$var$fromList;
Object.defineProperty($51ac2f1f715d319e$var$Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function $51ac2f1f715d319e$var$fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function $51ac2f1f715d319e$var$endReadable(stream) {
    var state = stream._readableState;
    $51ac2f1f715d319e$var$debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        $FkHbz.nextTick($51ac2f1f715d319e$var$endReadableNT, state, stream);
    }
}
function $51ac2f1f715d319e$var$endReadableNT(state, stream) {
    $51ac2f1f715d319e$var$debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}

if (typeof Symbol === 'function') $51ac2f1f715d319e$var$Readable.from = function(iterable, opts) {
    if ($51ac2f1f715d319e$var$from === undefined) $51ac2f1f715d319e$var$from = (parcelRequire("d57qL"));
    return $51ac2f1f715d319e$var$from($51ac2f1f715d319e$var$Readable, iterable, opts);
};
function $51ac2f1f715d319e$var$indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

});
parcelRequire.register("FkHbz", function(module, exports) {
// shim for using process in browser
var $07c3e2276d973f13$var$process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var $07c3e2276d973f13$var$cachedSetTimeout;
var $07c3e2276d973f13$var$cachedClearTimeout;
function $07c3e2276d973f13$var$defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function $07c3e2276d973f13$var$defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') $07c3e2276d973f13$var$cachedSetTimeout = setTimeout;
        else $07c3e2276d973f13$var$cachedSetTimeout = $07c3e2276d973f13$var$defaultSetTimout;
    } catch (e) {
        $07c3e2276d973f13$var$cachedSetTimeout = $07c3e2276d973f13$var$defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') $07c3e2276d973f13$var$cachedClearTimeout = clearTimeout;
        else $07c3e2276d973f13$var$cachedClearTimeout = $07c3e2276d973f13$var$defaultClearTimeout;
    } catch (e1) {
        $07c3e2276d973f13$var$cachedClearTimeout = $07c3e2276d973f13$var$defaultClearTimeout;
    }
})();
function $07c3e2276d973f13$var$runTimeout(fun) {
    if ($07c3e2276d973f13$var$cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if (($07c3e2276d973f13$var$cachedSetTimeout === $07c3e2276d973f13$var$defaultSetTimout || !$07c3e2276d973f13$var$cachedSetTimeout) && setTimeout) {
        $07c3e2276d973f13$var$cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $07c3e2276d973f13$var$cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return $07c3e2276d973f13$var$cachedSetTimeout.call(null, fun, 0);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return $07c3e2276d973f13$var$cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function $07c3e2276d973f13$var$runClearTimeout(marker) {
    if ($07c3e2276d973f13$var$cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if (($07c3e2276d973f13$var$cachedClearTimeout === $07c3e2276d973f13$var$defaultClearTimeout || !$07c3e2276d973f13$var$cachedClearTimeout) && clearTimeout) {
        $07c3e2276d973f13$var$cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return $07c3e2276d973f13$var$cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return $07c3e2276d973f13$var$cachedClearTimeout.call(null, marker);
        } catch (e) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return $07c3e2276d973f13$var$cachedClearTimeout.call(this, marker);
        }
    }
}
var $07c3e2276d973f13$var$queue = [];
var $07c3e2276d973f13$var$draining = false;
var $07c3e2276d973f13$var$currentQueue;
var $07c3e2276d973f13$var$queueIndex = -1;
function $07c3e2276d973f13$var$cleanUpNextTick() {
    if (!$07c3e2276d973f13$var$draining || !$07c3e2276d973f13$var$currentQueue) return;
    $07c3e2276d973f13$var$draining = false;
    if ($07c3e2276d973f13$var$currentQueue.length) $07c3e2276d973f13$var$queue = $07c3e2276d973f13$var$currentQueue.concat($07c3e2276d973f13$var$queue);
    else $07c3e2276d973f13$var$queueIndex = -1;
    if ($07c3e2276d973f13$var$queue.length) $07c3e2276d973f13$var$drainQueue();
}
function $07c3e2276d973f13$var$drainQueue() {
    if ($07c3e2276d973f13$var$draining) return;
    var timeout = $07c3e2276d973f13$var$runTimeout($07c3e2276d973f13$var$cleanUpNextTick);
    $07c3e2276d973f13$var$draining = true;
    var len = $07c3e2276d973f13$var$queue.length;
    while(len){
        $07c3e2276d973f13$var$currentQueue = $07c3e2276d973f13$var$queue;
        $07c3e2276d973f13$var$queue = [];
        while(++$07c3e2276d973f13$var$queueIndex < len)if ($07c3e2276d973f13$var$currentQueue) $07c3e2276d973f13$var$currentQueue[$07c3e2276d973f13$var$queueIndex].run();
        $07c3e2276d973f13$var$queueIndex = -1;
        len = $07c3e2276d973f13$var$queue.length;
    }
    $07c3e2276d973f13$var$currentQueue = null;
    $07c3e2276d973f13$var$draining = false;
    $07c3e2276d973f13$var$runClearTimeout(timeout);
}
$07c3e2276d973f13$var$process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    $07c3e2276d973f13$var$queue.push(new $07c3e2276d973f13$var$Item(fun, args));
    if ($07c3e2276d973f13$var$queue.length === 1 && !$07c3e2276d973f13$var$draining) $07c3e2276d973f13$var$runTimeout($07c3e2276d973f13$var$drainQueue);
};
// v8 likes predictible objects
function $07c3e2276d973f13$var$Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
$07c3e2276d973f13$var$Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
$07c3e2276d973f13$var$process.title = 'browser';
$07c3e2276d973f13$var$process.browser = true;
$07c3e2276d973f13$var$process.env = {};
$07c3e2276d973f13$var$process.argv = [];
$07c3e2276d973f13$var$process.version = ''; // empty string to avoid regexp issues
$07c3e2276d973f13$var$process.versions = {};
function $07c3e2276d973f13$var$noop() {}
$07c3e2276d973f13$var$process.on = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.addListener = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.once = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.off = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.removeListener = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.removeAllListeners = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.emit = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.prependListener = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.prependOnceListener = $07c3e2276d973f13$var$noop;
$07c3e2276d973f13$var$process.listeners = function(name) {
    return [];
};
$07c3e2276d973f13$var$process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
$07c3e2276d973f13$var$process.cwd = function() {
    return '/';
};
$07c3e2276d973f13$var$process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
$07c3e2276d973f13$var$process.umask = function() {
    return 0;
};

});

parcelRequire.register("9rDhX", function(module, exports) {

module.exports = (parcelRequire("a0h4l")).EventEmitter;

});

parcelRequire.register("lb6jJ", function(module, exports) {
"use strict";

});

parcelRequire.register("jUq3X", function(module, exports) {
'use strict';
function $e7e776ccb04824c5$var$ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function $e7e776ccb04824c5$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        if (i % 2) $e7e776ccb04824c5$var$ownKeys(Object(source), true).forEach(function(key) {
            $e7e776ccb04824c5$var$_defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else $e7e776ccb04824c5$var$ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function $e7e776ccb04824c5$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $e7e776ccb04824c5$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $e7e776ccb04824c5$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $e7e776ccb04824c5$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $e7e776ccb04824c5$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $e7e776ccb04824c5$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}

var $e7e776ccb04824c5$var$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $lb6jJ = parcelRequire("lb6jJ");
var $e7e776ccb04824c5$var$inspect = $lb6jJ.inspect;
var $e7e776ccb04824c5$var$custom = $e7e776ccb04824c5$var$inspect && $e7e776ccb04824c5$var$inspect.custom || 'inspect';
function $e7e776ccb04824c5$var$copyBuffer(src, target, offset) {
    $e7e776ccb04824c5$var$Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ function() {
    function BufferList() {
        $e7e776ccb04824c5$var$_classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    $e7e776ccb04824c5$var$_createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return $e7e776ccb04824c5$var$Buffer.alloc(0);
                var ret = $e7e776ccb04824c5$var$Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    $e7e776ccb04824c5$var$copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = $e7e776ccb04824c5$var$Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: $e7e776ccb04824c5$var$custom,
            value: function value(_, options) {
                return $e7e776ccb04824c5$var$inspect(this, $e7e776ccb04824c5$var$_objectSpread({}, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
}();

});

parcelRequire.register("3vh9p", function(module, exports) {
'use strict'; // undocumented cb() API, needed for core, not for public API

var $FkHbz = parcelRequire("FkHbz");
function $28d1921c776022c3$var$destroy(err1, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err1);
        else if (err1) {
            if (!this._writableState) $FkHbz.nextTick($28d1921c776022c3$var$emitErrorNT, this, err1);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                $FkHbz.nextTick($28d1921c776022c3$var$emitErrorNT, this, err1);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err1 || null, function(err) {
        if (!cb && err) {
            if (!_this._writableState) $FkHbz.nextTick($28d1921c776022c3$var$emitErrorAndCloseNT, _this, err);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                $FkHbz.nextTick($28d1921c776022c3$var$emitErrorAndCloseNT, _this, err);
            } else $FkHbz.nextTick($28d1921c776022c3$var$emitCloseNT, _this);
        } else if (cb) {
            $FkHbz.nextTick($28d1921c776022c3$var$emitCloseNT, _this);
            cb(err);
        } else $FkHbz.nextTick($28d1921c776022c3$var$emitCloseNT, _this);
    });
    return this;
}
function $28d1921c776022c3$var$emitErrorAndCloseNT(self, err) {
    $28d1921c776022c3$var$emitErrorNT(self, err);
    $28d1921c776022c3$var$emitCloseNT(self);
}
function $28d1921c776022c3$var$emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function $28d1921c776022c3$var$undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function $28d1921c776022c3$var$emitErrorNT(self, err) {
    self.emit('error', err);
}
function $28d1921c776022c3$var$errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: $28d1921c776022c3$var$destroy,
    undestroy: $28d1921c776022c3$var$undestroy,
    errorOrDestroy: $28d1921c776022c3$var$errorOrDestroy
};

});

parcelRequire.register("b3SmW", function(module, exports) {
'use strict';

var $kaRdo = parcelRequire("kaRdo");
var $80da261038fd4b65$var$ERR_INVALID_OPT_VALUE = $kaRdo.codes.ERR_INVALID_OPT_VALUE;
function $80da261038fd4b65$var$highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function $80da261038fd4b65$var$getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = $80da261038fd4b65$var$highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new $80da261038fd4b65$var$ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: $80da261038fd4b65$var$getHighWaterMark
};

});
parcelRequire.register("kaRdo", function(module, exports) {

$parcel$export(module.exports, "codes", () => $eafe05318ce72a8e$export$e45cb6485273080e, (v) => $eafe05318ce72a8e$export$e45cb6485273080e = v);
var $eafe05318ce72a8e$export$e45cb6485273080e;
'use strict';
function $eafe05318ce72a8e$var$_inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var $eafe05318ce72a8e$var$codes = {};
function $eafe05318ce72a8e$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        $eafe05318ce72a8e$var$_inheritsLoose(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    $eafe05318ce72a8e$var$codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $eafe05318ce72a8e$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $eafe05318ce72a8e$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $eafe05318ce72a8e$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $eafe05318ce72a8e$var$includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$eafe05318ce72a8e$var$createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
$eafe05318ce72a8e$var$createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && $eafe05318ce72a8e$var$startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if ($eafe05318ce72a8e$var$endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($eafe05318ce72a8e$var$oneOf(expected, 'type'));
    else {
        var type = $eafe05318ce72a8e$var$includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat($eafe05318ce72a8e$var$oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
$eafe05318ce72a8e$var$createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
$eafe05318ce72a8e$var$createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
$eafe05318ce72a8e$var$createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
$eafe05318ce72a8e$var$createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
$eafe05318ce72a8e$var$createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
$eafe05318ce72a8e$var$createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
$eafe05318ce72a8e$var$createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
$eafe05318ce72a8e$var$createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
$eafe05318ce72a8e$var$createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
$eafe05318ce72a8e$var$createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
$eafe05318ce72a8e$export$e45cb6485273080e = $eafe05318ce72a8e$var$codes;

});


parcelRequire.register("fGyu9", function(module, exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

});

parcelRequire.register("a3gl0", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';

var $FkHbz = parcelRequire("FkHbz");
/*<replacement>*/ var $7516db8b23b761f7$var$objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = $7516db8b23b761f7$var$Duplex;

var $70JXy = parcelRequire("70JXy");

var $kQozz = parcelRequire("kQozz");

(parcelRequire("fGyu9"))($7516db8b23b761f7$var$Duplex, $70JXy);
// Allow the keys array to be GC'ed.
var $7516db8b23b761f7$var$keys = $7516db8b23b761f7$var$objectKeys($kQozz.prototype);
for(var $7516db8b23b761f7$var$v = 0; $7516db8b23b761f7$var$v < $7516db8b23b761f7$var$keys.length; $7516db8b23b761f7$var$v++){
    var $7516db8b23b761f7$var$method = $7516db8b23b761f7$var$keys[$7516db8b23b761f7$var$v];
    if (!$7516db8b23b761f7$var$Duplex.prototype[$7516db8b23b761f7$var$method]) $7516db8b23b761f7$var$Duplex.prototype[$7516db8b23b761f7$var$method] = $kQozz.prototype[$7516db8b23b761f7$var$method];
}
function $7516db8b23b761f7$var$Duplex(options) {
    if (!(this instanceof $7516db8b23b761f7$var$Duplex)) return new $7516db8b23b761f7$var$Duplex(options);
    $70JXy.call(this, options);
    $kQozz.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', $7516db8b23b761f7$var$onend);
        }
    }
}
Object.defineProperty($7516db8b23b761f7$var$Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty($7516db8b23b761f7$var$Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty($7516db8b23b761f7$var$Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function $7516db8b23b761f7$var$onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    $FkHbz.nextTick($7516db8b23b761f7$var$onEndNT, this);
}
function $7516db8b23b761f7$var$onEndNT(self) {
    self.end();
}
Object.defineProperty($7516db8b23b761f7$var$Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

});
parcelRequire.register("kQozz", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';

var $FkHbz = parcelRequire("FkHbz");
module.exports = $f2cbb9969b4a9186$var$Writable;
/* <replacement> */ function $f2cbb9969b4a9186$var$WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function $f2cbb9969b4a9186$var$CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        $f2cbb9969b4a9186$var$onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var $f2cbb9969b4a9186$var$Duplex;
/*</replacement>*/ $f2cbb9969b4a9186$var$Writable.WritableState = $f2cbb9969b4a9186$var$WritableState;

/*<replacement>*/ var $f2cbb9969b4a9186$var$internalUtil = {
    deprecate: (parcelRequire("9d4LO"))
};

var $9rDhX = parcelRequire("9rDhX");

var $f2cbb9969b4a9186$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
var $f2cbb9969b4a9186$var$OurUint8Array = $parcel$global.Uint8Array || function() {};
function $f2cbb9969b4a9186$var$_uint8ArrayToBuffer(chunk) {
    return $f2cbb9969b4a9186$require$Buffer.from(chunk);
}
function $f2cbb9969b4a9186$var$_isUint8Array(obj) {
    return $f2cbb9969b4a9186$require$Buffer.isBuffer(obj) || obj instanceof $f2cbb9969b4a9186$var$OurUint8Array;
}

var $3vh9p = parcelRequire("3vh9p");

var $b3SmW = parcelRequire("b3SmW");
var $f2cbb9969b4a9186$var$getHighWaterMark = $b3SmW.getHighWaterMark;

var $kaRdo = parcelRequire("kaRdo");
var $f2cbb9969b4a9186$require$_require$codes = $kaRdo.codes;
var $f2cbb9969b4a9186$var$ERR_INVALID_ARG_TYPE = $f2cbb9969b4a9186$require$_require$codes.ERR_INVALID_ARG_TYPE, $f2cbb9969b4a9186$var$ERR_METHOD_NOT_IMPLEMENTED = $f2cbb9969b4a9186$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $f2cbb9969b4a9186$var$ERR_MULTIPLE_CALLBACK = $f2cbb9969b4a9186$require$_require$codes.ERR_MULTIPLE_CALLBACK, $f2cbb9969b4a9186$var$ERR_STREAM_CANNOT_PIPE = $f2cbb9969b4a9186$require$_require$codes.ERR_STREAM_CANNOT_PIPE, $f2cbb9969b4a9186$var$ERR_STREAM_DESTROYED = $f2cbb9969b4a9186$require$_require$codes.ERR_STREAM_DESTROYED, $f2cbb9969b4a9186$var$ERR_STREAM_NULL_VALUES = $f2cbb9969b4a9186$require$_require$codes.ERR_STREAM_NULL_VALUES, $f2cbb9969b4a9186$var$ERR_STREAM_WRITE_AFTER_END = $f2cbb9969b4a9186$require$_require$codes.ERR_STREAM_WRITE_AFTER_END, $f2cbb9969b4a9186$var$ERR_UNKNOWN_ENCODING = $f2cbb9969b4a9186$require$_require$codes.ERR_UNKNOWN_ENCODING;
var $f2cbb9969b4a9186$var$errorOrDestroy = $3vh9p.errorOrDestroy;

(parcelRequire("fGyu9"))($f2cbb9969b4a9186$var$Writable, $9rDhX);
function $f2cbb9969b4a9186$var$nop() {}

function $f2cbb9969b4a9186$var$WritableState(options, stream, isDuplex) {
    $f2cbb9969b4a9186$var$Duplex = $f2cbb9969b4a9186$var$Duplex || (parcelRequire("a3gl0"));
    options = options || {}; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof $f2cbb9969b4a9186$var$Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = $f2cbb9969b4a9186$var$getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        $f2cbb9969b4a9186$var$onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new $f2cbb9969b4a9186$var$CorkedRequest(this);
}
$f2cbb9969b4a9186$var$WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty($f2cbb9969b4a9186$var$WritableState.prototype, 'buffer', {
            get: $f2cbb9969b4a9186$var$internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {}
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var $f2cbb9969b4a9186$var$realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    $f2cbb9969b4a9186$var$realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty($f2cbb9969b4a9186$var$Writable, Symbol.hasInstance, {
        value: function value(object) {
            if ($f2cbb9969b4a9186$var$realHasInstance.call(this, object)) return true;
            if (this !== $f2cbb9969b4a9186$var$Writable) return false;
            return object && object._writableState instanceof $f2cbb9969b4a9186$var$WritableState;
        }
    });
} else $f2cbb9969b4a9186$var$realHasInstance = function realHasInstance(object) {
    return object instanceof this;
};

function $f2cbb9969b4a9186$var$Writable(options) {
    $f2cbb9969b4a9186$var$Duplex = $f2cbb9969b4a9186$var$Duplex || (parcelRequire("a3gl0")); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof $f2cbb9969b4a9186$var$Duplex;
    if (!isDuplex && !$f2cbb9969b4a9186$var$realHasInstance.call($f2cbb9969b4a9186$var$Writable, this)) return new $f2cbb9969b4a9186$var$Writable(options);
    this._writableState = new $f2cbb9969b4a9186$var$WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    $9rDhX.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
$f2cbb9969b4a9186$var$Writable.prototype.pipe = function() {
    $f2cbb9969b4a9186$var$errorOrDestroy(this, new $f2cbb9969b4a9186$var$ERR_STREAM_CANNOT_PIPE());
};
function $f2cbb9969b4a9186$var$writeAfterEnd(stream, cb) {
    var er = new $f2cbb9969b4a9186$var$ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    $f2cbb9969b4a9186$var$errorOrDestroy(stream, er);
    $FkHbz.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function $f2cbb9969b4a9186$var$validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new $f2cbb9969b4a9186$var$ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new $f2cbb9969b4a9186$var$ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        $f2cbb9969b4a9186$var$errorOrDestroy(stream, er);
        $FkHbz.nextTick(cb, er);
        return false;
    }
    return true;
}
$f2cbb9969b4a9186$var$Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && $f2cbb9969b4a9186$var$_isUint8Array(chunk);
    if (isBuf && !$f2cbb9969b4a9186$require$Buffer.isBuffer(chunk)) chunk = $f2cbb9969b4a9186$var$_uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = $f2cbb9969b4a9186$var$nop;
    if (state.ending) $f2cbb9969b4a9186$var$writeAfterEnd(this, cb);
    else if (isBuf || $f2cbb9969b4a9186$var$validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = $f2cbb9969b4a9186$var$writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
$f2cbb9969b4a9186$var$Writable.prototype.cork = function() {
    this._writableState.corked++;
};
$f2cbb9969b4a9186$var$Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) $f2cbb9969b4a9186$var$clearBuffer(this, state);
    }
};
$f2cbb9969b4a9186$var$Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new $f2cbb9969b4a9186$var$ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty($f2cbb9969b4a9186$var$Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function $f2cbb9969b4a9186$var$decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = $f2cbb9969b4a9186$require$Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty($f2cbb9969b4a9186$var$Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function $f2cbb9969b4a9186$var$writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = $f2cbb9969b4a9186$var$decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else $f2cbb9969b4a9186$var$doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function $f2cbb9969b4a9186$var$doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new $f2cbb9969b4a9186$var$ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function $f2cbb9969b4a9186$var$onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        $FkHbz.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        $FkHbz.nextTick($f2cbb9969b4a9186$var$finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        $f2cbb9969b4a9186$var$errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        $f2cbb9969b4a9186$var$errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        $f2cbb9969b4a9186$var$finishMaybe(stream, state);
    }
}
function $f2cbb9969b4a9186$var$onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function $f2cbb9969b4a9186$var$onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new $f2cbb9969b4a9186$var$ERR_MULTIPLE_CALLBACK();
    $f2cbb9969b4a9186$var$onwriteStateUpdate(state);
    if (er) $f2cbb9969b4a9186$var$onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = $f2cbb9969b4a9186$var$needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) $f2cbb9969b4a9186$var$clearBuffer(stream, state);
        if (sync) $FkHbz.nextTick($f2cbb9969b4a9186$var$afterWrite, stream, state, finished, cb);
        else $f2cbb9969b4a9186$var$afterWrite(stream, state, finished, cb);
    }
}
function $f2cbb9969b4a9186$var$afterWrite(stream, state, finished, cb) {
    if (!finished) $f2cbb9969b4a9186$var$onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    $f2cbb9969b4a9186$var$finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function $f2cbb9969b4a9186$var$onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function $f2cbb9969b4a9186$var$clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        $f2cbb9969b4a9186$var$doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new $f2cbb9969b4a9186$var$CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            $f2cbb9969b4a9186$var$doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
$f2cbb9969b4a9186$var$Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new $f2cbb9969b4a9186$var$ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
$f2cbb9969b4a9186$var$Writable.prototype._writev = null;
$f2cbb9969b4a9186$var$Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) $f2cbb9969b4a9186$var$endWritable(this, state, cb);
    return this;
};
Object.defineProperty($f2cbb9969b4a9186$var$Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function $f2cbb9969b4a9186$var$needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function $f2cbb9969b4a9186$var$callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) $f2cbb9969b4a9186$var$errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        $f2cbb9969b4a9186$var$finishMaybe(stream, state);
    });
}
function $f2cbb9969b4a9186$var$prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            $FkHbz.nextTick($f2cbb9969b4a9186$var$callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function $f2cbb9969b4a9186$var$finishMaybe(stream, state) {
    var need = $f2cbb9969b4a9186$var$needFinish(state);
    if (need) {
        $f2cbb9969b4a9186$var$prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function $f2cbb9969b4a9186$var$endWritable(stream, state, cb) {
    state.ending = true;
    $f2cbb9969b4a9186$var$finishMaybe(stream, state);
    if (cb) {
        if (state.finished) $FkHbz.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function $f2cbb9969b4a9186$var$onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty($f2cbb9969b4a9186$var$Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
$f2cbb9969b4a9186$var$Writable.prototype.destroy = $3vh9p.destroy;
$f2cbb9969b4a9186$var$Writable.prototype._undestroy = $3vh9p.undestroy;
$f2cbb9969b4a9186$var$Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

});
parcelRequire.register("9d4LO", function(module, exports) {
/**
 * Module exports.
 */ module.exports = $6b490737a0f844ed$var$deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function $6b490737a0f844ed$var$deprecate(fn, msg) {
    if ($6b490737a0f844ed$var$config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($6b490737a0f844ed$var$config('throwDeprecation')) throw new Error(msg);
            else if ($6b490737a0f844ed$var$config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function $6b490737a0f844ed$var$config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!$parcel$global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = $parcel$global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

});



parcelRequire.register("5oJF3", function(module, exports) {

$parcel$export(module.exports, "StringDecoder", () => $3ee29d0004b91efe$export$63a7aa211a91ed69, (v) => $3ee29d0004b91efe$export$63a7aa211a91ed69 = v);
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
var $3ee29d0004b91efe$export$63a7aa211a91ed69;
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $cBldb = parcelRequire("cBldb");
var $3ee29d0004b91efe$require$Buffer = $cBldb.Buffer;
/*</replacement>*/ var $3ee29d0004b91efe$var$isEncoding = $3ee29d0004b91efe$require$Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function $3ee29d0004b91efe$var$_normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function $3ee29d0004b91efe$var$normalizeEncoding(enc) {
    var nenc = $3ee29d0004b91efe$var$_normalizeEncoding(enc);
    if (typeof nenc !== 'string' && ($3ee29d0004b91efe$require$Buffer.isEncoding === $3ee29d0004b91efe$var$isEncoding || !$3ee29d0004b91efe$var$isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
$3ee29d0004b91efe$export$63a7aa211a91ed69 = $3ee29d0004b91efe$var$StringDecoder;
function $3ee29d0004b91efe$var$StringDecoder(encoding) {
    this.encoding = $3ee29d0004b91efe$var$normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = $3ee29d0004b91efe$var$utf16Text;
            this.end = $3ee29d0004b91efe$var$utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = $3ee29d0004b91efe$var$utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = $3ee29d0004b91efe$var$base64Text;
            this.end = $3ee29d0004b91efe$var$base64End;
            nb = 3;
            break;
        default:
            this.write = $3ee29d0004b91efe$var$simpleWrite;
            this.end = $3ee29d0004b91efe$var$simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = $3ee29d0004b91efe$require$Buffer.allocUnsafe(nb);
}
$3ee29d0004b91efe$var$StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
$3ee29d0004b91efe$var$StringDecoder.prototype.end = $3ee29d0004b91efe$var$utf8End;
// Returns only complete characters in a Buffer
$3ee29d0004b91efe$var$StringDecoder.prototype.text = $3ee29d0004b91efe$var$utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
$3ee29d0004b91efe$var$StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function $3ee29d0004b91efe$var$utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function $3ee29d0004b91efe$var$utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = $3ee29d0004b91efe$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $3ee29d0004b91efe$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if (--j < i || nb === -2) return 0;
    nb = $3ee29d0004b91efe$var$utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function $3ee29d0004b91efe$var$utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function $3ee29d0004b91efe$var$utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = $3ee29d0004b91efe$var$utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function $3ee29d0004b91efe$var$utf8Text(buf, i) {
    var total = $3ee29d0004b91efe$var$utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function $3ee29d0004b91efe$var$utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function $3ee29d0004b91efe$var$utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function $3ee29d0004b91efe$var$utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function $3ee29d0004b91efe$var$base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function $3ee29d0004b91efe$var$base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function $3ee29d0004b91efe$var$simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function $3ee29d0004b91efe$var$simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

});
parcelRequire.register("cBldb", function(module, exports) {

var $92c964f176dce145$var$Buffer = $ef9975513e2e43d1$exports.Buffer;
// alternative to using Object.keys for old browsers
function $92c964f176dce145$var$copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if ($92c964f176dce145$var$Buffer.from && $92c964f176dce145$var$Buffer.alloc && $92c964f176dce145$var$Buffer.allocUnsafe && $92c964f176dce145$var$Buffer.allocUnsafeSlow) module.exports = $ef9975513e2e43d1$exports;
else {
    // Copy properties from require('buffer')
    $92c964f176dce145$var$copyProps($ef9975513e2e43d1$exports, module.exports);
    module.exports.Buffer = $92c964f176dce145$var$SafeBuffer;
}
function $92c964f176dce145$var$SafeBuffer(arg, encodingOrOffset, length) {
    return $92c964f176dce145$var$Buffer(arg, encodingOrOffset, length);
}
$92c964f176dce145$var$SafeBuffer.prototype = Object.create($92c964f176dce145$var$Buffer.prototype);
// Copy static methods from Buffer
$92c964f176dce145$var$copyProps($92c964f176dce145$var$Buffer, $92c964f176dce145$var$SafeBuffer);
$92c964f176dce145$var$SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return $92c964f176dce145$var$Buffer(arg, encodingOrOffset, length);
};
$92c964f176dce145$var$SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = $92c964f176dce145$var$Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
$92c964f176dce145$var$SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $92c964f176dce145$var$Buffer(size);
};
$92c964f176dce145$var$SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return $ef9975513e2e43d1$exports.SlowBuffer(size);
};

});


parcelRequire.register("917sB", function(module, exports) {
'use strict';

var $FkHbz = parcelRequire("FkHbz");
var $6909fe827942ef67$var$_Object$setPrototypeO;
function $6909fe827942ef67$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}

var $kwxiL = parcelRequire("kwxiL");
var $6909fe827942ef67$var$kLastResolve = Symbol('lastResolve');
var $6909fe827942ef67$var$kLastReject = Symbol('lastReject');
var $6909fe827942ef67$var$kError = Symbol('error');
var $6909fe827942ef67$var$kEnded = Symbol('ended');
var $6909fe827942ef67$var$kLastPromise = Symbol('lastPromise');
var $6909fe827942ef67$var$kHandlePromise = Symbol('handlePromise');
var $6909fe827942ef67$var$kStream = Symbol('stream');
function $6909fe827942ef67$var$createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function $6909fe827942ef67$var$readAndResolve(iter) {
    var resolve = iter[$6909fe827942ef67$var$kLastResolve];
    if (resolve !== null) {
        var data = iter[$6909fe827942ef67$var$kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[$6909fe827942ef67$var$kLastPromise] = null;
            iter[$6909fe827942ef67$var$kLastResolve] = null;
            iter[$6909fe827942ef67$var$kLastReject] = null;
            resolve($6909fe827942ef67$var$createIterResult(data, false));
        }
    }
}
function $6909fe827942ef67$var$onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    $FkHbz.nextTick($6909fe827942ef67$var$readAndResolve, iter);
}
function $6909fe827942ef67$var$wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[$6909fe827942ef67$var$kEnded]) {
                resolve($6909fe827942ef67$var$createIterResult(undefined, true));
                return;
            }
            iter[$6909fe827942ef67$var$kHandlePromise](resolve, reject);
        }, reject);
    };
}
var $6909fe827942ef67$var$AsyncIteratorPrototype = Object.getPrototypeOf(function() {});
var $6909fe827942ef67$var$ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf(($6909fe827942ef67$var$_Object$setPrototypeO = {
    get stream () {
        return this[$6909fe827942ef67$var$kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[$6909fe827942ef67$var$kError];
        if (error !== null) return Promise.reject(error);
        if (this[$6909fe827942ef67$var$kEnded]) return Promise.resolve($6909fe827942ef67$var$createIterResult(undefined, true));
        if (this[$6909fe827942ef67$var$kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            $FkHbz.nextTick(function() {
                if (_this[$6909fe827942ef67$var$kError]) reject(_this[$6909fe827942ef67$var$kError]);
                else resolve($6909fe827942ef67$var$createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[$6909fe827942ef67$var$kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise($6909fe827942ef67$var$wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[$6909fe827942ef67$var$kStream].read();
            if (data !== null) return Promise.resolve($6909fe827942ef67$var$createIterResult(data, false));
            promise = new Promise(this[$6909fe827942ef67$var$kHandlePromise]);
        }
        this[$6909fe827942ef67$var$kLastPromise] = promise;
        return promise;
    }
}, $6909fe827942ef67$var$_defineProperty($6909fe827942ef67$var$_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), $6909fe827942ef67$var$_defineProperty($6909fe827942ef67$var$_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[$6909fe827942ef67$var$kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve($6909fe827942ef67$var$createIterResult(undefined, true));
        });
    });
}), $6909fe827942ef67$var$_Object$setPrototypeO), $6909fe827942ef67$var$AsyncIteratorPrototype);
var $6909fe827942ef67$var$createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator(stream) {
    var _Object$create;
    var iterator = Object.create($6909fe827942ef67$var$ReadableStreamAsyncIteratorPrototype, (_Object$create = {}, $6909fe827942ef67$var$_defineProperty(_Object$create, $6909fe827942ef67$var$kStream, {
        value: stream,
        writable: true
    }), $6909fe827942ef67$var$_defineProperty(_Object$create, $6909fe827942ef67$var$kLastResolve, {
        value: null,
        writable: true
    }), $6909fe827942ef67$var$_defineProperty(_Object$create, $6909fe827942ef67$var$kLastReject, {
        value: null,
        writable: true
    }), $6909fe827942ef67$var$_defineProperty(_Object$create, $6909fe827942ef67$var$kError, {
        value: null,
        writable: true
    }), $6909fe827942ef67$var$_defineProperty(_Object$create, $6909fe827942ef67$var$kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), $6909fe827942ef67$var$_defineProperty(_Object$create, $6909fe827942ef67$var$kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[$6909fe827942ef67$var$kStream].read();
            if (data) {
                iterator[$6909fe827942ef67$var$kLastPromise] = null;
                iterator[$6909fe827942ef67$var$kLastResolve] = null;
                iterator[$6909fe827942ef67$var$kLastReject] = null;
                resolve($6909fe827942ef67$var$createIterResult(data, false));
            } else {
                iterator[$6909fe827942ef67$var$kLastResolve] = resolve;
                iterator[$6909fe827942ef67$var$kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[$6909fe827942ef67$var$kLastPromise] = null;
    $kwxiL(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[$6909fe827942ef67$var$kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[$6909fe827942ef67$var$kLastPromise] = null;
                iterator[$6909fe827942ef67$var$kLastResolve] = null;
                iterator[$6909fe827942ef67$var$kLastReject] = null;
                reject(err);
            }
            iterator[$6909fe827942ef67$var$kError] = err;
            return;
        }
        var resolve = iterator[$6909fe827942ef67$var$kLastResolve];
        if (resolve !== null) {
            iterator[$6909fe827942ef67$var$kLastPromise] = null;
            iterator[$6909fe827942ef67$var$kLastResolve] = null;
            iterator[$6909fe827942ef67$var$kLastReject] = null;
            resolve($6909fe827942ef67$var$createIterResult(undefined, true));
        }
        iterator[$6909fe827942ef67$var$kEnded] = true;
    });
    stream.on('readable', $6909fe827942ef67$var$onReadable.bind(null, iterator));
    return iterator;
};
module.exports = $6909fe827942ef67$var$createReadableStreamAsyncIterator;

});
parcelRequire.register("kwxiL", function(module, exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';

var $kaRdo = parcelRequire("kaRdo");
var $ef10a0d6b0e4a5e5$var$ERR_STREAM_PREMATURE_CLOSE = $kaRdo.codes.ERR_STREAM_PREMATURE_CLOSE;
function $ef10a0d6b0e4a5e5$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function $ef10a0d6b0e4a5e5$var$noop() {}
function $ef10a0d6b0e4a5e5$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function $ef10a0d6b0e4a5e5$var$eos(stream, opts, callback) {
    if (typeof opts === 'function') return $ef10a0d6b0e4a5e5$var$eos(stream, null, opts);
    if (!opts) opts = {};
    callback = $ef10a0d6b0e4a5e5$var$once(callback || $ef10a0d6b0e4a5e5$var$noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new $ef10a0d6b0e4a5e5$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new $ef10a0d6b0e4a5e5$var$ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest() {
        stream.req.on('finish', onfinish);
    };
    if ($ef10a0d6b0e4a5e5$var$isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = $ef10a0d6b0e4a5e5$var$eos;

});


parcelRequire.register("d57qL", function(module, exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

});


parcelRequire.register("3SaH0", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = $2d1eb598f5eba032$var$Transform;

var $kaRdo = parcelRequire("kaRdo");
var $2d1eb598f5eba032$require$_require$codes = $kaRdo.codes;
var $2d1eb598f5eba032$var$ERR_METHOD_NOT_IMPLEMENTED = $2d1eb598f5eba032$require$_require$codes.ERR_METHOD_NOT_IMPLEMENTED, $2d1eb598f5eba032$var$ERR_MULTIPLE_CALLBACK = $2d1eb598f5eba032$require$_require$codes.ERR_MULTIPLE_CALLBACK, $2d1eb598f5eba032$var$ERR_TRANSFORM_ALREADY_TRANSFORMING = $2d1eb598f5eba032$require$_require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, $2d1eb598f5eba032$var$ERR_TRANSFORM_WITH_LENGTH_0 = $2d1eb598f5eba032$require$_require$codes.ERR_TRANSFORM_WITH_LENGTH_0;

var $a3gl0 = parcelRequire("a3gl0");

(parcelRequire("fGyu9"))($2d1eb598f5eba032$var$Transform, $a3gl0);
function $2d1eb598f5eba032$var$afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new $2d1eb598f5eba032$var$ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function $2d1eb598f5eba032$var$Transform(options) {
    if (!(this instanceof $2d1eb598f5eba032$var$Transform)) return new $2d1eb598f5eba032$var$Transform(options);
    $a3gl0.call(this, options);
    this._transformState = {
        afterTransform: $2d1eb598f5eba032$var$afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', $2d1eb598f5eba032$var$prefinish);
}
function $2d1eb598f5eba032$var$prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        $2d1eb598f5eba032$var$done(_this, er, data);
    });
    else $2d1eb598f5eba032$var$done(this, null, null);
}
$2d1eb598f5eba032$var$Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return $a3gl0.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
$2d1eb598f5eba032$var$Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new $2d1eb598f5eba032$var$ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
$2d1eb598f5eba032$var$Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
$2d1eb598f5eba032$var$Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
$2d1eb598f5eba032$var$Transform.prototype._destroy = function(err, cb) {
    $a3gl0.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function $2d1eb598f5eba032$var$done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new $2d1eb598f5eba032$var$ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new $2d1eb598f5eba032$var$ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

});

parcelRequire.register("1Nz0S", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = $14f586f411ad69a2$var$PassThrough;

var $3SaH0 = parcelRequire("3SaH0");

(parcelRequire("fGyu9"))($14f586f411ad69a2$var$PassThrough, $3SaH0);
function $14f586f411ad69a2$var$PassThrough(options) {
    if (!(this instanceof $14f586f411ad69a2$var$PassThrough)) return new $14f586f411ad69a2$var$PassThrough(options);
    $3SaH0.call(this, options);
}
$14f586f411ad69a2$var$PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

});

parcelRequire.register("jcAAk", function(module, exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var $dfab845032e94cb0$var$eos;
function $dfab845032e94cb0$var$once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}

var $kaRdo = parcelRequire("kaRdo");
var $dfab845032e94cb0$require$_require$codes = $kaRdo.codes;
var $dfab845032e94cb0$var$ERR_MISSING_ARGS = $dfab845032e94cb0$require$_require$codes.ERR_MISSING_ARGS, $dfab845032e94cb0$var$ERR_STREAM_DESTROYED = $dfab845032e94cb0$require$_require$codes.ERR_STREAM_DESTROYED;
function $dfab845032e94cb0$var$noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function $dfab845032e94cb0$var$isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}

function $dfab845032e94cb0$var$destroyer(stream, reading, writing, callback) {
    callback = $dfab845032e94cb0$var$once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if ($dfab845032e94cb0$var$eos === undefined) $dfab845032e94cb0$var$eos = (parcelRequire("kwxiL"));
    $dfab845032e94cb0$var$eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if ($dfab845032e94cb0$var$isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new $dfab845032e94cb0$var$ERR_STREAM_DESTROYED('pipe'));
    };
}
function $dfab845032e94cb0$var$call(fn) {
    fn();
}
function $dfab845032e94cb0$var$pipe(from, to) {
    return from.pipe(to);
}
function $dfab845032e94cb0$var$popCallback(streams) {
    if (!streams.length) return $dfab845032e94cb0$var$noop;
    if (typeof streams[streams.length - 1] !== 'function') return $dfab845032e94cb0$var$noop;
    return streams.pop();
}
function $dfab845032e94cb0$var$pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = $dfab845032e94cb0$var$popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new $dfab845032e94cb0$var$ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return $dfab845032e94cb0$var$destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach($dfab845032e94cb0$var$call);
            if (reading) return;
            destroys.forEach($dfab845032e94cb0$var$call);
            callback(error);
        });
    });
    return streams.reduce($dfab845032e94cb0$var$pipe);
}
module.exports = $dfab845032e94cb0$var$pipeline;

});



parcelRequire.register("KzfAU", function(module, exports) {

var $08bfa402edb3d4fb$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $55xsE = parcelRequire("55xsE");
var $08bfa402edb3d4fb$require$Transform = $55xsE.Transform;
module.exports = (KeccakState)=>class Shake extends $08bfa402edb3d4fb$require$Transform {
        constructor(rate, capacity, delimitedSuffix, options){
            super(options);
            this._rate = rate;
            this._capacity = capacity;
            this._delimitedSuffix = delimitedSuffix;
            this._options = options;
            this._state = new KeccakState();
            this._state.initialize(rate, capacity);
            this._finalized = false;
        }
        _transform(chunk, encoding, callback) {
            let error = null;
            try {
                this.update(chunk, encoding);
            } catch (err) {
                error = err;
            }
            callback(error);
        }
        _flush() {}
        _read(size) {
            this.push(this.squeeze(size));
        }
        update(data, encoding) {
            if (!$08bfa402edb3d4fb$require$Buffer.isBuffer(data) && typeof data !== 'string') throw new TypeError('Data must be a string or a buffer');
            if (this._finalized) throw new Error('Squeeze already called');
            if (!$08bfa402edb3d4fb$require$Buffer.isBuffer(data)) data = $08bfa402edb3d4fb$require$Buffer.from(data, encoding);
            this._state.absorb(data);
            return this;
        }
        squeeze(dataByteLength, encoding) {
            if (!this._finalized) {
                this._finalized = true;
                this._state.absorbLastFewBits(this._delimitedSuffix);
            }
            let data = this._state.squeeze(dataByteLength);
            if (encoding !== undefined) data = data.toString(encoding);
            return data;
        }
        _resetState() {
            this._state.initialize(this._rate, this._capacity);
            return this;
        }
        _clone() {
            const clone = new Shake(this._rate, this._capacity, this._delimitedSuffix, this._options);
            this._state.copy(clone._state);
            clone._finalized = this._finalized;
            return clone;
        }
    }
;

});


parcelRequire.register("jM9sR", function(module, exports) {

var $e659d77d080ac070$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $foddg = parcelRequire("foddg");
function $e659d77d080ac070$var$Keccak() {
    // much faster than `new Array(50)`
    this.state = [
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0
    ];
    this.blockSize = null;
    this.count = 0;
    this.squeezing = false;
}
$e659d77d080ac070$var$Keccak.prototype.initialize = function(rate, capacity) {
    for(let i = 0; i < 50; ++i)this.state[i] = 0;
    this.blockSize = rate / 8;
    this.count = 0;
    this.squeezing = false;
};
$e659d77d080ac070$var$Keccak.prototype.absorb = function(data) {
    for(let i = 0; i < data.length; ++i){
        this.state[~~(this.count / 4)] ^= data[i] << 8 * (this.count % 4);
        this.count += 1;
        if (this.count === this.blockSize) {
            $foddg.p1600(this.state);
            this.count = 0;
        }
    }
};
$e659d77d080ac070$var$Keccak.prototype.absorbLastFewBits = function(bits) {
    this.state[~~(this.count / 4)] ^= bits << 8 * (this.count % 4);
    if ((bits & 128) !== 0 && this.count === this.blockSize - 1) $foddg.p1600(this.state);
    this.state[~~((this.blockSize - 1) / 4)] ^= 128 << 8 * ((this.blockSize - 1) % 4);
    $foddg.p1600(this.state);
    this.count = 0;
    this.squeezing = true;
};
$e659d77d080ac070$var$Keccak.prototype.squeeze = function(length) {
    if (!this.squeezing) this.absorbLastFewBits(1);
    const output = $e659d77d080ac070$require$Buffer.alloc(length);
    for(let i = 0; i < length; ++i){
        output[i] = this.state[~~(this.count / 4)] >>> 8 * (this.count % 4) & 255;
        this.count += 1;
        if (this.count === this.blockSize) {
            $foddg.p1600(this.state);
            this.count = 0;
        }
    }
    return output;
};
$e659d77d080ac070$var$Keccak.prototype.copy = function(dest) {
    for(let i = 0; i < 50; ++i)dest.state[i] = this.state[i];
    dest.blockSize = this.blockSize;
    dest.count = this.count;
    dest.squeezing = this.squeezing;
};
module.exports = $e659d77d080ac070$var$Keccak;

});
parcelRequire.register("foddg", function(module, exports) {

$parcel$export(module.exports, "p1600", () => $b34358b8e1b8e58a$export$471358fe9e8379c0, (v) => $b34358b8e1b8e58a$export$471358fe9e8379c0 = v);
var $b34358b8e1b8e58a$export$471358fe9e8379c0;
const $b34358b8e1b8e58a$var$P1600_ROUND_CONSTANTS = [
    1,
    0,
    32898,
    0,
    32906,
    2147483648,
    2147516416,
    2147483648,
    32907,
    0,
    2147483649,
    0,
    2147516545,
    2147483648,
    32777,
    2147483648,
    138,
    0,
    136,
    0,
    2147516425,
    0,
    2147483658,
    0,
    2147516555,
    0,
    139,
    2147483648,
    32905,
    2147483648,
    32771,
    2147483648,
    32770,
    2147483648,
    128,
    2147483648,
    32778,
    0,
    2147483658,
    2147483648,
    2147516545,
    2147483648,
    32896,
    2147483648,
    2147483649,
    0,
    2147516424,
    2147483648
];
$b34358b8e1b8e58a$export$471358fe9e8379c0 = function(s) {
    for(let round = 0; round < 24; ++round){
        // theta
        const lo0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
        const hi0 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
        const lo1 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
        const hi1 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
        const lo2 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
        const hi2 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
        const lo3 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
        const hi3 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
        const lo4 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
        const hi4 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
        let lo = lo4 ^ (lo1 << 1 | hi1 >>> 31);
        let hi = hi4 ^ (hi1 << 1 | lo1 >>> 31);
        const t1slo0 = s[0] ^ lo;
        const t1shi0 = s[1] ^ hi;
        const t1slo5 = s[10] ^ lo;
        const t1shi5 = s[11] ^ hi;
        const t1slo10 = s[20] ^ lo;
        const t1shi10 = s[21] ^ hi;
        const t1slo15 = s[30] ^ lo;
        const t1shi15 = s[31] ^ hi;
        const t1slo20 = s[40] ^ lo;
        const t1shi20 = s[41] ^ hi;
        lo = lo0 ^ (lo2 << 1 | hi2 >>> 31);
        hi = hi0 ^ (hi2 << 1 | lo2 >>> 31);
        const t1slo1 = s[2] ^ lo;
        const t1shi1 = s[3] ^ hi;
        const t1slo6 = s[12] ^ lo;
        const t1shi6 = s[13] ^ hi;
        const t1slo11 = s[22] ^ lo;
        const t1shi11 = s[23] ^ hi;
        const t1slo16 = s[32] ^ lo;
        const t1shi16 = s[33] ^ hi;
        const t1slo21 = s[42] ^ lo;
        const t1shi21 = s[43] ^ hi;
        lo = lo1 ^ (lo3 << 1 | hi3 >>> 31);
        hi = hi1 ^ (hi3 << 1 | lo3 >>> 31);
        const t1slo2 = s[4] ^ lo;
        const t1shi2 = s[5] ^ hi;
        const t1slo7 = s[14] ^ lo;
        const t1shi7 = s[15] ^ hi;
        const t1slo12 = s[24] ^ lo;
        const t1shi12 = s[25] ^ hi;
        const t1slo17 = s[34] ^ lo;
        const t1shi17 = s[35] ^ hi;
        const t1slo22 = s[44] ^ lo;
        const t1shi22 = s[45] ^ hi;
        lo = lo2 ^ (lo4 << 1 | hi4 >>> 31);
        hi = hi2 ^ (hi4 << 1 | lo4 >>> 31);
        const t1slo3 = s[6] ^ lo;
        const t1shi3 = s[7] ^ hi;
        const t1slo8 = s[16] ^ lo;
        const t1shi8 = s[17] ^ hi;
        const t1slo13 = s[26] ^ lo;
        const t1shi13 = s[27] ^ hi;
        const t1slo18 = s[36] ^ lo;
        const t1shi18 = s[37] ^ hi;
        const t1slo23 = s[46] ^ lo;
        const t1shi23 = s[47] ^ hi;
        lo = lo3 ^ (lo0 << 1 | hi0 >>> 31);
        hi = hi3 ^ (hi0 << 1 | lo0 >>> 31);
        const t1slo4 = s[8] ^ lo;
        const t1shi4 = s[9] ^ hi;
        const t1slo9 = s[18] ^ lo;
        const t1shi9 = s[19] ^ hi;
        const t1slo14 = s[28] ^ lo;
        const t1shi14 = s[29] ^ hi;
        const t1slo19 = s[38] ^ lo;
        const t1shi19 = s[39] ^ hi;
        const t1slo24 = s[48] ^ lo;
        const t1shi24 = s[49] ^ hi;
        // rho & pi
        const t2slo0 = t1slo0;
        const t2shi0 = t1shi0;
        const t2slo16 = t1shi5 << 4 | t1slo5 >>> 28;
        const t2shi16 = t1slo5 << 4 | t1shi5 >>> 28;
        const t2slo7 = t1slo10 << 3 | t1shi10 >>> 29;
        const t2shi7 = t1shi10 << 3 | t1slo10 >>> 29;
        const t2slo23 = t1shi15 << 9 | t1slo15 >>> 23;
        const t2shi23 = t1slo15 << 9 | t1shi15 >>> 23;
        const t2slo14 = t1slo20 << 18 | t1shi20 >>> 14;
        const t2shi14 = t1shi20 << 18 | t1slo20 >>> 14;
        const t2slo10 = t1slo1 << 1 | t1shi1 >>> 31;
        const t2shi10 = t1shi1 << 1 | t1slo1 >>> 31;
        const t2slo1 = t1shi6 << 12 | t1slo6 >>> 20;
        const t2shi1 = t1slo6 << 12 | t1shi6 >>> 20;
        const t2slo17 = t1slo11 << 10 | t1shi11 >>> 22;
        const t2shi17 = t1shi11 << 10 | t1slo11 >>> 22;
        const t2slo8 = t1shi16 << 13 | t1slo16 >>> 19;
        const t2shi8 = t1slo16 << 13 | t1shi16 >>> 19;
        const t2slo24 = t1slo21 << 2 | t1shi21 >>> 30;
        const t2shi24 = t1shi21 << 2 | t1slo21 >>> 30;
        const t2slo20 = t1shi2 << 30 | t1slo2 >>> 2;
        const t2shi20 = t1slo2 << 30 | t1shi2 >>> 2;
        const t2slo11 = t1slo7 << 6 | t1shi7 >>> 26;
        const t2shi11 = t1shi7 << 6 | t1slo7 >>> 26;
        const t2slo2 = t1shi12 << 11 | t1slo12 >>> 21;
        const t2shi2 = t1slo12 << 11 | t1shi12 >>> 21;
        const t2slo18 = t1slo17 << 15 | t1shi17 >>> 17;
        const t2shi18 = t1shi17 << 15 | t1slo17 >>> 17;
        const t2slo9 = t1shi22 << 29 | t1slo22 >>> 3;
        const t2shi9 = t1slo22 << 29 | t1shi22 >>> 3;
        const t2slo5 = t1slo3 << 28 | t1shi3 >>> 4;
        const t2shi5 = t1shi3 << 28 | t1slo3 >>> 4;
        const t2slo21 = t1shi8 << 23 | t1slo8 >>> 9;
        const t2shi21 = t1slo8 << 23 | t1shi8 >>> 9;
        const t2slo12 = t1slo13 << 25 | t1shi13 >>> 7;
        const t2shi12 = t1shi13 << 25 | t1slo13 >>> 7;
        const t2slo3 = t1slo18 << 21 | t1shi18 >>> 11;
        const t2shi3 = t1shi18 << 21 | t1slo18 >>> 11;
        const t2slo19 = t1shi23 << 24 | t1slo23 >>> 8;
        const t2shi19 = t1slo23 << 24 | t1shi23 >>> 8;
        const t2slo15 = t1slo4 << 27 | t1shi4 >>> 5;
        const t2shi15 = t1shi4 << 27 | t1slo4 >>> 5;
        const t2slo6 = t1slo9 << 20 | t1shi9 >>> 12;
        const t2shi6 = t1shi9 << 20 | t1slo9 >>> 12;
        const t2slo22 = t1shi14 << 7 | t1slo14 >>> 25;
        const t2shi22 = t1slo14 << 7 | t1shi14 >>> 25;
        const t2slo13 = t1slo19 << 8 | t1shi19 >>> 24;
        const t2shi13 = t1shi19 << 8 | t1slo19 >>> 24;
        const t2slo4 = t1slo24 << 14 | t1shi24 >>> 18;
        const t2shi4 = t1shi24 << 14 | t1slo24 >>> 18;
        // chi
        s[0] = t2slo0 ^ ~t2slo1 & t2slo2;
        s[1] = t2shi0 ^ ~t2shi1 & t2shi2;
        s[10] = t2slo5 ^ ~t2slo6 & t2slo7;
        s[11] = t2shi5 ^ ~t2shi6 & t2shi7;
        s[20] = t2slo10 ^ ~t2slo11 & t2slo12;
        s[21] = t2shi10 ^ ~t2shi11 & t2shi12;
        s[30] = t2slo15 ^ ~t2slo16 & t2slo17;
        s[31] = t2shi15 ^ ~t2shi16 & t2shi17;
        s[40] = t2slo20 ^ ~t2slo21 & t2slo22;
        s[41] = t2shi20 ^ ~t2shi21 & t2shi22;
        s[2] = t2slo1 ^ ~t2slo2 & t2slo3;
        s[3] = t2shi1 ^ ~t2shi2 & t2shi3;
        s[12] = t2slo6 ^ ~t2slo7 & t2slo8;
        s[13] = t2shi6 ^ ~t2shi7 & t2shi8;
        s[22] = t2slo11 ^ ~t2slo12 & t2slo13;
        s[23] = t2shi11 ^ ~t2shi12 & t2shi13;
        s[32] = t2slo16 ^ ~t2slo17 & t2slo18;
        s[33] = t2shi16 ^ ~t2shi17 & t2shi18;
        s[42] = t2slo21 ^ ~t2slo22 & t2slo23;
        s[43] = t2shi21 ^ ~t2shi22 & t2shi23;
        s[4] = t2slo2 ^ ~t2slo3 & t2slo4;
        s[5] = t2shi2 ^ ~t2shi3 & t2shi4;
        s[14] = t2slo7 ^ ~t2slo8 & t2slo9;
        s[15] = t2shi7 ^ ~t2shi8 & t2shi9;
        s[24] = t2slo12 ^ ~t2slo13 & t2slo14;
        s[25] = t2shi12 ^ ~t2shi13 & t2shi14;
        s[34] = t2slo17 ^ ~t2slo18 & t2slo19;
        s[35] = t2shi17 ^ ~t2shi18 & t2shi19;
        s[44] = t2slo22 ^ ~t2slo23 & t2slo24;
        s[45] = t2shi22 ^ ~t2shi23 & t2shi24;
        s[6] = t2slo3 ^ ~t2slo4 & t2slo0;
        s[7] = t2shi3 ^ ~t2shi4 & t2shi0;
        s[16] = t2slo8 ^ ~t2slo9 & t2slo5;
        s[17] = t2shi8 ^ ~t2shi9 & t2shi5;
        s[26] = t2slo13 ^ ~t2slo14 & t2slo10;
        s[27] = t2shi13 ^ ~t2shi14 & t2shi10;
        s[36] = t2slo18 ^ ~t2slo19 & t2slo15;
        s[37] = t2shi18 ^ ~t2shi19 & t2shi15;
        s[46] = t2slo23 ^ ~t2slo24 & t2slo20;
        s[47] = t2shi23 ^ ~t2shi24 & t2shi20;
        s[8] = t2slo4 ^ ~t2slo0 & t2slo1;
        s[9] = t2shi4 ^ ~t2shi0 & t2shi1;
        s[18] = t2slo9 ^ ~t2slo5 & t2slo6;
        s[19] = t2shi9 ^ ~t2shi5 & t2shi6;
        s[28] = t2slo14 ^ ~t2slo10 & t2slo11;
        s[29] = t2shi14 ^ ~t2shi10 & t2shi11;
        s[38] = t2slo19 ^ ~t2slo15 & t2slo16;
        s[39] = t2shi19 ^ ~t2shi15 & t2shi16;
        s[48] = t2slo24 ^ ~t2slo20 & t2slo21;
        s[49] = t2shi24 ^ ~t2shi20 & t2shi21;
        // iota
        s[0] ^= $b34358b8e1b8e58a$var$P1600_ROUND_CONSTANTS[round * 2];
        s[1] ^= $b34358b8e1b8e58a$var$P1600_ROUND_CONSTANTS[round * 2 + 1];
    }
};

});




parcelRequire.register("amVGm", function(module, exports) {
'use strict';

var $78c8b3f02b0d80b8$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $l1CJ2 = parcelRequire("l1CJ2");

var $NePhB = parcelRequire("NePhB");

var $cSzGv = parcelRequire("cSzGv");
/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */ var $78c8b3f02b0d80b8$var$privateKeyVerify = function privateKeyVerify(privateKey) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) return false;
    return $l1CJ2.privateKeyVerify(Uint8Array.from(privateKey));
};
/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */ var $78c8b3f02b0d80b8$var$privateKeyExport = function privateKeyExport(privateKey, compressed) {
    // privateKeyExport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    if (privateKey.length !== 32) throw new RangeError('private key length is invalid');
    var publicKey = $NePhB.privateKeyExport(privateKey, compressed);
    return $cSzGv.privateKeyExport(privateKey, publicKey, compressed);
};
/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$privateKeyImport = function privateKeyImport(privateKey) {
    // privateKeyImport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    privateKey = $cSzGv.privateKeyImport(privateKey);
    if (privateKey !== null && privateKey.length === 32 && $78c8b3f02b0d80b8$var$privateKeyVerify(privateKey)) return privateKey;
    throw new Error("couldn't import from DER format");
};
/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$privateKeyNegate = function privateKeyNegate(privateKey) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.privateKeyNegate(Uint8Array.from(privateKey)));
};
/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$privateKeyModInverse = function privateKeyModInverse(privateKey) {
    if (privateKey.length !== 32) throw new Error('private key length is invalid');
    return $78c8b3f02b0d80b8$require$Buffer.from($NePhB.privateKeyModInverse(Uint8Array.from(privateKey)));
};
/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$privateKeyTweakAdd = function privateKeyTweakAdd(privateKey, tweak) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};
/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$privateKeyTweakMul = function privateKeyTweakMul(privateKey, tweak) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};
/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$publicKeyCreate = function publicKeyCreate(privateKey, compressed) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};
/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$publicKeyConvert = function publicKeyConvert(publicKey, compressed) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};
/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */ var $78c8b3f02b0d80b8$var$publicKeyVerify = function publicKeyVerify(publicKey) {
    // secp256k1 v4 version throws when publicKey length is not 33 or 65
    if (publicKey.length !== 33 && publicKey.length !== 65) return false;
    return $l1CJ2.publicKeyVerify(Uint8Array.from(publicKey));
};
/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$publicKeyTweakAdd = function publicKeyTweakAdd(publicKey, tweak, compressed) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$publicKeyTweakMul = function publicKeyTweakMul(publicKey, tweak, compressed) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$publicKeyCombine = function publicKeyCombine(publicKeys, compressed) {
    var keys = [];
    publicKeys.forEach(function(publicKey) {
        keys.push(Uint8Array.from(publicKey));
    });
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.publicKeyCombine(keys, compressed));
};
/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$signatureNormalize = function signatureNormalize(signature) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.signatureNormalize(Uint8Array.from(signature)));
};
/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$signatureExport = function signatureExport(signature) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.signatureExport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$signatureImport = function signatureImport(signature) {
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.signatureImport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$signatureImportLax = function signatureImportLax(signature) {
    // signatureImportLax method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure that signature is greater than 0
    if (signature.length === 0) throw new RangeError('signature length is invalid');
    var sigObj = $cSzGv.signatureImportLax(signature);
    if (sigObj === null) throw new Error("couldn't parse DER signature");
    return $NePhB.signatureImport(sigObj);
};
/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$sign = function sign(message1, privateKey1, options) {
    if (options === null) throw new TypeError('options should be an Object');
    var signOptions = void 0;
    if (options) {
        signOptions = {};
        if (options.data === null) throw new TypeError('options.data should be a Buffer');
        if (options.data) {
            // validate option.data length
            if (options.data.length !== 32) throw new RangeError('options.data length is invalid');
            signOptions.data = new Uint8Array(options.data);
        }
        if (options.noncefn === null) throw new TypeError('options.noncefn should be a Function');
        if (options.noncefn) //  convert option.noncefn function signature
        signOptions.noncefn = function(message, privateKey, algo, data, attempt) {
            var bufferAlgo = algo != null ? $78c8b3f02b0d80b8$require$Buffer.from(algo) : null;
            var bufferData = data != null ? $78c8b3f02b0d80b8$require$Buffer.from(data) : null;
            var buffer = $78c8b3f02b0d80b8$require$Buffer.from('');
            if (options.noncefn) buffer = options.noncefn($78c8b3f02b0d80b8$require$Buffer.from(message), $78c8b3f02b0d80b8$require$Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
            return Uint8Array.from(buffer);
        };
    }
    var sig = $l1CJ2.ecdsaSign(Uint8Array.from(message1), Uint8Array.from(privateKey1), signOptions);
    return {
        signature: $78c8b3f02b0d80b8$require$Buffer.from(sig.signature),
        recovery: sig.recid
    };
};
/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */ var $78c8b3f02b0d80b8$var$verify = function verify(message, signature, publicKey) {
    // note: secp256k1 v4 verify method has a different argument order
    return $l1CJ2.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};
/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$recover = function recover(message, signature, recid, compressed) {
    // note: secp256k1 v4 recover method has a different argument order
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};
/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$ecdh = function ecdh(publicKey, privateKey) {
    // note: secp256k1 v3 doesn't allow optional parameter
    return $78c8b3f02b0d80b8$require$Buffer.from($l1CJ2.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};
/**
 * Compute an EC Diffie-Hellman secret and return public key as result
 * @method ecdhUnsafe
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */ var $78c8b3f02b0d80b8$var$ecdhUnsafe = function ecdhUnsafe(publicKey, privateKey, compressed) {
    // ecdhUnsafe method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure valid publicKey length
    if (publicKey.length !== 33 && publicKey.length !== 65) throw new RangeError('public key length is invalid');
    // ensure valid privateKey length
    if (privateKey.length !== 32) throw new RangeError('private key length is invalid');
    return $78c8b3f02b0d80b8$require$Buffer.from($NePhB.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};
module.exports = {
    privateKeyVerify: $78c8b3f02b0d80b8$var$privateKeyVerify,
    privateKeyExport: $78c8b3f02b0d80b8$var$privateKeyExport,
    privateKeyImport: $78c8b3f02b0d80b8$var$privateKeyImport,
    privateKeyNegate: $78c8b3f02b0d80b8$var$privateKeyNegate,
    privateKeyModInverse: $78c8b3f02b0d80b8$var$privateKeyModInverse,
    privateKeyTweakAdd: $78c8b3f02b0d80b8$var$privateKeyTweakAdd,
    privateKeyTweakMul: $78c8b3f02b0d80b8$var$privateKeyTweakMul,
    publicKeyCreate: $78c8b3f02b0d80b8$var$publicKeyCreate,
    publicKeyConvert: $78c8b3f02b0d80b8$var$publicKeyConvert,
    publicKeyVerify: $78c8b3f02b0d80b8$var$publicKeyVerify,
    publicKeyTweakAdd: $78c8b3f02b0d80b8$var$publicKeyTweakAdd,
    publicKeyTweakMul: $78c8b3f02b0d80b8$var$publicKeyTweakMul,
    publicKeyCombine: $78c8b3f02b0d80b8$var$publicKeyCombine,
    signatureNormalize: $78c8b3f02b0d80b8$var$signatureNormalize,
    signatureExport: $78c8b3f02b0d80b8$var$signatureExport,
    signatureImport: $78c8b3f02b0d80b8$var$signatureImport,
    signatureImportLax: $78c8b3f02b0d80b8$var$signatureImportLax,
    sign: $78c8b3f02b0d80b8$var$sign,
    verify: $78c8b3f02b0d80b8$var$verify,
    recover: $78c8b3f02b0d80b8$var$recover,
    ecdh: $78c8b3f02b0d80b8$var$ecdh,
    ecdhUnsafe: $78c8b3f02b0d80b8$var$ecdhUnsafe
};

});
parcelRequire.register("l1CJ2", function(module, exports) {
"use strict";
var $f4e7bb059fef03d0$var$__awaiter = module.exports && module.exports.__awaiter || function(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var $f4e7bb059fef03d0$var$__generator = module.exports && module.exports.__generator || function(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
};
function $f4e7bb059fef03d0$var$__export(m) {
    for(var p in m)if (!module.exports.hasOwnProperty(p)) module.exports[p] = m[p];
}
Object.defineProperty(module.exports, "__esModule", {
    value: true
});


var $j8Yeq = parcelRequire("j8Yeq");
var $f4e7bb059fef03d0$var$SECP256K1_PRIVATE_KEY_SIZE = 32;
function $f4e7bb059fef03d0$var$createPrivateKey() {
    return $f4e7bb059fef03d0$var$__awaiter(this, void 0, void 0, function() {
        var pk;
        return $f4e7bb059fef03d0$var$__generator(this, function(_a) {
            switch(_a.label){
                case 0:
                    return [
                        4 /*yield*/ ,
                        $j8Yeq.getRandomBytes($f4e7bb059fef03d0$var$SECP256K1_PRIVATE_KEY_SIZE)
                    ];
                case 1:
                    pk = _a.sent();
                    if ((parcelRequire("32Z7j")).privateKeyVerify(pk)) return [
                        2 /*return*/ ,
                        pk
                    ];
                    return [
                        3 /*break*/ ,
                        0
                    ];
                case 2:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
module.exports.createPrivateKey = $f4e7bb059fef03d0$var$createPrivateKey;
function $f4e7bb059fef03d0$var$createPrivateKeySync() {
    while(true){
        var pk = $j8Yeq.getRandomBytesSync($f4e7bb059fef03d0$var$SECP256K1_PRIVATE_KEY_SIZE);
        if ((parcelRequire("32Z7j")).privateKeyVerify(pk)) return pk;
    }
}
module.exports.createPrivateKeySync = $f4e7bb059fef03d0$var$createPrivateKeySync;

$f4e7bb059fef03d0$var$__export((parcelRequire("32Z7j")));

});
parcelRequire.register("32Z7j", function(module, exports) {


module.exports = (parcelRequire("fICtg"))((parcelRequire("8MOcx")));

});
parcelRequire.register("fICtg", function(module, exports) {
const $b718ce9832720c73$var$errors = {
    IMPOSSIBLE_CASE: 'Impossible case. Please create issue.',
    TWEAK_ADD: 'The tweak was out of range or the resulted private key is invalid',
    TWEAK_MUL: 'The tweak was out of range or equal to zero',
    CONTEXT_RANDOMIZE_UNKNOW: 'Unknow error on context randomization',
    SECKEY_INVALID: 'Private Key is invalid',
    PUBKEY_PARSE: 'Public Key could not be parsed',
    PUBKEY_SERIALIZE: 'Public Key serialization error',
    PUBKEY_COMBINE: 'The sum of the public keys is not valid',
    SIG_PARSE: 'Signature could not be parsed',
    SIGN: 'The nonce generation function failed, or the private key was invalid',
    RECOVER: 'Public key could not be recover',
    ECDH: 'Scalar was invalid (zero or overflow)'
};
function $b718ce9832720c73$var$assert(cond, msg) {
    if (!cond) throw new Error(msg);
}
function $b718ce9832720c73$var$isUint8Array(name, value, length) {
    $b718ce9832720c73$var$assert(value instanceof Uint8Array, `Expected ${name} to be an Uint8Array`);
    if (length !== undefined) {
        if (Array.isArray(length)) {
            const numbers = length.join(', ');
            const msg = `Expected ${name} to be an Uint8Array with length [${numbers}]`;
            $b718ce9832720c73$var$assert(length.includes(value.length), msg);
        } else {
            const msg = `Expected ${name} to be an Uint8Array with length ${length}`;
            $b718ce9832720c73$var$assert(value.length === length, msg);
        }
    }
}
function $b718ce9832720c73$var$isCompressed(value) {
    $b718ce9832720c73$var$assert($b718ce9832720c73$var$toTypeString(value) === 'Boolean', 'Expected compressed to be a Boolean');
}
function $b718ce9832720c73$var$getAssertedOutput(output = (len)=>new Uint8Array(len)
, length) {
    if (typeof output === 'function') output = output(length);
    $b718ce9832720c73$var$isUint8Array('output', output, length);
    return output;
}
function $b718ce9832720c73$var$toTypeString(value) {
    return Object.prototype.toString.call(value).slice(8, -1);
}
module.exports = (secp256k1)=>{
    return {
        contextRandomize (seed) {
            $b718ce9832720c73$var$assert(seed === null || seed instanceof Uint8Array, 'Expected seed to be an Uint8Array or null');
            if (seed !== null) $b718ce9832720c73$var$isUint8Array('seed', seed, 32);
            switch(secp256k1.contextRandomize(seed)){
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.CONTEXT_RANDOMIZE_UNKNOW);
            }
        },
        privateKeyVerify (seckey) {
            $b718ce9832720c73$var$isUint8Array('private key', seckey, 32);
            return secp256k1.privateKeyVerify(seckey) === 0;
        },
        privateKeyNegate (seckey) {
            $b718ce9832720c73$var$isUint8Array('private key', seckey, 32);
            switch(secp256k1.privateKeyNegate(seckey)){
                case 0:
                    return seckey;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.IMPOSSIBLE_CASE);
            }
        },
        privateKeyTweakAdd (seckey, tweak) {
            $b718ce9832720c73$var$isUint8Array('private key', seckey, 32);
            $b718ce9832720c73$var$isUint8Array('tweak', tweak, 32);
            switch(secp256k1.privateKeyTweakAdd(seckey, tweak)){
                case 0:
                    return seckey;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.TWEAK_ADD);
            }
        },
        privateKeyTweakMul (seckey, tweak) {
            $b718ce9832720c73$var$isUint8Array('private key', seckey, 32);
            $b718ce9832720c73$var$isUint8Array('tweak', tweak, 32);
            switch(secp256k1.privateKeyTweakMul(seckey, tweak)){
                case 0:
                    return seckey;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.TWEAK_MUL);
            }
        },
        publicKeyVerify (pubkey) {
            $b718ce9832720c73$var$isUint8Array('public key', pubkey, [
                33,
                65
            ]);
            return secp256k1.publicKeyVerify(pubkey) === 0;
        },
        publicKeyCreate (seckey, compressed = true, output) {
            $b718ce9832720c73$var$isUint8Array('private key', seckey, 32);
            $b718ce9832720c73$var$isCompressed(compressed);
            output = $b718ce9832720c73$var$getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyCreate(output, seckey)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.SECKEY_INVALID);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_SERIALIZE);
            }
        },
        publicKeyConvert (pubkey, compressed = true, output) {
            $b718ce9832720c73$var$isUint8Array('public key', pubkey, [
                33,
                65
            ]);
            $b718ce9832720c73$var$isCompressed(compressed);
            output = $b718ce9832720c73$var$getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyConvert(output, pubkey)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_SERIALIZE);
            }
        },
        publicKeyNegate (pubkey, compressed = true, output) {
            $b718ce9832720c73$var$isUint8Array('public key', pubkey, [
                33,
                65
            ]);
            $b718ce9832720c73$var$isCompressed(compressed);
            output = $b718ce9832720c73$var$getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyNegate(output, pubkey)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.IMPOSSIBLE_CASE);
                case 3:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_SERIALIZE);
            }
        },
        publicKeyCombine (pubkeys, compressed = true, output) {
            $b718ce9832720c73$var$assert(Array.isArray(pubkeys), 'Expected public keys to be an Array');
            $b718ce9832720c73$var$assert(pubkeys.length > 0, 'Expected public keys array will have more than zero items');
            for (const pubkey of pubkeys)$b718ce9832720c73$var$isUint8Array('public key', pubkey, [
                33,
                65
            ]);
            $b718ce9832720c73$var$isCompressed(compressed);
            output = $b718ce9832720c73$var$getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyCombine(output, pubkeys)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_COMBINE);
                case 3:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_SERIALIZE);
            }
        },
        publicKeyTweakAdd (pubkey, tweak, compressed = true, output) {
            $b718ce9832720c73$var$isUint8Array('public key', pubkey, [
                33,
                65
            ]);
            $b718ce9832720c73$var$isUint8Array('tweak', tweak, 32);
            $b718ce9832720c73$var$isCompressed(compressed);
            output = $b718ce9832720c73$var$getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyTweakAdd(output, pubkey, tweak)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.TWEAK_ADD);
            }
        },
        publicKeyTweakMul (pubkey, tweak, compressed = true, output) {
            $b718ce9832720c73$var$isUint8Array('public key', pubkey, [
                33,
                65
            ]);
            $b718ce9832720c73$var$isUint8Array('tweak', tweak, 32);
            $b718ce9832720c73$var$isCompressed(compressed);
            output = $b718ce9832720c73$var$getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.publicKeyTweakMul(output, pubkey, tweak)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.TWEAK_MUL);
            }
        },
        signatureNormalize (sig) {
            $b718ce9832720c73$var$isUint8Array('signature', sig, 64);
            switch(secp256k1.signatureNormalize(sig)){
                case 0:
                    return sig;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.SIG_PARSE);
            }
        },
        signatureExport (sig, output) {
            $b718ce9832720c73$var$isUint8Array('signature', sig, 64);
            output = $b718ce9832720c73$var$getAssertedOutput(output, 72);
            const obj = {
                output: output,
                outputlen: 72
            };
            switch(secp256k1.signatureExport(obj, sig)){
                case 0:
                    return output.slice(0, obj.outputlen);
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.SIG_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.IMPOSSIBLE_CASE);
            }
        },
        signatureImport (sig, output) {
            $b718ce9832720c73$var$isUint8Array('signature', sig);
            output = $b718ce9832720c73$var$getAssertedOutput(output, 64);
            switch(secp256k1.signatureImport(output, sig)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.SIG_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.IMPOSSIBLE_CASE);
            }
        },
        ecdsaSign (msg32, seckey, options = {}, output) {
            $b718ce9832720c73$var$isUint8Array('message', msg32, 32);
            $b718ce9832720c73$var$isUint8Array('private key', seckey, 32);
            $b718ce9832720c73$var$assert($b718ce9832720c73$var$toTypeString(options) === 'Object', 'Expected options to be an Object');
            if (options.data !== undefined) $b718ce9832720c73$var$isUint8Array('options.data', options.data);
            if (options.noncefn !== undefined) $b718ce9832720c73$var$assert($b718ce9832720c73$var$toTypeString(options.noncefn) === 'Function', 'Expected options.noncefn to be a Function');
            output = $b718ce9832720c73$var$getAssertedOutput(output, 64);
            const obj = {
                signature: output,
                recid: null
            };
            switch(secp256k1.ecdsaSign(obj, msg32, seckey, options.data, options.noncefn)){
                case 0:
                    return obj;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.SIGN);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.IMPOSSIBLE_CASE);
            }
        },
        ecdsaVerify (sig, msg32, pubkey) {
            $b718ce9832720c73$var$isUint8Array('signature', sig, 64);
            $b718ce9832720c73$var$isUint8Array('message', msg32, 32);
            $b718ce9832720c73$var$isUint8Array('public key', pubkey, [
                33,
                65
            ]);
            switch(secp256k1.ecdsaVerify(sig, msg32, pubkey)){
                case 0:
                    return true;
                case 3:
                    return false;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.SIG_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_PARSE);
            }
        },
        ecdsaRecover (sig, recid, msg32, compressed = true, output) {
            $b718ce9832720c73$var$isUint8Array('signature', sig, 64);
            $b718ce9832720c73$var$assert($b718ce9832720c73$var$toTypeString(recid) === 'Number' && recid >= 0 && recid <= 3, 'Expected recovery id to be a Number within interval [0, 3]');
            $b718ce9832720c73$var$isUint8Array('message', msg32, 32);
            $b718ce9832720c73$var$isCompressed(compressed);
            output = $b718ce9832720c73$var$getAssertedOutput(output, compressed ? 33 : 65);
            switch(secp256k1.ecdsaRecover(output, sig, recid, msg32)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.SIG_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.RECOVER);
                case 3:
                    throw new Error($b718ce9832720c73$var$errors.IMPOSSIBLE_CASE);
            }
        },
        ecdh (pubkey, seckey, options = {}, output) {
            $b718ce9832720c73$var$isUint8Array('public key', pubkey, [
                33,
                65
            ]);
            $b718ce9832720c73$var$isUint8Array('private key', seckey, 32);
            $b718ce9832720c73$var$assert($b718ce9832720c73$var$toTypeString(options) === 'Object', 'Expected options to be an Object');
            if (options.data !== undefined) $b718ce9832720c73$var$isUint8Array('options.data', options.data);
            if (options.hashfn !== undefined) {
                $b718ce9832720c73$var$assert($b718ce9832720c73$var$toTypeString(options.hashfn) === 'Function', 'Expected options.hashfn to be a Function');
                if (options.xbuf !== undefined) $b718ce9832720c73$var$isUint8Array('options.xbuf', options.xbuf, 32);
                if (options.ybuf !== undefined) $b718ce9832720c73$var$isUint8Array('options.ybuf', options.ybuf, 32);
                $b718ce9832720c73$var$isUint8Array('output', output);
            } else output = $b718ce9832720c73$var$getAssertedOutput(output, 32);
            switch(secp256k1.ecdh(output, pubkey, seckey, options.data, options.hashfn, options.xbuf, options.ybuf)){
                case 0:
                    return output;
                case 1:
                    throw new Error($b718ce9832720c73$var$errors.PUBKEY_PARSE);
                case 2:
                    throw new Error($b718ce9832720c73$var$errors.ECDH);
            }
        }
    };
};

});

parcelRequire.register("8MOcx", function(module, exports) {

var $hJ0wi = parcelRequire("hJ0wi");
var $6659bf5be67fdd47$require$EC = $hJ0wi.ec;
const $6659bf5be67fdd47$var$ec = new $6659bf5be67fdd47$require$EC('secp256k1');
const $6659bf5be67fdd47$var$ecparams = $6659bf5be67fdd47$var$ec.curve;
// Hack, we can not use bn.js@5, while elliptic uses bn.js@4
// See https://github.com/indutny/elliptic/issues/191#issuecomment-569888758
const $6659bf5be67fdd47$var$BN = $6659bf5be67fdd47$var$ecparams.n.constructor;
function $6659bf5be67fdd47$var$loadCompressedPublicKey(first, xbuf) {
    let x = new $6659bf5be67fdd47$var$BN(xbuf);
    // overflow
    if (x.cmp($6659bf5be67fdd47$var$ecparams.p) >= 0) return null;
    x = x.toRed($6659bf5be67fdd47$var$ecparams.red);
    // compute corresponding Y
    let y = x.redSqr().redIMul(x).redIAdd($6659bf5be67fdd47$var$ecparams.b).redSqrt();
    if (first === 3 !== y.isOdd()) y = y.redNeg();
    return $6659bf5be67fdd47$var$ec.keyPair({
        pub: {
            x: x,
            y: y
        }
    });
}
function $6659bf5be67fdd47$var$loadUncompressedPublicKey(first, xbuf, ybuf) {
    let x = new $6659bf5be67fdd47$var$BN(xbuf);
    let y = new $6659bf5be67fdd47$var$BN(ybuf);
    // overflow
    if (x.cmp($6659bf5be67fdd47$var$ecparams.p) >= 0 || y.cmp($6659bf5be67fdd47$var$ecparams.p) >= 0) return null;
    x = x.toRed($6659bf5be67fdd47$var$ecparams.red);
    y = y.toRed($6659bf5be67fdd47$var$ecparams.red);
    // is odd flag
    if ((first === 6 || first === 7) && y.isOdd() !== (first === 7)) return null;
    // x*x*x + b = y*y
    const x3 = x.redSqr().redIMul(x);
    if (!y.redSqr().redISub(x3.redIAdd($6659bf5be67fdd47$var$ecparams.b)).isZero()) return null;
    return $6659bf5be67fdd47$var$ec.keyPair({
        pub: {
            x: x,
            y: y
        }
    });
}
function $6659bf5be67fdd47$var$loadPublicKey(pubkey) {
    // length should be validated in interface
    const first = pubkey[0];
    switch(first){
        case 2:
        case 3:
            if (pubkey.length !== 33) return null;
            return $6659bf5be67fdd47$var$loadCompressedPublicKey(first, pubkey.subarray(1, 33));
        case 4:
        case 6:
        case 7:
            if (pubkey.length !== 65) return null;
            return $6659bf5be67fdd47$var$loadUncompressedPublicKey(first, pubkey.subarray(1, 33), pubkey.subarray(33, 65));
        default:
            return null;
    }
}
function $6659bf5be67fdd47$var$savePublicKey(output, point) {
    const pubkey = point.encode(null, output.length === 33);
    // Loop should be faster because we do not need create extra Uint8Array
    // output.set(new Uint8Array(pubkey))
    for(let i = 0; i < output.length; ++i)output[i] = pubkey[i];
}
module.exports = {
    contextRandomize () {
        return 0;
    },
    privateKeyVerify (seckey) {
        const bn = new $6659bf5be67fdd47$var$BN(seckey);
        return bn.cmp($6659bf5be67fdd47$var$ecparams.n) < 0 && !bn.isZero() ? 0 : 1;
    },
    privateKeyNegate (seckey) {
        const bn = new $6659bf5be67fdd47$var$BN(seckey);
        const negate = $6659bf5be67fdd47$var$ecparams.n.sub(bn).umod($6659bf5be67fdd47$var$ecparams.n).toArrayLike(Uint8Array, 'be', 32);
        seckey.set(negate);
        return 0;
    },
    privateKeyTweakAdd (seckey, tweak) {
        const bn = new $6659bf5be67fdd47$var$BN(tweak);
        if (bn.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) return 1;
        bn.iadd(new $6659bf5be67fdd47$var$BN(seckey));
        if (bn.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) bn.isub($6659bf5be67fdd47$var$ecparams.n);
        if (bn.isZero()) return 1;
        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);
        return 0;
    },
    privateKeyTweakMul (seckey, tweak) {
        let bn = new $6659bf5be67fdd47$var$BN(tweak);
        if (bn.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0 || bn.isZero()) return 1;
        bn.imul(new $6659bf5be67fdd47$var$BN(seckey));
        if (bn.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) bn = bn.umod($6659bf5be67fdd47$var$ecparams.n);
        const tweaked = bn.toArrayLike(Uint8Array, 'be', 32);
        seckey.set(tweaked);
        return 0;
    },
    publicKeyVerify (pubkey) {
        const pair = $6659bf5be67fdd47$var$loadPublicKey(pubkey);
        return pair === null ? 1 : 0;
    },
    publicKeyCreate (output, seckey) {
        const bn = new $6659bf5be67fdd47$var$BN(seckey);
        if (bn.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0 || bn.isZero()) return 1;
        const point = $6659bf5be67fdd47$var$ec.keyFromPrivate(seckey).getPublic();
        $6659bf5be67fdd47$var$savePublicKey(output, point);
        return 0;
    },
    publicKeyConvert (output, pubkey) {
        const pair = $6659bf5be67fdd47$var$loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point = pair.getPublic();
        $6659bf5be67fdd47$var$savePublicKey(output, point);
        return 0;
    },
    publicKeyNegate (output, pubkey) {
        const pair = $6659bf5be67fdd47$var$loadPublicKey(pubkey);
        if (pair === null) return 1;
        const point = pair.getPublic();
        point.y = point.y.redNeg();
        $6659bf5be67fdd47$var$savePublicKey(output, point);
        return 0;
    },
    publicKeyCombine (output, pubkeys) {
        const pairs = new Array(pubkeys.length);
        for(let i = 0; i < pubkeys.length; ++i){
            pairs[i] = $6659bf5be67fdd47$var$loadPublicKey(pubkeys[i]);
            if (pairs[i] === null) return 1;
        }
        let point = pairs[0].getPublic();
        for(let i1 = 1; i1 < pairs.length; ++i1)point = point.add(pairs[i1].pub);
        if (point.isInfinity()) return 2;
        $6659bf5be67fdd47$var$savePublicKey(output, point);
        return 0;
    },
    publicKeyTweakAdd (output, pubkey, tweak) {
        const pair = $6659bf5be67fdd47$var$loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new $6659bf5be67fdd47$var$BN(tweak);
        if (tweak.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) return 2;
        const point = pair.getPublic().add($6659bf5be67fdd47$var$ecparams.g.mul(tweak));
        if (point.isInfinity()) return 2;
        $6659bf5be67fdd47$var$savePublicKey(output, point);
        return 0;
    },
    publicKeyTweakMul (output, pubkey, tweak) {
        const pair = $6659bf5be67fdd47$var$loadPublicKey(pubkey);
        if (pair === null) return 1;
        tweak = new $6659bf5be67fdd47$var$BN(tweak);
        if (tweak.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0 || tweak.isZero()) return 2;
        const point = pair.getPublic().mul(tweak);
        $6659bf5be67fdd47$var$savePublicKey(output, point);
        return 0;
    },
    signatureNormalize (sig) {
        const r = new $6659bf5be67fdd47$var$BN(sig.subarray(0, 32));
        const s = new $6659bf5be67fdd47$var$BN(sig.subarray(32, 64));
        if (r.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0 || s.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) return 1;
        if (s.cmp($6659bf5be67fdd47$var$ec.nh) === 1) sig.set($6659bf5be67fdd47$var$ecparams.n.sub(s).toArrayLike(Uint8Array, 'be', 32), 32);
        return 0;
    },
    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
    // Adapted for Uint8Array instead Buffer
    signatureExport (obj, sig) {
        const sigR = sig.subarray(0, 32);
        const sigS = sig.subarray(32, 64);
        if (new $6659bf5be67fdd47$var$BN(sigR).cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) return 1;
        if (new $6659bf5be67fdd47$var$BN(sigS).cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) return 1;
        const { output: output  } = obj;
        // Prepare R
        let r = output.subarray(4, 37);
        r[0] = 0;
        r.set(sigR, 1);
        let lenR = 33;
        let posR = 0;
        for(; lenR > 1 && r[posR] === 0 && !(r[posR + 1] & 128); --lenR, ++posR);
        r = r.subarray(posR);
        if (r[0] & 128) return 1;
        if (lenR > 1 && r[0] === 0 && !(r[1] & 128)) return 1;
        // Prepare S
        let s = output.subarray(39, 72);
        s[0] = 0;
        s.set(sigS, 1);
        let lenS = 33;
        let posS = 0;
        for(; lenS > 1 && s[posS] === 0 && !(s[posS + 1] & 128); --lenS, ++posS);
        s = s.subarray(posS);
        if (s[0] & 128) return 1;
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128)) return 1;
        // Set output length for return
        obj.outputlen = 6 + lenR + lenS;
        // Output in specified format
        // 0x30 [total-length] 0x02 [R-length] [R] 0x02 [S-length] [S]
        output[0] = 48;
        output[1] = obj.outputlen - 2;
        output[2] = 2;
        output[3] = r.length;
        output.set(r, 4);
        output[4 + lenR] = 2;
        output[5 + lenR] = s.length;
        output.set(s, 6 + lenR);
        return 0;
    },
    // Copied 1-to-1 from https://github.com/bitcoinjs/bip66/blob/master/index.js
    // Adapted for Uint8Array instead Buffer
    signatureImport (output, sig) {
        if (sig.length < 8) return 1;
        if (sig.length > 72) return 1;
        if (sig[0] !== 48) return 1;
        if (sig[1] !== sig.length - 2) return 1;
        if (sig[2] !== 2) return 1;
        const lenR = sig[3];
        if (lenR === 0) return 1;
        if (5 + lenR >= sig.length) return 1;
        if (sig[4 + lenR] !== 2) return 1;
        const lenS = sig[5 + lenR];
        if (lenS === 0) return 1;
        if (6 + lenR + lenS !== sig.length) return 1;
        if (sig[4] & 128) return 1;
        if (lenR > 1 && sig[4] === 0 && !(sig[5] & 128)) return 1;
        if (sig[lenR + 6] & 128) return 1;
        if (lenS > 1 && sig[lenR + 6] === 0 && !(sig[lenR + 7] & 128)) return 1;
        let sigR = sig.subarray(4, 4 + lenR);
        if (sigR.length === 33 && sigR[0] === 0) sigR = sigR.subarray(1);
        if (sigR.length > 32) return 1;
        let sigS = sig.subarray(6 + lenR);
        if (sigS.length === 33 && sigS[0] === 0) sigS = sigS.slice(1);
        if (sigS.length > 32) throw new Error('S length is too long');
        let r = new $6659bf5be67fdd47$var$BN(sigR);
        if (r.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) r = new $6659bf5be67fdd47$var$BN(0);
        let s = new $6659bf5be67fdd47$var$BN(sig.subarray(6 + lenR));
        if (s.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) s = new $6659bf5be67fdd47$var$BN(0);
        output.set(r.toArrayLike(Uint8Array, 'be', 32), 0);
        output.set(s.toArrayLike(Uint8Array, 'be', 32), 32);
        return 0;
    },
    ecdsaSign (obj, message, seckey, data, noncefn) {
        if (noncefn) {
            const _noncefn = noncefn;
            noncefn = (counter)=>{
                const nonce = _noncefn(message, seckey, null, data, counter);
                const isValid = nonce instanceof Uint8Array && nonce.length === 32;
                if (!isValid) throw new Error('This is the way');
                return new $6659bf5be67fdd47$var$BN(nonce);
            };
        }
        const d = new $6659bf5be67fdd47$var$BN(seckey);
        if (d.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0 || d.isZero()) return 1;
        let sig;
        try {
            sig = $6659bf5be67fdd47$var$ec.sign(message, seckey, {
                canonical: true,
                k: noncefn,
                pers: data
            });
        } catch (err) {
            return 1;
        }
        obj.signature.set(sig.r.toArrayLike(Uint8Array, 'be', 32), 0);
        obj.signature.set(sig.s.toArrayLike(Uint8Array, 'be', 32), 32);
        obj.recid = sig.recoveryParam;
        return 0;
    },
    ecdsaVerify (sig, msg32, pubkey) {
        const sigObj = {
            r: sig.subarray(0, 32),
            s: sig.subarray(32, 64)
        };
        const sigr = new $6659bf5be67fdd47$var$BN(sigObj.r);
        const sigs = new $6659bf5be67fdd47$var$BN(sigObj.s);
        if (sigr.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0 || sigs.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) return 1;
        if (sigs.cmp($6659bf5be67fdd47$var$ec.nh) === 1 || sigr.isZero() || sigs.isZero()) return 3;
        const pair = $6659bf5be67fdd47$var$loadPublicKey(pubkey);
        if (pair === null) return 2;
        const point = pair.getPublic();
        const isValid = $6659bf5be67fdd47$var$ec.verify(msg32, sigObj, point);
        return isValid ? 0 : 3;
    },
    ecdsaRecover (output, sig, recid, msg32) {
        const sigObj = {
            r: sig.slice(0, 32),
            s: sig.slice(32, 64)
        };
        const sigr = new $6659bf5be67fdd47$var$BN(sigObj.r);
        const sigs = new $6659bf5be67fdd47$var$BN(sigObj.s);
        if (sigr.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0 || sigs.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0) return 1;
        if (sigr.isZero() || sigs.isZero()) return 2;
        // Can throw `throw new Error('Unable to find sencond key candinate');`
        let point;
        try {
            point = $6659bf5be67fdd47$var$ec.recoverPubKey(msg32, sigObj, recid);
        } catch (err) {
            return 2;
        }
        $6659bf5be67fdd47$var$savePublicKey(output, point);
        return 0;
    },
    ecdh (output, pubkey, seckey, data, hashfn, xbuf, ybuf) {
        const pair = $6659bf5be67fdd47$var$loadPublicKey(pubkey);
        if (pair === null) return 1;
        const scalar = new $6659bf5be67fdd47$var$BN(seckey);
        if (scalar.cmp($6659bf5be67fdd47$var$ecparams.n) >= 0 || scalar.isZero()) return 2;
        const point = pair.getPublic().mul(scalar);
        if (hashfn === undefined) {
            const data = point.encode(null, true);
            const sha256 = $6659bf5be67fdd47$var$ec.hash().update(data).digest();
            for(let i = 0; i < 32; ++i)output[i] = sha256[i];
        } else {
            if (!xbuf) xbuf = new Uint8Array(32);
            const x = point.getX().toArray('be', 32);
            for(let i = 0; i < 32; ++i)xbuf[i] = x[i];
            if (!ybuf) ybuf = new Uint8Array(32);
            const y = point.getY().toArray('be', 32);
            for(let i2 = 0; i2 < 32; ++i2)ybuf[i2] = y[i2];
            const hash = hashfn(xbuf, ybuf, data);
            const isValid = hash instanceof Uint8Array && hash.length === output.length;
            if (!isValid) return 2;
            output.set(hash);
        }
        return 0;
    }
};

});
parcelRequire.register("hJ0wi", function(module, exports) {
'use strict';
var $ce770adf614e1fa5$var$elliptic = module.exports;

$ce770adf614e1fa5$var$elliptic.version = (parcelRequire("dPW1m")).version;

$ce770adf614e1fa5$var$elliptic.utils = (parcelRequire("lxDwz"));

$ce770adf614e1fa5$var$elliptic.rand = (parcelRequire("2d653"));

$ce770adf614e1fa5$var$elliptic.curve = (parcelRequire("bTRiI"));

$ce770adf614e1fa5$var$elliptic.curves = (parcelRequire("eOn8P"));

// Protocols
$ce770adf614e1fa5$var$elliptic.ec = (parcelRequire("gL6yo"));

$ce770adf614e1fa5$var$elliptic.eddsa = (parcelRequire("2TB77"));

});
parcelRequire.register("dPW1m", function(module, exports) {
module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.5.4\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

});

parcelRequire.register("lxDwz", function(module, exports) {
'use strict';
var $faeb56c140dea485$var$utils = module.exports;

var $22ilA = parcelRequire("22ilA");

var $adLNa = parcelRequire("adLNa");

var $1kr9f = parcelRequire("1kr9f");
$faeb56c140dea485$var$utils.assert = $adLNa;
$faeb56c140dea485$var$utils.toArray = $1kr9f.toArray;
$faeb56c140dea485$var$utils.zero2 = $1kr9f.zero2;
$faeb56c140dea485$var$utils.toHex = $1kr9f.toHex;
$faeb56c140dea485$var$utils.encode = $1kr9f.encode;
// Represent num in a w-NAF form
function $faeb56c140dea485$var$getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
$faeb56c140dea485$var$utils.getNAF = $faeb56c140dea485$var$getNAF;
// Represent k1, k2 in a Joint Sparse Form
function $faeb56c140dea485$var$getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
$faeb56c140dea485$var$utils.getJSF = $faeb56c140dea485$var$getJSF;
function $faeb56c140dea485$var$cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
$faeb56c140dea485$var$utils.cachedProperty = $faeb56c140dea485$var$cachedProperty;
function $faeb56c140dea485$var$parseBytes(bytes) {
    return typeof bytes === 'string' ? $faeb56c140dea485$var$utils.toArray(bytes, 'hex') : bytes;
}
$faeb56c140dea485$var$utils.parseBytes = $faeb56c140dea485$var$parseBytes;
function $faeb56c140dea485$var$intFromLE(bytes) {
    return new $22ilA(bytes, 'hex', 'le');
}
$faeb56c140dea485$var$utils.intFromLE = $faeb56c140dea485$var$intFromLE;

});
parcelRequire.register("22ilA", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("lb6jJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("adLNa", function(module, exports) {
module.exports = $771030c710c9b6ea$var$assert;
function $771030c710c9b6ea$var$assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
}
$771030c710c9b6ea$var$assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

});

parcelRequire.register("1kr9f", function(module, exports) {
'use strict';
var $0f7cb7c3f538c981$var$utils = module.exports;
function $0f7cb7c3f538c981$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 255;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
$0f7cb7c3f538c981$var$utils.toArray = $0f7cb7c3f538c981$var$toArray;
function $0f7cb7c3f538c981$var$zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
$0f7cb7c3f538c981$var$utils.zero2 = $0f7cb7c3f538c981$var$zero2;
function $0f7cb7c3f538c981$var$toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += $0f7cb7c3f538c981$var$zero2(msg[i].toString(16));
    return res;
}
$0f7cb7c3f538c981$var$utils.toHex = $0f7cb7c3f538c981$var$toHex;
$0f7cb7c3f538c981$var$utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return $0f7cb7c3f538c981$var$toHex(arr);
    else return arr;
};

});


parcelRequire.register("2d653", function(module, exports) {
var $19c1831deb43cf6f$var$r;
module.exports = function rand(len) {
    if (!$19c1831deb43cf6f$var$r) $19c1831deb43cf6f$var$r = new $19c1831deb43cf6f$var$Rand(null);
    return $19c1831deb43cf6f$var$r.generate(len);
};
function $19c1831deb43cf6f$var$Rand(rand) {
    this.rand = rand;
}
module.exports.Rand = $19c1831deb43cf6f$var$Rand;
$19c1831deb43cf6f$var$Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
$19c1831deb43cf6f$var$Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};

if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    $19c1831deb43cf6f$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    $19c1831deb43cf6f$var$Rand.prototype._rand = function _rand(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === 'object') // Old junk
    $19c1831deb43cf6f$var$Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
    };
} else // Node.js or Web worker with no crypto support
try {
    var $19c1831deb43cf6f$var$crypto = (parcelRequire("lb6jJ"));
    if (typeof $19c1831deb43cf6f$var$crypto.randomBytes !== 'function') throw new Error('Not supported');
    $19c1831deb43cf6f$var$Rand.prototype._rand = function _rand(n) {
        return $19c1831deb43cf6f$var$crypto.randomBytes(n);
    };
} catch (e) {}

});

parcelRequire.register("bTRiI", function(module, exports) {
'use strict';
var $8a9e2d3996133b36$var$curve = module.exports;

$8a9e2d3996133b36$var$curve.base = (parcelRequire("bzElR"));

$8a9e2d3996133b36$var$curve.short = (parcelRequire("1uurF"));

$8a9e2d3996133b36$var$curve.mont = (parcelRequire("hs3Ns"));

$8a9e2d3996133b36$var$curve.edwards = (parcelRequire("jZtzw"));

});
parcelRequire.register("bzElR", function(module, exports) {
'use strict';

var $22ilA = parcelRequire("22ilA");

var $lxDwz = parcelRequire("lxDwz");
var $86d24396214d4e69$var$getNAF = $lxDwz.getNAF;
var $86d24396214d4e69$var$getJSF = $lxDwz.getJSF;
var $86d24396214d4e69$var$assert = $lxDwz.assert;
function $86d24396214d4e69$var$BaseCurve(type, conf) {
    this.type = type;
    this.p = new $22ilA(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? $22ilA.red(conf.prime) : $22ilA.mont(this.p);
    // Useful for many curves
    this.zero = new $22ilA(0).toRed(this.red);
    this.one = new $22ilA(1).toRed(this.red);
    this.two = new $22ilA(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new $22ilA(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = $86d24396214d4e69$var$BaseCurve;
$86d24396214d4e69$var$BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
$86d24396214d4e69$var$BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
$86d24396214d4e69$var$BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    $86d24396214d4e69$var$assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = $86d24396214d4e69$var$getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
$86d24396214d4e69$var$BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = $86d24396214d4e69$var$getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        $86d24396214d4e69$var$assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
$86d24396214d4e69$var$BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = $86d24396214d4e69$var$getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = $86d24396214d4e69$var$getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = $86d24396214d4e69$var$getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === 'affine') acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function $86d24396214d4e69$var$BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
$86d24396214d4e69$var$BaseCurve.BasePoint = $86d24396214d4e69$var$BasePoint;
$86d24396214d4e69$var$BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
};
$86d24396214d4e69$var$BasePoint.prototype.validate = function validate() {
    return this.curve.validate(this);
};
$86d24396214d4e69$var$BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = $lxDwz.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6) $86d24396214d4e69$var$assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7) $86d24396214d4e69$var$assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    throw new Error('Unknown point format');
};
$86d24396214d4e69$var$BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
$86d24396214d4e69$var$BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [
        this.getY().isEven() ? 2 : 3
    ].concat(x);
    return [
        4
    ].concat(x, this.getY().toArray('be', len));
};
$86d24396214d4e69$var$BasePoint.prototype.encode = function encode(enc, compact) {
    return $lxDwz.encode(this._encode(compact), enc);
};
$86d24396214d4e69$var$BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
$86d24396214d4e69$var$BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
$86d24396214d4e69$var$BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
$86d24396214d4e69$var$BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
$86d24396214d4e69$var$BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
$86d24396214d4e69$var$BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

});

parcelRequire.register("1uurF", function(module, exports) {
'use strict';

var $lxDwz = parcelRequire("lxDwz");

var $22ilA = parcelRequire("22ilA");

var $fGyu9 = parcelRequire("fGyu9");

var $bzElR = parcelRequire("bzElR");
var $11603596b802217e$var$assert = $lxDwz.assert;
function $11603596b802217e$var$ShortCurve(conf) {
    $bzElR.call(this, 'short', conf);
    this.a = new $22ilA(conf.a, 16).toRed(this.red);
    this.b = new $22ilA(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
$fGyu9($11603596b802217e$var$ShortCurve, $bzElR);
module.exports = $11603596b802217e$var$ShortCurve;
$11603596b802217e$var$ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new $22ilA(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new $22ilA(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            $11603596b802217e$var$assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new $22ilA(vec.a, 16),
            b: new $22ilA(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
$11603596b802217e$var$ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : $22ilA.mont(num);
    var tinv = new $22ilA(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new $22ilA(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
$11603596b802217e$var$ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new $22ilA(1);
    var y1 = new $22ilA(0);
    var x2 = new $22ilA(0);
    var y2 = new $22ilA(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && ++i === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
$11603596b802217e$var$ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
$11603596b802217e$var$ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $22ilA(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$11603596b802217e$var$ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
$11603596b802217e$var$ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function $11603596b802217e$var$Point(curve, x, y, isRed) {
    $bzElR.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new $22ilA(x, 16);
        this.y = new $22ilA(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
$fGyu9($11603596b802217e$var$Point, $bzElR.BasePoint);
$11603596b802217e$var$ShortCurve.prototype.point = function point(x, y, isRed) {
    return new $11603596b802217e$var$Point(this, x, y, isRed);
};
$11603596b802217e$var$ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return $11603596b802217e$var$Point.fromJSON(this, obj, red);
};
$11603596b802217e$var$Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
$11603596b802217e$var$Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
$11603596b802217e$var$Point.fromJSON = function fromJSON(curve, obj1, red) {
    if (typeof obj1 === 'string') obj1 = JSON.parse(obj1);
    var res = curve.point(obj1[0], obj1[1], red);
    if (!obj1[2]) return res;
    function obj2point(obj) {
        return curve.point(obj[0], obj[1], red);
    }
    var pre = obj1[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
$11603596b802217e$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
$11603596b802217e$var$Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
$11603596b802217e$var$Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$11603596b802217e$var$Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
$11603596b802217e$var$Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
$11603596b802217e$var$Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
$11603596b802217e$var$Point.prototype.mul = function mul(k) {
    k = new $22ilA(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
$11603596b802217e$var$Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
$11603596b802217e$var$Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
$11603596b802217e$var$Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
$11603596b802217e$var$Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
$11603596b802217e$var$Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function $11603596b802217e$var$JPoint(curve, x, y, z) {
    $bzElR.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new $22ilA(0);
    } else {
        this.x = new $22ilA(x, 16);
        this.y = new $22ilA(y, 16);
        this.z = new $22ilA(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
$fGyu9($11603596b802217e$var$JPoint, $bzElR.BasePoint);
$11603596b802217e$var$ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new $11603596b802217e$var$JPoint(this, x, y, z);
};
$11603596b802217e$var$JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
$11603596b802217e$var$JPoint.prototype.neg = function neg() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
$11603596b802217e$var$JPoint.prototype.add = function add(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$11603596b802217e$var$JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
$11603596b802217e$var$JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
$11603596b802217e$var$JPoint.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
$11603596b802217e$var$JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$11603596b802217e$var$JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
$11603596b802217e$var$JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
$11603596b802217e$var$JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
$11603596b802217e$var$JPoint.prototype.mul = function mul(k, kbase) {
    k = new $22ilA(k, kbase);
    return this.curve._wnafMul(this, k);
};
$11603596b802217e$var$JPoint.prototype.eq = function eq(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
$11603596b802217e$var$JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
$11603596b802217e$var$JPoint.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
$11603596b802217e$var$JPoint.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

});

parcelRequire.register("hs3Ns", function(module, exports) {
'use strict';

var $22ilA = parcelRequire("22ilA");

var $fGyu9 = parcelRequire("fGyu9");

var $bzElR = parcelRequire("bzElR");

var $lxDwz = parcelRequire("lxDwz");
function $cb47ff28fd0082b2$var$MontCurve(conf) {
    $bzElR.call(this, 'mont', conf);
    this.a = new $22ilA(conf.a, 16).toRed(this.red);
    this.b = new $22ilA(conf.b, 16).toRed(this.red);
    this.i4 = new $22ilA(4).toRed(this.red).redInvm();
    this.two = new $22ilA(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
$fGyu9($cb47ff28fd0082b2$var$MontCurve, $bzElR);
module.exports = $cb47ff28fd0082b2$var$MontCurve;
$cb47ff28fd0082b2$var$MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function $cb47ff28fd0082b2$var$Point(curve, x, z) {
    $bzElR.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new $22ilA(x, 16);
        this.z = new $22ilA(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
$fGyu9($cb47ff28fd0082b2$var$Point, $bzElR.BasePoint);
$cb47ff28fd0082b2$var$MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point($lxDwz.toArray(bytes, enc), 1);
};
$cb47ff28fd0082b2$var$MontCurve.prototype.point = function point(x, z) {
    return new $cb47ff28fd0082b2$var$Point(this, x, z);
};
$cb47ff28fd0082b2$var$MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $cb47ff28fd0082b2$var$Point.fromJSON(this, obj);
};
$cb47ff28fd0082b2$var$Point.prototype.precompute = function precompute() {
// No-op
};
$cb47ff28fd0082b2$var$Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
$cb47ff28fd0082b2$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $cb47ff28fd0082b2$var$Point(curve, obj[0], obj[1] || curve.one);
};
$cb47ff28fd0082b2$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
$cb47ff28fd0082b2$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
$cb47ff28fd0082b2$var$Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
$cb47ff28fd0082b2$var$Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
$cb47ff28fd0082b2$var$Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
$cb47ff28fd0082b2$var$Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
$cb47ff28fd0082b2$var$Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
$cb47ff28fd0082b2$var$Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
$cb47ff28fd0082b2$var$Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
$cb47ff28fd0082b2$var$Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
$cb47ff28fd0082b2$var$Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

});

parcelRequire.register("jZtzw", function(module, exports) {
'use strict';

var $lxDwz = parcelRequire("lxDwz");

var $22ilA = parcelRequire("22ilA");

var $fGyu9 = parcelRequire("fGyu9");

var $bzElR = parcelRequire("bzElR");
var $e8daa72f917141c2$var$assert = $lxDwz.assert;
function $e8daa72f917141c2$var$EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    $bzElR.call(this, 'edwards', conf);
    this.a = new $22ilA(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new $22ilA(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new $22ilA(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    $e8daa72f917141c2$var$assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
$fGyu9($e8daa72f917141c2$var$EdwardsCurve, $bzElR);
module.exports = $e8daa72f917141c2$var$EdwardsCurve;
$e8daa72f917141c2$var$EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
$e8daa72f917141c2$var$EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
$e8daa72f917141c2$var$EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
$e8daa72f917141c2$var$EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new $22ilA(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
$e8daa72f917141c2$var$EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new $22ilA(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
$e8daa72f917141c2$var$EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function $e8daa72f917141c2$var$Point(curve, x, y, z, t) {
    $bzElR.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new $22ilA(x, 16);
        this.y = new $22ilA(y, 16);
        this.z = z ? new $22ilA(z, 16) : this.curve.one;
        this.t = t && new $22ilA(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
$fGyu9($e8daa72f917141c2$var$Point, $bzElR.BasePoint);
$e8daa72f917141c2$var$EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return $e8daa72f917141c2$var$Point.fromJSON(this, obj);
};
$e8daa72f917141c2$var$EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new $e8daa72f917141c2$var$Point(this, x, y, z, t);
};
$e8daa72f917141c2$var$Point.fromJSON = function fromJSON(curve, obj) {
    return new $e8daa72f917141c2$var$Point(curve, obj[0], obj[1], obj[2]);
};
$e8daa72f917141c2$var$Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
$e8daa72f917141c2$var$Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
$e8daa72f917141c2$var$Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$e8daa72f917141c2$var$Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
$e8daa72f917141c2$var$Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
$e8daa72f917141c2$var$Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
$e8daa72f917141c2$var$Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
$e8daa72f917141c2$var$Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
$e8daa72f917141c2$var$Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
$e8daa72f917141c2$var$Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
$e8daa72f917141c2$var$Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
$e8daa72f917141c2$var$Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
$e8daa72f917141c2$var$Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
$e8daa72f917141c2$var$Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
$e8daa72f917141c2$var$Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
$e8daa72f917141c2$var$Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
$e8daa72f917141c2$var$Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
$e8daa72f917141c2$var$Point.prototype.toP = $e8daa72f917141c2$var$Point.prototype.normalize;
$e8daa72f917141c2$var$Point.prototype.mixedAdd = $e8daa72f917141c2$var$Point.prototype.add;

});


parcelRequire.register("eOn8P", function(module, exports) {
'use strict';
var $ac87af97ae1015b0$var$curves = module.exports;

var $1G1dM = parcelRequire("1G1dM");

var $bTRiI = parcelRequire("bTRiI");

var $lxDwz = parcelRequire("lxDwz");
var $ac87af97ae1015b0$var$assert = $lxDwz.assert;
function $ac87af97ae1015b0$var$PresetCurve(options) {
    if (options.type === 'short') this.curve = new $bTRiI.short(options);
    else if (options.type === 'edwards') this.curve = new $bTRiI.edwards(options);
    else this.curve = new $bTRiI.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    $ac87af97ae1015b0$var$assert(this.g.validate(), 'Invalid curve');
    $ac87af97ae1015b0$var$assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
$ac87af97ae1015b0$var$curves.PresetCurve = $ac87af97ae1015b0$var$PresetCurve;
function $ac87af97ae1015b0$var$defineCurve(name, options) {
    Object.defineProperty($ac87af97ae1015b0$var$curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve = new $ac87af97ae1015b0$var$PresetCurve(options);
            Object.defineProperty($ac87af97ae1015b0$var$curves, name, {
                configurable: true,
                enumerable: true,
                value: curve
            });
            return curve;
        }
    });
}
$ac87af97ae1015b0$var$defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: $1G1dM.sha256,
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811', 
    ]
});
$ac87af97ae1015b0$var$defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: $1G1dM.sha256,
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34', 
    ]
});
$ac87af97ae1015b0$var$defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: $1G1dM.sha256,
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5', 
    ]
});
$ac87af97ae1015b0$var$defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: $1G1dM.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
$ac87af97ae1015b0$var$defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: $1G1dM.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
$ac87af97ae1015b0$var$defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: $1G1dM.sha256,
    gRed: false,
    g: [
        '9', 
    ]
});
$ac87af97ae1015b0$var$defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: $1G1dM.sha256,
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658', 
    ]
});
var $ac87af97ae1015b0$var$pre;

try {
    $ac87af97ae1015b0$var$pre = (parcelRequire("bQU0N"));
} catch (e) {
    $ac87af97ae1015b0$var$pre = undefined;
}
$ac87af97ae1015b0$var$defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: $1G1dM.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }, 
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        $ac87af97ae1015b0$var$pre, 
    ]
});

});
parcelRequire.register("1G1dM", function(module, exports) {
var $138aa92f03ef1acc$var$hash = module.exports;

$138aa92f03ef1acc$var$hash.utils = (parcelRequire("fQOLg"));

$138aa92f03ef1acc$var$hash.common = (parcelRequire("4gLLq"));

$138aa92f03ef1acc$var$hash.sha = (parcelRequire("4cnC2"));

$138aa92f03ef1acc$var$hash.ripemd = (parcelRequire("4ABNH"));

$138aa92f03ef1acc$var$hash.hmac = (parcelRequire("10loe"));
// Proxy hash functions to the main object
$138aa92f03ef1acc$var$hash.sha1 = $138aa92f03ef1acc$var$hash.sha.sha1;
$138aa92f03ef1acc$var$hash.sha256 = $138aa92f03ef1acc$var$hash.sha.sha256;
$138aa92f03ef1acc$var$hash.sha224 = $138aa92f03ef1acc$var$hash.sha.sha224;
$138aa92f03ef1acc$var$hash.sha384 = $138aa92f03ef1acc$var$hash.sha.sha384;
$138aa92f03ef1acc$var$hash.sha512 = $138aa92f03ef1acc$var$hash.sha.sha512;
$138aa92f03ef1acc$var$hash.ripemd160 = $138aa92f03ef1acc$var$hash.ripemd.ripemd160;

});
parcelRequire.register("fQOLg", function(module, exports) {

$parcel$export(module.exports, "inherits", () => $b8a316789cea8afe$export$69f1b2dcda23c5f8, (v) => $b8a316789cea8afe$export$69f1b2dcda23c5f8 = v);
$parcel$export(module.exports, "toArray", () => $b8a316789cea8afe$export$45b10814cc054894, (v) => $b8a316789cea8afe$export$45b10814cc054894 = v);
$parcel$export(module.exports, "toHex", () => $b8a316789cea8afe$export$7ea66e3774a60b67, (v) => $b8a316789cea8afe$export$7ea66e3774a60b67 = v);
$parcel$export(module.exports, "htonl", () => $b8a316789cea8afe$export$34a52f00f601f6f1, (v) => $b8a316789cea8afe$export$34a52f00f601f6f1 = v);
$parcel$export(module.exports, "toHex32", () => $b8a316789cea8afe$export$812b0cbd5e8a72ab, (v) => $b8a316789cea8afe$export$812b0cbd5e8a72ab = v);
$parcel$export(module.exports, "zero2", () => $b8a316789cea8afe$export$f24f9e11d63bb314, (v) => $b8a316789cea8afe$export$f24f9e11d63bb314 = v);
$parcel$export(module.exports, "zero8", () => $b8a316789cea8afe$export$b71357c7e07ca1f1, (v) => $b8a316789cea8afe$export$b71357c7e07ca1f1 = v);
$parcel$export(module.exports, "join32", () => $b8a316789cea8afe$export$2e58a4b541fdcbe8, (v) => $b8a316789cea8afe$export$2e58a4b541fdcbe8 = v);
$parcel$export(module.exports, "split32", () => $b8a316789cea8afe$export$183b950bde9faab8, (v) => $b8a316789cea8afe$export$183b950bde9faab8 = v);
$parcel$export(module.exports, "rotr32", () => $b8a316789cea8afe$export$4785c77169fea59e, (v) => $b8a316789cea8afe$export$4785c77169fea59e = v);
$parcel$export(module.exports, "rotl32", () => $b8a316789cea8afe$export$242a185dfcffac5b, (v) => $b8a316789cea8afe$export$242a185dfcffac5b = v);
$parcel$export(module.exports, "sum32", () => $b8a316789cea8afe$export$58c04ae0ae31877d, (v) => $b8a316789cea8afe$export$58c04ae0ae31877d = v);
$parcel$export(module.exports, "sum32_3", () => $b8a316789cea8afe$export$d058ca695f8c6f11, (v) => $b8a316789cea8afe$export$d058ca695f8c6f11 = v);
$parcel$export(module.exports, "sum32_4", () => $b8a316789cea8afe$export$a1efd7fc3e986367, (v) => $b8a316789cea8afe$export$a1efd7fc3e986367 = v);
$parcel$export(module.exports, "sum32_5", () => $b8a316789cea8afe$export$bbfea4a2b5abaab4, (v) => $b8a316789cea8afe$export$bbfea4a2b5abaab4 = v);
$parcel$export(module.exports, "sum64", () => $b8a316789cea8afe$export$97ad4afc7de86152, (v) => $b8a316789cea8afe$export$97ad4afc7de86152 = v);
$parcel$export(module.exports, "sum64_hi", () => $b8a316789cea8afe$export$ce4673d9a79f6a4b, (v) => $b8a316789cea8afe$export$ce4673d9a79f6a4b = v);
$parcel$export(module.exports, "sum64_lo", () => $b8a316789cea8afe$export$786cc99fc6eedc0b, (v) => $b8a316789cea8afe$export$786cc99fc6eedc0b = v);
$parcel$export(module.exports, "sum64_4_hi", () => $b8a316789cea8afe$export$45c59b9a1848dd0, (v) => $b8a316789cea8afe$export$45c59b9a1848dd0 = v);
$parcel$export(module.exports, "sum64_4_lo", () => $b8a316789cea8afe$export$50d8f613e76d3034, (v) => $b8a316789cea8afe$export$50d8f613e76d3034 = v);
$parcel$export(module.exports, "sum64_5_hi", () => $b8a316789cea8afe$export$b8e83683c60ee162, (v) => $b8a316789cea8afe$export$b8e83683c60ee162 = v);
$parcel$export(module.exports, "sum64_5_lo", () => $b8a316789cea8afe$export$aeeb51790d1bcc4a, (v) => $b8a316789cea8afe$export$aeeb51790d1bcc4a = v);
$parcel$export(module.exports, "rotr64_hi", () => $b8a316789cea8afe$export$bb7c616f719ad9c, (v) => $b8a316789cea8afe$export$bb7c616f719ad9c = v);
$parcel$export(module.exports, "rotr64_lo", () => $b8a316789cea8afe$export$4d63290824f9d7df, (v) => $b8a316789cea8afe$export$4d63290824f9d7df = v);
$parcel$export(module.exports, "shr64_hi", () => $b8a316789cea8afe$export$2f64ceb90ef28ea1, (v) => $b8a316789cea8afe$export$2f64ceb90ef28ea1 = v);
$parcel$export(module.exports, "shr64_lo", () => $b8a316789cea8afe$export$8d2089d465f6d10d, (v) => $b8a316789cea8afe$export$8d2089d465f6d10d = v);
var $b8a316789cea8afe$export$69f1b2dcda23c5f8;
var $b8a316789cea8afe$export$45b10814cc054894;
var $b8a316789cea8afe$export$7ea66e3774a60b67;
var $b8a316789cea8afe$export$34a52f00f601f6f1;
var $b8a316789cea8afe$export$812b0cbd5e8a72ab;
var $b8a316789cea8afe$export$f24f9e11d63bb314;
var $b8a316789cea8afe$export$b71357c7e07ca1f1;
var $b8a316789cea8afe$export$2e58a4b541fdcbe8;
var $b8a316789cea8afe$export$183b950bde9faab8;
var $b8a316789cea8afe$export$4785c77169fea59e;
var $b8a316789cea8afe$export$242a185dfcffac5b;
var $b8a316789cea8afe$export$58c04ae0ae31877d;
var $b8a316789cea8afe$export$d058ca695f8c6f11;
var $b8a316789cea8afe$export$a1efd7fc3e986367;
var $b8a316789cea8afe$export$bbfea4a2b5abaab4;
var $b8a316789cea8afe$export$97ad4afc7de86152;
var $b8a316789cea8afe$export$ce4673d9a79f6a4b;
var $b8a316789cea8afe$export$786cc99fc6eedc0b;
var $b8a316789cea8afe$export$45c59b9a1848dd0;
var $b8a316789cea8afe$export$50d8f613e76d3034;
var $b8a316789cea8afe$export$b8e83683c60ee162;
var $b8a316789cea8afe$export$aeeb51790d1bcc4a;
var $b8a316789cea8afe$export$bb7c616f719ad9c;
var $b8a316789cea8afe$export$4d63290824f9d7df;
var $b8a316789cea8afe$export$2f64ceb90ef28ea1;
var $b8a316789cea8afe$export$8d2089d465f6d10d;
'use strict';

var $adLNa = parcelRequire("adLNa");

var $fGyu9 = parcelRequire("fGyu9");
$b8a316789cea8afe$export$69f1b2dcda23c5f8 = $fGyu9;
function $b8a316789cea8afe$var$isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 64512) !== 55296) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 64512) === 56320;
}
function $b8a316789cea8afe$var$toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === 'string') {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if ($b8a316789cea8afe$var$isSurrogatePair(msg, i)) {
                    c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0) msg = '0' + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
$b8a316789cea8afe$export$45b10814cc054894 = $b8a316789cea8afe$var$toArray;
function $b8a316789cea8afe$var$toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += $b8a316789cea8afe$var$zero2(msg[i].toString(16));
    return res;
}
$b8a316789cea8afe$export$7ea66e3774a60b67 = $b8a316789cea8afe$var$toHex;
function $b8a316789cea8afe$var$htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
}
$b8a316789cea8afe$export$34a52f00f601f6f1 = $b8a316789cea8afe$var$htonl;
function $b8a316789cea8afe$var$toHex32(msg, endian) {
    var res = '';
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === 'little') w = $b8a316789cea8afe$var$htonl(w);
        res += $b8a316789cea8afe$var$zero8(w.toString(16));
    }
    return res;
}
$b8a316789cea8afe$export$812b0cbd5e8a72ab = $b8a316789cea8afe$var$toHex32;
function $b8a316789cea8afe$var$zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
$b8a316789cea8afe$export$f24f9e11d63bb314 = $b8a316789cea8afe$var$zero2;
function $b8a316789cea8afe$var$zero8(word) {
    if (word.length === 7) return '0' + word;
    else if (word.length === 6) return '00' + word;
    else if (word.length === 5) return '000' + word;
    else if (word.length === 4) return '0000' + word;
    else if (word.length === 3) return '00000' + word;
    else if (word.length === 2) return '000000' + word;
    else if (word.length === 1) return '0000000' + word;
    else return word;
}
$b8a316789cea8afe$export$b71357c7e07ca1f1 = $b8a316789cea8afe$var$zero8;
function $b8a316789cea8afe$var$join32(msg, start, end, endian) {
    var len = end - start;
    $adLNa(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
$b8a316789cea8afe$export$2e58a4b541fdcbe8 = $b8a316789cea8afe$var$join32;
function $b8a316789cea8afe$var$split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 255;
            res[k + 2] = m >>> 8 & 255;
            res[k + 3] = m & 255;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 255;
            res[k + 1] = m >>> 8 & 255;
            res[k] = m & 255;
        }
    }
    return res;
}
$b8a316789cea8afe$export$183b950bde9faab8 = $b8a316789cea8afe$var$split32;
function $b8a316789cea8afe$var$rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
$b8a316789cea8afe$export$4785c77169fea59e = $b8a316789cea8afe$var$rotr32;
function $b8a316789cea8afe$var$rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
$b8a316789cea8afe$export$242a185dfcffac5b = $b8a316789cea8afe$var$rotl32;
function $b8a316789cea8afe$var$sum32(a, b) {
    return a + b >>> 0;
}
$b8a316789cea8afe$export$58c04ae0ae31877d = $b8a316789cea8afe$var$sum32;
function $b8a316789cea8afe$var$sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
$b8a316789cea8afe$export$d058ca695f8c6f11 = $b8a316789cea8afe$var$sum32_3;
function $b8a316789cea8afe$var$sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
$b8a316789cea8afe$export$a1efd7fc3e986367 = $b8a316789cea8afe$var$sum32_4;
function $b8a316789cea8afe$var$sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
$b8a316789cea8afe$export$bbfea4a2b5abaab4 = $b8a316789cea8afe$var$sum32_5;
function $b8a316789cea8afe$var$sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
$b8a316789cea8afe$export$97ad4afc7de86152 = $b8a316789cea8afe$var$sum64;
function $b8a316789cea8afe$var$sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
$b8a316789cea8afe$export$ce4673d9a79f6a4b = $b8a316789cea8afe$var$sum64_hi;
function $b8a316789cea8afe$var$sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
$b8a316789cea8afe$export$786cc99fc6eedc0b = $b8a316789cea8afe$var$sum64_lo;
function $b8a316789cea8afe$var$sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
$b8a316789cea8afe$export$45c59b9a1848dd0 = $b8a316789cea8afe$var$sum64_4_hi;
function $b8a316789cea8afe$var$sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
$b8a316789cea8afe$export$50d8f613e76d3034 = $b8a316789cea8afe$var$sum64_4_lo;
function $b8a316789cea8afe$var$sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
$b8a316789cea8afe$export$b8e83683c60ee162 = $b8a316789cea8afe$var$sum64_5_hi;
function $b8a316789cea8afe$var$sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
$b8a316789cea8afe$export$aeeb51790d1bcc4a = $b8a316789cea8afe$var$sum64_5_lo;
function $b8a316789cea8afe$var$rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
$b8a316789cea8afe$export$bb7c616f719ad9c = $b8a316789cea8afe$var$rotr64_hi;
function $b8a316789cea8afe$var$rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$b8a316789cea8afe$export$4d63290824f9d7df = $b8a316789cea8afe$var$rotr64_lo;
function $b8a316789cea8afe$var$shr64_hi(ah, al, num) {
    return ah >>> num;
}
$b8a316789cea8afe$export$2f64ceb90ef28ea1 = $b8a316789cea8afe$var$shr64_hi;
function $b8a316789cea8afe$var$shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
$b8a316789cea8afe$export$8d2089d465f6d10d = $b8a316789cea8afe$var$shr64_lo;

});

parcelRequire.register("4gLLq", function(module, exports) {

$parcel$export(module.exports, "BlockHash", () => $31bdb4f1c56df241$export$8687658379b577e6, (v) => $31bdb4f1c56df241$export$8687658379b577e6 = v);
var $31bdb4f1c56df241$export$8687658379b577e6;
'use strict';

var $fQOLg = parcelRequire("fQOLg");

var $adLNa = parcelRequire("adLNa");
function $31bdb4f1c56df241$var$BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
$31bdb4f1c56df241$export$8687658379b577e6 = $31bdb4f1c56df241$var$BlockHash;
$31bdb4f1c56df241$var$BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = $fQOLg.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = $fQOLg.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
$31bdb4f1c56df241$var$BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    $adLNa(this.pending === null);
    return this._digest(enc);
};
$31bdb4f1c56df241$var$BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
    } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

});

parcelRequire.register("4cnC2", function(module, exports) {

$parcel$export(module.exports, "sha1", () => $30ea995d71917631$export$5091bdda49ba90f5, (v) => $30ea995d71917631$export$5091bdda49ba90f5 = v);
$parcel$export(module.exports, "sha224", () => $30ea995d71917631$export$97b70509d4e397ea, (v) => $30ea995d71917631$export$97b70509d4e397ea = v);
$parcel$export(module.exports, "sha256", () => $30ea995d71917631$export$bced8d2aada2d1c9, (v) => $30ea995d71917631$export$bced8d2aada2d1c9 = v);
$parcel$export(module.exports, "sha384", () => $30ea995d71917631$export$612d47d55dedde45, (v) => $30ea995d71917631$export$612d47d55dedde45 = v);
$parcel$export(module.exports, "sha512", () => $30ea995d71917631$export$a888d2532e6dc7bb, (v) => $30ea995d71917631$export$a888d2532e6dc7bb = v);
var $30ea995d71917631$export$5091bdda49ba90f5;
var $30ea995d71917631$export$97b70509d4e397ea;
var $30ea995d71917631$export$bced8d2aada2d1c9;
var $30ea995d71917631$export$612d47d55dedde45;
var $30ea995d71917631$export$a888d2532e6dc7bb;
'use strict';

$30ea995d71917631$export$5091bdda49ba90f5 = (parcelRequire("bOKlG"));

$30ea995d71917631$export$97b70509d4e397ea = (parcelRequire("4NsKS"));

$30ea995d71917631$export$bced8d2aada2d1c9 = (parcelRequire("c587P"));

$30ea995d71917631$export$612d47d55dedde45 = (parcelRequire("atDny"));

$30ea995d71917631$export$a888d2532e6dc7bb = (parcelRequire("kp1pz"));

});
parcelRequire.register("bOKlG", function(module, exports) {
'use strict';

var $fQOLg = parcelRequire("fQOLg");

var $4gLLq = parcelRequire("4gLLq");

var $aLLjv = parcelRequire("aLLjv");
var $89a85116bdbd1ffa$var$rotl32 = $fQOLg.rotl32;
var $89a85116bdbd1ffa$var$sum32 = $fQOLg.sum32;
var $89a85116bdbd1ffa$var$sum32_5 = $fQOLg.sum32_5;
var $89a85116bdbd1ffa$var$ft_1 = $aLLjv.ft_1;
var $89a85116bdbd1ffa$var$BlockHash = $4gLLq.BlockHash;
var $89a85116bdbd1ffa$var$sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
];
function $89a85116bdbd1ffa$var$SHA1() {
    if (!(this instanceof $89a85116bdbd1ffa$var$SHA1)) return new $89a85116bdbd1ffa$var$SHA1();
    $89a85116bdbd1ffa$var$BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.W = new Array(80);
}
$fQOLg.inherits($89a85116bdbd1ffa$var$SHA1, $89a85116bdbd1ffa$var$BlockHash);
module.exports = $89a85116bdbd1ffa$var$SHA1;
$89a85116bdbd1ffa$var$SHA1.blockSize = 512;
$89a85116bdbd1ffa$var$SHA1.outSize = 160;
$89a85116bdbd1ffa$var$SHA1.hmacStrength = 80;
$89a85116bdbd1ffa$var$SHA1.padLength = 64;
$89a85116bdbd1ffa$var$SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $89a85116bdbd1ffa$var$rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = $89a85116bdbd1ffa$var$sum32_5($89a85116bdbd1ffa$var$rotl32(a, 5), $89a85116bdbd1ffa$var$ft_1(s, b, c, d), e, W[i], $89a85116bdbd1ffa$var$sha1_K[s]);
        e = d;
        d = c;
        c = $89a85116bdbd1ffa$var$rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = $89a85116bdbd1ffa$var$sum32(this.h[0], a);
    this.h[1] = $89a85116bdbd1ffa$var$sum32(this.h[1], b);
    this.h[2] = $89a85116bdbd1ffa$var$sum32(this.h[2], c);
    this.h[3] = $89a85116bdbd1ffa$var$sum32(this.h[3], d);
    this.h[4] = $89a85116bdbd1ffa$var$sum32(this.h[4], e);
};
$89a85116bdbd1ffa$var$SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $fQOLg.toHex32(this.h, 'big');
    else return $fQOLg.split32(this.h, 'big');
};

});
parcelRequire.register("aLLjv", function(module, exports) {

$parcel$export(module.exports, "ft_1", () => $7d72fea722f8344c$export$5a92649d7ddb9f63, (v) => $7d72fea722f8344c$export$5a92649d7ddb9f63 = v);
$parcel$export(module.exports, "ch32", () => $7d72fea722f8344c$export$c6d0d020c3a6269, (v) => $7d72fea722f8344c$export$c6d0d020c3a6269 = v);
$parcel$export(module.exports, "maj32", () => $7d72fea722f8344c$export$eb90c27fca05f956, (v) => $7d72fea722f8344c$export$eb90c27fca05f956 = v);
$parcel$export(module.exports, "s0_256", () => $7d72fea722f8344c$export$14a4a98e063b1999, (v) => $7d72fea722f8344c$export$14a4a98e063b1999 = v);
$parcel$export(module.exports, "s1_256", () => $7d72fea722f8344c$export$d20cecfa1564c686, (v) => $7d72fea722f8344c$export$d20cecfa1564c686 = v);
$parcel$export(module.exports, "g0_256", () => $7d72fea722f8344c$export$44fd472a12fc6db, (v) => $7d72fea722f8344c$export$44fd472a12fc6db = v);
$parcel$export(module.exports, "g1_256", () => $7d72fea722f8344c$export$1ed238bb6ea1dd47, (v) => $7d72fea722f8344c$export$1ed238bb6ea1dd47 = v);
var $7d72fea722f8344c$export$5a92649d7ddb9f63;
var $7d72fea722f8344c$export$c6d0d020c3a6269;
var $7d72fea722f8344c$export$eb90c27fca05f956;
var $7d72fea722f8344c$export$cc992891a14496a1;
var $7d72fea722f8344c$export$14a4a98e063b1999;
var $7d72fea722f8344c$export$d20cecfa1564c686;
var $7d72fea722f8344c$export$44fd472a12fc6db;
var $7d72fea722f8344c$export$1ed238bb6ea1dd47;
'use strict';

var $fQOLg = parcelRequire("fQOLg");
var $7d72fea722f8344c$var$rotr32 = $fQOLg.rotr32;
function $7d72fea722f8344c$var$ft_1(s, x, y, z) {
    if (s === 0) return $7d72fea722f8344c$var$ch32(x, y, z);
    if (s === 1 || s === 3) return $7d72fea722f8344c$var$p32(x, y, z);
    if (s === 2) return $7d72fea722f8344c$var$maj32(x, y, z);
}
$7d72fea722f8344c$export$5a92649d7ddb9f63 = $7d72fea722f8344c$var$ft_1;
function $7d72fea722f8344c$var$ch32(x, y, z) {
    return x & y ^ ~x & z;
}
$7d72fea722f8344c$export$c6d0d020c3a6269 = $7d72fea722f8344c$var$ch32;
function $7d72fea722f8344c$var$maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
$7d72fea722f8344c$export$eb90c27fca05f956 = $7d72fea722f8344c$var$maj32;
function $7d72fea722f8344c$var$p32(x, y, z) {
    return x ^ y ^ z;
}
$7d72fea722f8344c$export$cc992891a14496a1 = $7d72fea722f8344c$var$p32;
function $7d72fea722f8344c$var$s0_256(x) {
    return $7d72fea722f8344c$var$rotr32(x, 2) ^ $7d72fea722f8344c$var$rotr32(x, 13) ^ $7d72fea722f8344c$var$rotr32(x, 22);
}
$7d72fea722f8344c$export$14a4a98e063b1999 = $7d72fea722f8344c$var$s0_256;
function $7d72fea722f8344c$var$s1_256(x) {
    return $7d72fea722f8344c$var$rotr32(x, 6) ^ $7d72fea722f8344c$var$rotr32(x, 11) ^ $7d72fea722f8344c$var$rotr32(x, 25);
}
$7d72fea722f8344c$export$d20cecfa1564c686 = $7d72fea722f8344c$var$s1_256;
function $7d72fea722f8344c$var$g0_256(x) {
    return $7d72fea722f8344c$var$rotr32(x, 7) ^ $7d72fea722f8344c$var$rotr32(x, 18) ^ x >>> 3;
}
$7d72fea722f8344c$export$44fd472a12fc6db = $7d72fea722f8344c$var$g0_256;
function $7d72fea722f8344c$var$g1_256(x) {
    return $7d72fea722f8344c$var$rotr32(x, 17) ^ $7d72fea722f8344c$var$rotr32(x, 19) ^ x >>> 10;
}
$7d72fea722f8344c$export$1ed238bb6ea1dd47 = $7d72fea722f8344c$var$g1_256;

});


parcelRequire.register("4NsKS", function(module, exports) {
'use strict';

var $fQOLg = parcelRequire("fQOLg");

var $c587P = parcelRequire("c587P");
function $37e20b31001e1462$var$SHA224() {
    if (!(this instanceof $37e20b31001e1462$var$SHA224)) return new $37e20b31001e1462$var$SHA224();
    $c587P.call(this);
    this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
    ];
}
$fQOLg.inherits($37e20b31001e1462$var$SHA224, $c587P);
module.exports = $37e20b31001e1462$var$SHA224;
$37e20b31001e1462$var$SHA224.blockSize = 512;
$37e20b31001e1462$var$SHA224.outSize = 224;
$37e20b31001e1462$var$SHA224.hmacStrength = 192;
$37e20b31001e1462$var$SHA224.padLength = 64;
$37e20b31001e1462$var$SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex') return $fQOLg.toHex32(this.h.slice(0, 7), 'big');
    else return $fQOLg.split32(this.h.slice(0, 7), 'big');
};

});
parcelRequire.register("c587P", function(module, exports) {
'use strict';

var $fQOLg = parcelRequire("fQOLg");

var $4gLLq = parcelRequire("4gLLq");

var $aLLjv = parcelRequire("aLLjv");

var $adLNa = parcelRequire("adLNa");
var $8cbc4131a78189e1$var$sum32 = $fQOLg.sum32;
var $8cbc4131a78189e1$var$sum32_4 = $fQOLg.sum32_4;
var $8cbc4131a78189e1$var$sum32_5 = $fQOLg.sum32_5;
var $8cbc4131a78189e1$var$ch32 = $aLLjv.ch32;
var $8cbc4131a78189e1$var$maj32 = $aLLjv.maj32;
var $8cbc4131a78189e1$var$s0_256 = $aLLjv.s0_256;
var $8cbc4131a78189e1$var$s1_256 = $aLLjv.s1_256;
var $8cbc4131a78189e1$var$g0_256 = $aLLjv.g0_256;
var $8cbc4131a78189e1$var$g1_256 = $aLLjv.g1_256;
var $8cbc4131a78189e1$var$BlockHash = $4gLLq.BlockHash;
var $8cbc4131a78189e1$var$sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
function $8cbc4131a78189e1$var$SHA256() {
    if (!(this instanceof $8cbc4131a78189e1$var$SHA256)) return new $8cbc4131a78189e1$var$SHA256();
    $8cbc4131a78189e1$var$BlockHash.call(this);
    this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
    ];
    this.k = $8cbc4131a78189e1$var$sha256_K;
    this.W = new Array(64);
}
$fQOLg.inherits($8cbc4131a78189e1$var$SHA256, $8cbc4131a78189e1$var$BlockHash);
module.exports = $8cbc4131a78189e1$var$SHA256;
$8cbc4131a78189e1$var$SHA256.blockSize = 512;
$8cbc4131a78189e1$var$SHA256.outSize = 256;
$8cbc4131a78189e1$var$SHA256.hmacStrength = 192;
$8cbc4131a78189e1$var$SHA256.padLength = 64;
$8cbc4131a78189e1$var$SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = $8cbc4131a78189e1$var$sum32_4($8cbc4131a78189e1$var$g1_256(W[i - 2]), W[i - 7], $8cbc4131a78189e1$var$g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    $adLNa(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = $8cbc4131a78189e1$var$sum32_5(h, $8cbc4131a78189e1$var$s1_256(e), $8cbc4131a78189e1$var$ch32(e, f, g), this.k[i], W[i]);
        var T2 = $8cbc4131a78189e1$var$sum32($8cbc4131a78189e1$var$s0_256(a), $8cbc4131a78189e1$var$maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = $8cbc4131a78189e1$var$sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = $8cbc4131a78189e1$var$sum32(T1, T2);
    }
    this.h[0] = $8cbc4131a78189e1$var$sum32(this.h[0], a);
    this.h[1] = $8cbc4131a78189e1$var$sum32(this.h[1], b);
    this.h[2] = $8cbc4131a78189e1$var$sum32(this.h[2], c);
    this.h[3] = $8cbc4131a78189e1$var$sum32(this.h[3], d);
    this.h[4] = $8cbc4131a78189e1$var$sum32(this.h[4], e);
    this.h[5] = $8cbc4131a78189e1$var$sum32(this.h[5], f);
    this.h[6] = $8cbc4131a78189e1$var$sum32(this.h[6], g);
    this.h[7] = $8cbc4131a78189e1$var$sum32(this.h[7], h);
};
$8cbc4131a78189e1$var$SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $fQOLg.toHex32(this.h, 'big');
    else return $fQOLg.split32(this.h, 'big');
};

});


parcelRequire.register("atDny", function(module, exports) {
'use strict';

var $fQOLg = parcelRequire("fQOLg");

var $kp1pz = parcelRequire("kp1pz");
function $7a0b28a231c91ef9$var$SHA384() {
    if (!(this instanceof $7a0b28a231c91ef9$var$SHA384)) return new $7a0b28a231c91ef9$var$SHA384();
    $kp1pz.call(this);
    this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
    ];
}
$fQOLg.inherits($7a0b28a231c91ef9$var$SHA384, $kp1pz);
module.exports = $7a0b28a231c91ef9$var$SHA384;
$7a0b28a231c91ef9$var$SHA384.blockSize = 1024;
$7a0b28a231c91ef9$var$SHA384.outSize = 384;
$7a0b28a231c91ef9$var$SHA384.hmacStrength = 192;
$7a0b28a231c91ef9$var$SHA384.padLength = 128;
$7a0b28a231c91ef9$var$SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $fQOLg.toHex32(this.h.slice(0, 12), 'big');
    else return $fQOLg.split32(this.h.slice(0, 12), 'big');
};

});
parcelRequire.register("kp1pz", function(module, exports) {
'use strict';

var $fQOLg = parcelRequire("fQOLg");

var $4gLLq = parcelRequire("4gLLq");

var $adLNa = parcelRequire("adLNa");
var $eda73cbfe0369d61$var$rotr64_hi = $fQOLg.rotr64_hi;
var $eda73cbfe0369d61$var$rotr64_lo = $fQOLg.rotr64_lo;
var $eda73cbfe0369d61$var$shr64_hi = $fQOLg.shr64_hi;
var $eda73cbfe0369d61$var$shr64_lo = $fQOLg.shr64_lo;
var $eda73cbfe0369d61$var$sum64 = $fQOLg.sum64;
var $eda73cbfe0369d61$var$sum64_hi = $fQOLg.sum64_hi;
var $eda73cbfe0369d61$var$sum64_lo = $fQOLg.sum64_lo;
var $eda73cbfe0369d61$var$sum64_4_hi = $fQOLg.sum64_4_hi;
var $eda73cbfe0369d61$var$sum64_4_lo = $fQOLg.sum64_4_lo;
var $eda73cbfe0369d61$var$sum64_5_hi = $fQOLg.sum64_5_hi;
var $eda73cbfe0369d61$var$sum64_5_lo = $fQOLg.sum64_5_lo;
var $eda73cbfe0369d61$var$BlockHash = $4gLLq.BlockHash;
var $eda73cbfe0369d61$var$sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
function $eda73cbfe0369d61$var$SHA512() {
    if (!(this instanceof $eda73cbfe0369d61$var$SHA512)) return new $eda73cbfe0369d61$var$SHA512();
    $eda73cbfe0369d61$var$BlockHash.call(this);
    this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
    ];
    this.k = $eda73cbfe0369d61$var$sha512_K;
    this.W = new Array(160);
}
$fQOLg.inherits($eda73cbfe0369d61$var$SHA512, $eda73cbfe0369d61$var$BlockHash);
module.exports = $eda73cbfe0369d61$var$SHA512;
$eda73cbfe0369d61$var$SHA512.blockSize = 1024;
$eda73cbfe0369d61$var$SHA512.outSize = 512;
$eda73cbfe0369d61$var$SHA512.hmacStrength = 192;
$eda73cbfe0369d61$var$SHA512.padLength = 128;
$eda73cbfe0369d61$var$SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = $eda73cbfe0369d61$var$g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = $eda73cbfe0369d61$var$g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = $eda73cbfe0369d61$var$g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = $eda73cbfe0369d61$var$g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = $eda73cbfe0369d61$var$sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = $eda73cbfe0369d61$var$sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
$eda73cbfe0369d61$var$SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    $adLNa(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = $eda73cbfe0369d61$var$s1_512_hi(eh, el);
        var c1_lo = $eda73cbfe0369d61$var$s1_512_lo(eh, el);
        var c2_hi = $eda73cbfe0369d61$var$ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = $eda73cbfe0369d61$var$ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = $eda73cbfe0369d61$var$sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = $eda73cbfe0369d61$var$sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = $eda73cbfe0369d61$var$s0_512_hi(ah, al);
        c0_lo = $eda73cbfe0369d61$var$s0_512_lo(ah, al);
        c1_hi = $eda73cbfe0369d61$var$maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = $eda73cbfe0369d61$var$maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = $eda73cbfe0369d61$var$sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = $eda73cbfe0369d61$var$sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = $eda73cbfe0369d61$var$sum64_hi(dh, dl, T1_hi, T1_lo);
        el = $eda73cbfe0369d61$var$sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = $eda73cbfe0369d61$var$sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = $eda73cbfe0369d61$var$sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    $eda73cbfe0369d61$var$sum64(this.h, 0, ah, al);
    $eda73cbfe0369d61$var$sum64(this.h, 2, bh, bl);
    $eda73cbfe0369d61$var$sum64(this.h, 4, ch, cl);
    $eda73cbfe0369d61$var$sum64(this.h, 6, dh, dl);
    $eda73cbfe0369d61$var$sum64(this.h, 8, eh, el);
    $eda73cbfe0369d61$var$sum64(this.h, 10, fh, fl);
    $eda73cbfe0369d61$var$sum64(this.h, 12, gh, gl);
    $eda73cbfe0369d61$var$sum64(this.h, 14, hh, hl);
};
$eda73cbfe0369d61$var$SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $fQOLg.toHex32(this.h, 'big');
    else return $fQOLg.split32(this.h, 'big');
};
function $eda73cbfe0369d61$var$ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$s0_512_hi(xh, xl) {
    var c0_hi = $eda73cbfe0369d61$var$rotr64_hi(xh, xl, 28);
    var c1_hi = $eda73cbfe0369d61$var$rotr64_hi(xl, xh, 2); // 34
    var c2_hi = $eda73cbfe0369d61$var$rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$s0_512_lo(xh, xl) {
    var c0_lo = $eda73cbfe0369d61$var$rotr64_lo(xh, xl, 28);
    var c1_lo = $eda73cbfe0369d61$var$rotr64_lo(xl, xh, 2); // 34
    var c2_lo = $eda73cbfe0369d61$var$rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$s1_512_hi(xh, xl) {
    var c0_hi = $eda73cbfe0369d61$var$rotr64_hi(xh, xl, 14);
    var c1_hi = $eda73cbfe0369d61$var$rotr64_hi(xh, xl, 18);
    var c2_hi = $eda73cbfe0369d61$var$rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$s1_512_lo(xh, xl) {
    var c0_lo = $eda73cbfe0369d61$var$rotr64_lo(xh, xl, 14);
    var c1_lo = $eda73cbfe0369d61$var$rotr64_lo(xh, xl, 18);
    var c2_lo = $eda73cbfe0369d61$var$rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$g0_512_hi(xh, xl) {
    var c0_hi = $eda73cbfe0369d61$var$rotr64_hi(xh, xl, 1);
    var c1_hi = $eda73cbfe0369d61$var$rotr64_hi(xh, xl, 8);
    var c2_hi = $eda73cbfe0369d61$var$shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$g0_512_lo(xh, xl) {
    var c0_lo = $eda73cbfe0369d61$var$rotr64_lo(xh, xl, 1);
    var c1_lo = $eda73cbfe0369d61$var$rotr64_lo(xh, xl, 8);
    var c2_lo = $eda73cbfe0369d61$var$shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$g1_512_hi(xh, xl) {
    var c0_hi = $eda73cbfe0369d61$var$rotr64_hi(xh, xl, 19);
    var c1_hi = $eda73cbfe0369d61$var$rotr64_hi(xl, xh, 29); // 61
    var c2_hi = $eda73cbfe0369d61$var$shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function $eda73cbfe0369d61$var$g1_512_lo(xh, xl) {
    var c0_lo = $eda73cbfe0369d61$var$rotr64_lo(xh, xl, 19);
    var c1_lo = $eda73cbfe0369d61$var$rotr64_lo(xl, xh, 29); // 61
    var c2_lo = $eda73cbfe0369d61$var$shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}

});



parcelRequire.register("4ABNH", function(module, exports) {

$parcel$export(module.exports, "ripemd160", () => $3577d8a30519a545$export$d1cea0ee4e3f0d3e, (v) => $3577d8a30519a545$export$d1cea0ee4e3f0d3e = v);
var $3577d8a30519a545$export$d1cea0ee4e3f0d3e;
'use strict';

var $fQOLg = parcelRequire("fQOLg");

var $4gLLq = parcelRequire("4gLLq");
var $3577d8a30519a545$var$rotl32 = $fQOLg.rotl32;
var $3577d8a30519a545$var$sum32 = $fQOLg.sum32;
var $3577d8a30519a545$var$sum32_3 = $fQOLg.sum32_3;
var $3577d8a30519a545$var$sum32_4 = $fQOLg.sum32_4;
var $3577d8a30519a545$var$BlockHash = $4gLLq.BlockHash;
function $3577d8a30519a545$var$RIPEMD160() {
    if (!(this instanceof $3577d8a30519a545$var$RIPEMD160)) return new $3577d8a30519a545$var$RIPEMD160();
    $3577d8a30519a545$var$BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.endian = 'little';
}
$fQOLg.inherits($3577d8a30519a545$var$RIPEMD160, $3577d8a30519a545$var$BlockHash);
$3577d8a30519a545$export$d1cea0ee4e3f0d3e = $3577d8a30519a545$var$RIPEMD160;
$3577d8a30519a545$var$RIPEMD160.blockSize = 512;
$3577d8a30519a545$var$RIPEMD160.outSize = 160;
$3577d8a30519a545$var$RIPEMD160.hmacStrength = 192;
$3577d8a30519a545$var$RIPEMD160.padLength = 64;
$3577d8a30519a545$var$RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = $3577d8a30519a545$var$sum32($3577d8a30519a545$var$rotl32($3577d8a30519a545$var$sum32_4(A, $3577d8a30519a545$var$f(j, B, C, D), msg[$3577d8a30519a545$var$r[j] + start], $3577d8a30519a545$var$K(j)), $3577d8a30519a545$var$s[j]), E);
        A = E;
        E = D;
        D = $3577d8a30519a545$var$rotl32(C, 10);
        C = B;
        B = T;
        T = $3577d8a30519a545$var$sum32($3577d8a30519a545$var$rotl32($3577d8a30519a545$var$sum32_4(Ah, $3577d8a30519a545$var$f(79 - j, Bh, Ch, Dh), msg[$3577d8a30519a545$var$rh[j] + start], $3577d8a30519a545$var$Kh(j)), $3577d8a30519a545$var$sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = $3577d8a30519a545$var$rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = $3577d8a30519a545$var$sum32_3(this.h[1], C, Dh);
    this.h[1] = $3577d8a30519a545$var$sum32_3(this.h[2], D, Eh);
    this.h[2] = $3577d8a30519a545$var$sum32_3(this.h[3], E, Ah);
    this.h[3] = $3577d8a30519a545$var$sum32_3(this.h[4], A, Bh);
    this.h[4] = $3577d8a30519a545$var$sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
$3577d8a30519a545$var$RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return $fQOLg.toHex32(this.h, 'little');
    else return $fQOLg.split32(this.h, 'little');
};
function $3577d8a30519a545$var$f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function $3577d8a30519a545$var$K(j) {
    if (j <= 15) return 0;
    else if (j <= 31) return 1518500249;
    else if (j <= 47) return 1859775393;
    else if (j <= 63) return 2400959708;
    else return 2840853838;
}
function $3577d8a30519a545$var$Kh(j) {
    if (j <= 15) return 1352829926;
    else if (j <= 31) return 1548603684;
    else if (j <= 47) return 1836072691;
    else if (j <= 63) return 2053994217;
    else return 0;
}
var $3577d8a30519a545$var$r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $3577d8a30519a545$var$rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $3577d8a30519a545$var$s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $3577d8a30519a545$var$sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

});

parcelRequire.register("10loe", function(module, exports) {
'use strict';

var $fQOLg = parcelRequire("fQOLg");

var $adLNa = parcelRequire("adLNa");
function $0bb662155a4da3d7$var$Hmac(hash, key, enc) {
    if (!(this instanceof $0bb662155a4da3d7$var$Hmac)) return new $0bb662155a4da3d7$var$Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init($fQOLg.toArray(key, enc));
}
module.exports = $0bb662155a4da3d7$var$Hmac;
$0bb662155a4da3d7$var$Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    $adLNa(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 54;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 106;
    this.outer = new this.Hash().update(key);
};
$0bb662155a4da3d7$var$Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
$0bb662155a4da3d7$var$Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

});


parcelRequire.register("bQU0N", function(module, exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821', 
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf', 
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695', 
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9', 
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36', 
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f', 
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999', 
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09', 
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d', 
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088', 
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d', 
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8', 
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a', 
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453', 
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160', 
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0', 
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6', 
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589', 
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17', 
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda', 
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd', 
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2', 
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6', 
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f', 
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01', 
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3', 
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f', 
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7', 
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78', 
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1', 
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150', 
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82', 
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc', 
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b', 
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51', 
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45', 
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120', 
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84', 
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d', 
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d', 
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8', 
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8', 
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac', 
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f', 
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962', 
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907', 
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec', 
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d', 
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414', 
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd', 
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0', 
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811', 
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1', 
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c', 
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73', 
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd', 
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405', 
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589', 
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e', 
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27', 
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1', 
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482', 
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945', 
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573', 
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82', 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672', 
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6', 
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da', 
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37', 
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b', 
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81', 
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58', 
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77', 
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a', 
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c', 
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67', 
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402', 
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55', 
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482', 
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82', 
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396', 
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49', 
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf', 
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a', 
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7', 
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933', 
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a', 
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6', 
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37', 
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e', 
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6', 
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476', 
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40', 
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61', 
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683', 
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5', 
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b', 
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417', 
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868', 
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a', 
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6', 
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996', 
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e', 
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d', 
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2', 
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e', 
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437', 
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311', 
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4', 
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575', 
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d', 
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d', 
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629', 
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06', 
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374', 
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee', 
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1', 
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b', 
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661', 
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6', 
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e', 
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d', 
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc', 
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4', 
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c', 
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b', 
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913', 
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154', 
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865', 
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc', 
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224', 
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e', 
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6', 
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511', 
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b', 
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2', 
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c', 
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3', 
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d', 
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700', 
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4', 
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196', 
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4', 
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257', 
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13', 
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096', 
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38', 
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f', 
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448', 
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a', 
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4', 
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437', 
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7', 
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d', 
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a', 
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54', 
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77', 
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517', 
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10', 
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125', 
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e', 
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1', 
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2', 
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423', 
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8', 
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758', 
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375', 
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d', 
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec', 
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0', 
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c', 
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4', 
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f', 
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649', 
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826', 
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5', 
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87', 
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b', 
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc', 
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c', 
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f', 
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a', 
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46', 
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f', 
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03', 
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08', 
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8', 
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373', 
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3', 
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8', 
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1', 
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9', 
            ], 
        ]
    }
};

});


parcelRequire.register("gL6yo", function(module, exports) {
'use strict';

var $22ilA = parcelRequire("22ilA");

var $2l4xj = parcelRequire("2l4xj");

var $lxDwz = parcelRequire("lxDwz");

var $eOn8P = parcelRequire("eOn8P");

var $2d653 = parcelRequire("2d653");
var $c3361e93b8d102a1$var$assert = $lxDwz.assert;

var $lTX3m = parcelRequire("lTX3m");

var $lfeOD = parcelRequire("lfeOD");
function $c3361e93b8d102a1$var$EC(options) {
    if (!(this instanceof $c3361e93b8d102a1$var$EC)) return new $c3361e93b8d102a1$var$EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        $c3361e93b8d102a1$var$assert(Object.prototype.hasOwnProperty.call($eOn8P, options), 'Unknown curve ' + options);
        options = $eOn8P[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof $eOn8P.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = $c3361e93b8d102a1$var$EC;
$c3361e93b8d102a1$var$EC.prototype.keyPair = function keyPair(options) {
    return new $lTX3m(this, options);
};
$c3361e93b8d102a1$var$EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return $lTX3m.fromPrivate(this, priv, enc);
};
$c3361e93b8d102a1$var$EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return $lTX3m.fromPublic(this, pub, enc);
};
$c3361e93b8d102a1$var$EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {};
    // Instantiate Hmac_DRBG
    var drbg = new $2l4xj({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || $2d653(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new $22ilA(2));
    for(;;){
        var priv = new $22ilA(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
$c3361e93b8d102a1$var$EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
$c3361e93b8d102a1$var$EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options) options = {};
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new $22ilA(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new $2l4xj({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new $22ilA(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new $22ilA(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new $lfeOD({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
$c3361e93b8d102a1$var$EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new $22ilA(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new $lfeOD(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
$c3361e93b8d102a1$var$EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    $c3361e93b8d102a1$var$assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new $lfeOD(signature, enc);
    var n = this.n;
    var e = new $22ilA(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
$c3361e93b8d102a1$var$EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new $lfeOD(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

});
parcelRequire.register("2l4xj", function(module, exports) {
'use strict';

var $1G1dM = parcelRequire("1G1dM");

var $1kr9f = parcelRequire("1kr9f");

var $adLNa = parcelRequire("adLNa");
function $1b410fc6a1687c8d$var$HmacDRBG(options) {
    if (!(this instanceof $1b410fc6a1687c8d$var$HmacDRBG)) return new $1b410fc6a1687c8d$var$HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = $1kr9f.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = $1kr9f.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = $1kr9f.toArray(options.pers, options.persEnc || 'hex');
    $adLNa(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = $1b410fc6a1687c8d$var$HmacDRBG;
$1b410fc6a1687c8d$var$HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0;
        this.V[i] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656; // 2^48
};
$1b410fc6a1687c8d$var$HmacDRBG.prototype._hmac = function hmac() {
    return new $1G1dM.hmac(this.hash, this.K);
};
$1b410fc6a1687c8d$var$HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        1
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
$1b410fc6a1687c8d$var$HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = $1kr9f.toArray(entropy, entropyEnc);
    add = $1kr9f.toArray(add, addEnc);
    $adLNa(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
$1b410fc6a1687c8d$var$HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = $1kr9f.toArray(add, addEnc || 'hex');
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return $1kr9f.encode(res, enc);
};

});

parcelRequire.register("lTX3m", function(module, exports) {
'use strict';

var $22ilA = parcelRequire("22ilA");

var $lxDwz = parcelRequire("lxDwz");
var $ff1c8ac51900ef14$var$assert = $lxDwz.assert;
function $ff1c8ac51900ef14$var$KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = $ff1c8ac51900ef14$var$KeyPair;
$ff1c8ac51900ef14$var$KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof $ff1c8ac51900ef14$var$KeyPair) return pub;
    return new $ff1c8ac51900ef14$var$KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
$ff1c8ac51900ef14$var$KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof $ff1c8ac51900ef14$var$KeyPair) return priv;
    return new $ff1c8ac51900ef14$var$KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
$ff1c8ac51900ef14$var$KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
    };
    return {
        result: true,
        reason: null
    };
};
$ff1c8ac51900ef14$var$KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
$ff1c8ac51900ef14$var$KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);
    else return this.priv;
};
$ff1c8ac51900ef14$var$KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new $22ilA(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
$ff1c8ac51900ef14$var$KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') $ff1c8ac51900ef14$var$assert(key.x, 'Need x coordinate');
        else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') $ff1c8ac51900ef14$var$assert(key.x && key.y, 'Need both x and y coordinate');
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
$ff1c8ac51900ef14$var$KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) $ff1c8ac51900ef14$var$assert(pub.validate(), 'public point not validated');
    return pub.mul(this.priv).getX();
};
// ECDSA
$ff1c8ac51900ef14$var$KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
$ff1c8ac51900ef14$var$KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
$ff1c8ac51900ef14$var$KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

});

parcelRequire.register("lfeOD", function(module, exports) {
'use strict';

var $22ilA = parcelRequire("22ilA");

var $lxDwz = parcelRequire("lxDwz");
var $f7767dc8f8187b45$var$assert = $lxDwz.assert;
function $f7767dc8f8187b45$var$Signature(options, enc) {
    if (options instanceof $f7767dc8f8187b45$var$Signature) return options;
    if (this._importDER(options, enc)) return;
    $f7767dc8f8187b45$var$assert(options.r && options.s, 'Signature without r or s');
    this.r = new $22ilA(options.r, 16);
    this.s = new $22ilA(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = $f7767dc8f8187b45$var$Signature;
function $f7767dc8f8187b45$var$Position() {
    this.place = 0;
}
function $f7767dc8f8187b45$var$getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) return initial;
    var octetLen = initial & 15;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 127) return false;
    p.place = off;
    return val;
}
function $f7767dc8f8187b45$var$rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 128) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
$f7767dc8f8187b45$var$Signature.prototype._importDER = function _importDER(data, enc) {
    data = $lxDwz.toArray(data, enc);
    var p = new $f7767dc8f8187b45$var$Position();
    if (data[p.place++] !== 48) return false;
    var len = $f7767dc8f8187b45$var$getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 2) return false;
    var rlen = $f7767dc8f8187b45$var$getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) return false;
    var slen = $f7767dc8f8187b45$var$getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 128) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 128) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new $22ilA(r);
    this.s = new $22ilA(s);
    this.recoveryParam = null;
    return true;
};
function $f7767dc8f8187b45$var$constructLength(arr, len) {
    if (len < 128) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while(--octets)arr.push(len >>> (octets << 3) & 255);
    arr.push(len);
}
$f7767dc8f8187b45$var$Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 128) s = [
        0
    ].concat(s);
    r = $f7767dc8f8187b45$var$rmPadding(r);
    s = $f7767dc8f8187b45$var$rmPadding(s);
    while(!s[0] && !(s[1] & 128))s = s.slice(1);
    var arr = [
        2
    ];
    $f7767dc8f8187b45$var$constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(2);
    $f7767dc8f8187b45$var$constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        48
    ];
    $f7767dc8f8187b45$var$constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return $lxDwz.encode(res, enc);
};

});


parcelRequire.register("2TB77", function(module, exports) {
'use strict';

var $1G1dM = parcelRequire("1G1dM");

var $eOn8P = parcelRequire("eOn8P");

var $lxDwz = parcelRequire("lxDwz");
var $21bd81d707741d0a$var$assert = $lxDwz.assert;
var $21bd81d707741d0a$var$parseBytes = $lxDwz.parseBytes;

var $e3B3w = parcelRequire("e3B3w");

var $ccZ4p = parcelRequire("ccZ4p");
function $21bd81d707741d0a$var$EDDSA(curve) {
    $21bd81d707741d0a$var$assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof $21bd81d707741d0a$var$EDDSA)) return new $21bd81d707741d0a$var$EDDSA(curve);
    curve = $eOn8P[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = $1G1dM.sha512;
}
module.exports = $21bd81d707741d0a$var$EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ $21bd81d707741d0a$var$EDDSA.prototype.sign = function sign(message, secret) {
    message = $21bd81d707741d0a$var$parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ $21bd81d707741d0a$var$EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = $21bd81d707741d0a$var$parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
$21bd81d707741d0a$var$EDDSA.prototype.hashInt = function hashInt() {
    var hash = this.hash();
    for(var i = 0; i < arguments.length; i++)hash.update(arguments[i]);
    return $lxDwz.intFromLE(hash.digest()).umod(this.curve.n);
};
$21bd81d707741d0a$var$EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return $e3B3w.fromPublic(this, pub);
};
$21bd81d707741d0a$var$EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return $e3B3w.fromSecret(this, secret);
};
$21bd81d707741d0a$var$EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof $ccZ4p) return sig;
    return new $ccZ4p(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ $21bd81d707741d0a$var$EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
};
$21bd81d707741d0a$var$EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = $lxDwz.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y = $lxDwz.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
$21bd81d707741d0a$var$EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
$21bd81d707741d0a$var$EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return $lxDwz.intFromLE(bytes);
};
$21bd81d707741d0a$var$EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

});
parcelRequire.register("e3B3w", function(module, exports) {
'use strict';

var $lxDwz = parcelRequire("lxDwz");
var $a3be170922091fa4$var$assert = $lxDwz.assert;
var $a3be170922091fa4$var$parseBytes = $lxDwz.parseBytes;
var $a3be170922091fa4$var$cachedProperty = $lxDwz.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function $a3be170922091fa4$var$KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = $a3be170922091fa4$var$parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = $a3be170922091fa4$var$parseBytes(params.pub);
}
$a3be170922091fa4$var$KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof $a3be170922091fa4$var$KeyPair) return pub;
    return new $a3be170922091fa4$var$KeyPair(eddsa, {
        pub: pub
    });
};
$a3be170922091fa4$var$KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof $a3be170922091fa4$var$KeyPair) return secret;
    return new $a3be170922091fa4$var$KeyPair(eddsa, {
        secret: secret
    });
};
$a3be170922091fa4$var$KeyPair.prototype.secret = function secret() {
    return this._secret;
};
$a3be170922091fa4$var$cachedProperty($a3be170922091fa4$var$KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
$a3be170922091fa4$var$cachedProperty($a3be170922091fa4$var$KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
$a3be170922091fa4$var$cachedProperty($a3be170922091fa4$var$KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
$a3be170922091fa4$var$cachedProperty($a3be170922091fa4$var$KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
$a3be170922091fa4$var$cachedProperty($a3be170922091fa4$var$KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
$a3be170922091fa4$var$cachedProperty($a3be170922091fa4$var$KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
$a3be170922091fa4$var$KeyPair.prototype.sign = function sign(message) {
    $a3be170922091fa4$var$assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
$a3be170922091fa4$var$KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
$a3be170922091fa4$var$KeyPair.prototype.getSecret = function getSecret(enc) {
    $a3be170922091fa4$var$assert(this._secret, 'KeyPair is public only');
    return $lxDwz.encode(this.secret(), enc);
};
$a3be170922091fa4$var$KeyPair.prototype.getPublic = function getPublic(enc) {
    return $lxDwz.encode(this.pubBytes(), enc);
};
module.exports = $a3be170922091fa4$var$KeyPair;

});

parcelRequire.register("ccZ4p", function(module, exports) {
'use strict';

var $22ilA = parcelRequire("22ilA");

var $lxDwz = parcelRequire("lxDwz");
var $8e35fa478c0b1213$var$assert = $lxDwz.assert;
var $8e35fa478c0b1213$var$cachedProperty = $lxDwz.cachedProperty;
var $8e35fa478c0b1213$var$parseBytes = $lxDwz.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function $8e35fa478c0b1213$var$Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = $8e35fa478c0b1213$var$parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    $8e35fa478c0b1213$var$assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof $22ilA) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
$8e35fa478c0b1213$var$cachedProperty($8e35fa478c0b1213$var$Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
$8e35fa478c0b1213$var$cachedProperty($8e35fa478c0b1213$var$Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
$8e35fa478c0b1213$var$cachedProperty($8e35fa478c0b1213$var$Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
$8e35fa478c0b1213$var$cachedProperty($8e35fa478c0b1213$var$Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
$8e35fa478c0b1213$var$Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
$8e35fa478c0b1213$var$Signature.prototype.toHex = function toHex() {
    return $lxDwz.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = $8e35fa478c0b1213$var$Signature;

});





parcelRequire.register("j8Yeq", function(module, exports) {
"use strict";
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $hWy1J = parcelRequire("hWy1J");
function $defd7c6a77018848$var$getRandomBytes(bytes) {
    return new Promise(function(resolve, reject) {
        $hWy1J(bytes, function(err, resp) {
            if (err) {
                reject(err);
                return;
            }
            resolve(resp);
        });
    });
}
module.exports.getRandomBytes = $defd7c6a77018848$var$getRandomBytes;
function $defd7c6a77018848$var$getRandomBytesSync(bytes) {
    return $hWy1J(bytes);
}
module.exports.getRandomBytesSync = $defd7c6a77018848$var$getRandomBytesSync;

});
parcelRequire.register("hWy1J", function(module, exports) {
'use strict';

var $FkHbz = parcelRequire("FkHbz");
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var $d1023f81914c09f6$var$MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var $d1023f81914c09f6$var$MAX_UINT32 = 4294967295;
function $d1023f81914c09f6$var$oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}

var $cBldb = parcelRequire("cBldb");
var $d1023f81914c09f6$require$Buffer = $cBldb.Buffer;
var $d1023f81914c09f6$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
if ($d1023f81914c09f6$var$crypto && $d1023f81914c09f6$var$crypto.getRandomValues) module.exports = $d1023f81914c09f6$var$randomBytes;
else module.exports = $d1023f81914c09f6$var$oldBrowser;
function $d1023f81914c09f6$var$randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > $d1023f81914c09f6$var$MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = $d1023f81914c09f6$require$Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > $d1023f81914c09f6$var$MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += $d1023f81914c09f6$var$MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        $d1023f81914c09f6$var$crypto.getRandomValues(bytes.slice(generated, generated + $d1023f81914c09f6$var$MAX_BYTES));
        else $d1023f81914c09f6$var$crypto.getRandomValues(bytes);
    }
    if (typeof cb === 'function') return $FkHbz.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

});



parcelRequire.register("NePhB", function(module, exports) {

$parcel$export(module.exports, "privateKeyExport", () => $094013e19daa566e$export$da25363cc147da82, (v) => $094013e19daa566e$export$da25363cc147da82 = v);
$parcel$export(module.exports, "privateKeyModInverse", () => $094013e19daa566e$export$52775cb7d64c9e44, (v) => $094013e19daa566e$export$52775cb7d64c9e44 = v);
$parcel$export(module.exports, "signatureImport", () => $094013e19daa566e$export$427e0c30f94850c1, (v) => $094013e19daa566e$export$427e0c30f94850c1 = v);
$parcel$export(module.exports, "ecdhUnsafe", () => $094013e19daa566e$export$db6ba80d232d5f1a, (v) => $094013e19daa566e$export$db6ba80d232d5f1a = v);
var $094013e19daa566e$export$da25363cc147da82;
var $094013e19daa566e$export$52775cb7d64c9e44;
var $094013e19daa566e$export$427e0c30f94850c1;
var $094013e19daa566e$export$db6ba80d232d5f1a;
'use strict';

var $094013e19daa566e$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $fD3dS = parcelRequire("fD3dS");

var $hJ0wi = parcelRequire("hJ0wi");
var $094013e19daa566e$require$EC = $hJ0wi.ec;
var $094013e19daa566e$var$ec = new $094013e19daa566e$require$EC('secp256k1');
var $094013e19daa566e$var$ecparams = $094013e19daa566e$var$ec.curve;
$094013e19daa566e$export$da25363cc147da82 = function(privateKey, compressed) {
    var d = new $fD3dS(privateKey);
    if (d.ucmp($094013e19daa566e$var$ecparams.n) >= 0) throw new Error('couldn\'t export to DER format');
    var point = $094013e19daa566e$var$ec.g.mul(d);
    return $094013e19daa566e$var$toPublicKey(point.getX(), point.getY(), compressed);
};
$094013e19daa566e$export$52775cb7d64c9e44 = function(privateKey) {
    var bn = new $fD3dS(privateKey);
    if (bn.ucmp($094013e19daa566e$var$ecparams.n) >= 0 || bn.isZero()) throw new Error('private key range is invalid');
    return bn.invm($094013e19daa566e$var$ecparams.n).toArrayLike($094013e19daa566e$require$Buffer, 'be', 32);
};
$094013e19daa566e$export$427e0c30f94850c1 = function(sigObj) {
    var r = new $fD3dS(sigObj.r);
    if (r.ucmp($094013e19daa566e$var$ecparams.n) >= 0) r = new $fD3dS(0);
    var s = new $fD3dS(sigObj.s);
    if (s.ucmp($094013e19daa566e$var$ecparams.n) >= 0) s = new $fD3dS(0);
    return $094013e19daa566e$require$Buffer.concat([
        r.toArrayLike($094013e19daa566e$require$Buffer, 'be', 32),
        s.toArrayLike($094013e19daa566e$require$Buffer, 'be', 32)
    ]);
};
$094013e19daa566e$export$db6ba80d232d5f1a = function(publicKey, privateKey, compressed) {
    var point = $094013e19daa566e$var$ec.keyFromPublic(publicKey);
    var scalar = new $fD3dS(privateKey);
    if (scalar.ucmp($094013e19daa566e$var$ecparams.n) >= 0 || scalar.isZero()) throw new Error('scalar was invalid (zero or overflow)');
    var shared = point.pub.mul(scalar);
    return $094013e19daa566e$var$toPublicKey(shared.getX(), shared.getY(), compressed);
};
var $094013e19daa566e$var$toPublicKey = function toPublicKey(x, y, compressed) {
    var publicKey = void 0;
    if (compressed) {
        publicKey = $094013e19daa566e$require$Buffer.alloc(33);
        publicKey[0] = y.isOdd() ? 3 : 2;
        x.toArrayLike($094013e19daa566e$require$Buffer, 'be', 32).copy(publicKey, 1);
    } else {
        publicKey = $094013e19daa566e$require$Buffer.alloc(65);
        publicKey[0] = 4;
        x.toArrayLike($094013e19daa566e$require$Buffer, 'be', 32).copy(publicKey, 1);
        y.toArrayLike($094013e19daa566e$require$Buffer, 'be', 32).copy(publicKey, 33);
    }
    return publicKey;
};

});
parcelRequire.register("fD3dS", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("lb6jJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("cSzGv", function(module, exports) {

$parcel$export(module.exports, "privateKeyExport", () => $9606356290ab4f5c$export$da25363cc147da82, (v) => $9606356290ab4f5c$export$da25363cc147da82 = v);
$parcel$export(module.exports, "privateKeyImport", () => $9606356290ab4f5c$export$16ef149d7968ce6c, (v) => $9606356290ab4f5c$export$16ef149d7968ce6c = v);
$parcel$export(module.exports, "signatureImportLax", () => $9606356290ab4f5c$export$f3974ff10c129f6b, (v) => $9606356290ab4f5c$export$f3974ff10c129f6b = v);
var $9606356290ab4f5c$export$da25363cc147da82;
var $9606356290ab4f5c$export$16ef149d7968ce6c;
var $9606356290ab4f5c$export$f3974ff10c129f6b;
"use strict";

var $9606356290ab4f5c$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
var $9606356290ab4f5c$var$EC_PRIVKEY_EXPORT_DER_COMPRESSED = $9606356290ab4f5c$require$Buffer.from([
    // begin
    48,
    129,
    211,
    2,
    1,
    1,
    4,
    32,
    // private key
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    // middle
    160,
    129,
    133,
    48,
    129,
    130,
    2,
    1,
    1,
    48,
    44,
    6,
    7,
    42,
    134,
    72,
    206,
    61,
    1,
    1,
    2,
    33,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    254,
    255,
    255,
    252,
    47,
    48,
    6,
    4,
    1,
    0,
    4,
    1,
    7,
    4,
    33,
    2,
    121,
    190,
    102,
    126,
    249,
    220,
    187,
    172,
    85,
    160,
    98,
    149,
    206,
    135,
    11,
    7,
    2,
    155,
    252,
    219,
    45,
    206,
    40,
    217,
    89,
    242,
    129,
    91,
    22,
    248,
    23,
    152,
    2,
    33,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    254,
    186,
    174,
    220,
    230,
    175,
    72,
    160,
    59,
    191,
    210,
    94,
    140,
    208,
    54,
    65,
    65,
    2,
    1,
    1,
    161,
    36,
    3,
    34,
    0,
    // public key
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
]);
var $9606356290ab4f5c$var$EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = $9606356290ab4f5c$require$Buffer.from([
    // begin
    48,
    130,
    1,
    19,
    2,
    1,
    1,
    4,
    32,
    // private key
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    // middle
    160,
    129,
    165,
    48,
    129,
    162,
    2,
    1,
    1,
    48,
    44,
    6,
    7,
    42,
    134,
    72,
    206,
    61,
    1,
    1,
    2,
    33,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    254,
    255,
    255,
    252,
    47,
    48,
    6,
    4,
    1,
    0,
    4,
    1,
    7,
    4,
    65,
    4,
    121,
    190,
    102,
    126,
    249,
    220,
    187,
    172,
    85,
    160,
    98,
    149,
    206,
    135,
    11,
    7,
    2,
    155,
    252,
    219,
    45,
    206,
    40,
    217,
    89,
    242,
    129,
    91,
    22,
    248,
    23,
    152,
    72,
    58,
    218,
    119,
    38,
    163,
    196,
    101,
    93,
    164,
    251,
    252,
    14,
    17,
    8,
    168,
    253,
    23,
    180,
    72,
    166,
    133,
    84,
    25,
    156,
    71,
    208,
    143,
    251,
    16,
    212,
    184,
    2,
    33,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    254,
    186,
    174,
    220,
    230,
    175,
    72,
    160,
    59,
    191,
    210,
    94,
    140,
    208,
    54,
    65,
    65,
    2,
    1,
    1,
    161,
    68,
    3,
    66,
    0,
    // public key
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0
]);
$9606356290ab4f5c$export$da25363cc147da82 = function(privateKey, publicKey, compressed) {
    var result = $9606356290ab4f5c$require$Buffer.from(compressed ? $9606356290ab4f5c$var$EC_PRIVKEY_EXPORT_DER_COMPRESSED : $9606356290ab4f5c$var$EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
    privateKey.copy(result, compressed ? 8 : 9);
    publicKey.copy(result, compressed ? 181 : 214);
    return result;
};
$9606356290ab4f5c$export$16ef149d7968ce6c = function(privateKey) {
    var length = privateKey.length;
    // sequence header
    var index = 0;
    if (length < index + 1 || privateKey[index] !== 48) return null;
    index += 1;
    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 128)) return null;
    var lenb = privateKey[index] & 127;
    index += 1;
    if (lenb < 1 || lenb > 2) return null;
    if (length < index + lenb) return null;
    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
    index += lenb;
    if (length < index + len) return null;
    // sequence element 0: version number (=1)
    if (length < index + 3 || privateKey[index] !== 2 || privateKey[index + 1] !== 1 || privateKey[index + 2] !== 1) return null;
    index += 3;
    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 || privateKey[index] !== 4 || privateKey[index + 1] > 32 || length < index + 2 + privateKey[index + 1]) return null;
    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};
$9606356290ab4f5c$export$f3974ff10c129f6b = function(signature) {
    var r = $9606356290ab4f5c$require$Buffer.alloc(32, 0);
    var s = $9606356290ab4f5c$require$Buffer.alloc(32, 0);
    var length = signature.length;
    var index = 0;
    // sequence tag byte
    if (signature[index++] !== 48) return null;
    // sequence length byte
    var lenbyte = signature[index++];
    if (lenbyte & 128) {
        index += lenbyte - 128;
        if (index > length) return null;
    }
    // sequence tag byte for r
    if (signature[index++] !== 2) return null;
    // length for r
    var rlen = signature[index++];
    if (rlen & 128) {
        lenbyte = rlen - 128;
        if (index + lenbyte > length) return null;
        for(; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1);
        for(rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)rlen = (rlen << 8) + signature[index];
    }
    if (rlen > length - index) return null;
    var rindex = index;
    index += rlen;
    // sequence tag byte for s
    if (signature[index++] !== 2) return null;
    // length for s
    var slen = signature[index++];
    if (slen & 128) {
        lenbyte = slen - 128;
        if (index + lenbyte > length) return null;
        for(; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1);
        for(slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)slen = (slen << 8) + signature[index];
    }
    if (slen > length - index) return null;
    var sindex = index;
    index += slen;
    // ignore leading zeros in r
    for(; rlen > 0 && signature[rindex] === 0; rlen -= 1, rindex += 1);
    // copy r value
    if (rlen > 32) return null;
    var rvalue = signature.slice(rindex, rindex + rlen);
    rvalue.copy(r, 32 - rvalue.length);
    // ignore leading zeros in s
    for(; slen > 0 && signature[sindex] === 0; slen -= 1, sindex += 1);
    // copy s value
    if (slen > 32) return null;
    var svalue = signature.slice(sindex, sindex + slen);
    svalue.copy(s, 32 - svalue.length);
    return {
        r: r,
        s: s
    };
};

});


parcelRequire.register("cAqPD", function(module, exports) {
// Currently in sync with Node.js lib/assert.js
// https://github.com/nodejs/node/commit/2a51ae424a513ec9a6aa3466baa0cc1d55dd4f3b
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';

var $FkHbz = parcelRequire("FkHbz");
function $929da90f51aae46e$var$_typeof(obj1) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") $929da90f51aae46e$var$_typeof = function _typeof(obj) {
        return typeof obj;
    };
    else $929da90f51aae46e$var$_typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return $929da90f51aae46e$var$_typeof(obj1);
}
function $929da90f51aae46e$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}

var $5wcsW = parcelRequire("5wcsW");
var $929da90f51aae46e$var$_require$codes = $5wcsW.codes, $929da90f51aae46e$var$ERR_AMBIGUOUS_ARGUMENT = $929da90f51aae46e$var$_require$codes.ERR_AMBIGUOUS_ARGUMENT, $929da90f51aae46e$var$ERR_INVALID_ARG_TYPE = $929da90f51aae46e$var$_require$codes.ERR_INVALID_ARG_TYPE, $929da90f51aae46e$var$ERR_INVALID_ARG_VALUE = $929da90f51aae46e$var$_require$codes.ERR_INVALID_ARG_VALUE, $929da90f51aae46e$var$ERR_INVALID_RETURN_VALUE = $929da90f51aae46e$var$_require$codes.ERR_INVALID_RETURN_VALUE, $929da90f51aae46e$var$ERR_MISSING_ARGS = $929da90f51aae46e$var$_require$codes.ERR_MISSING_ARGS;

var $am1qC = parcelRequire("am1qC");

var $iZjkG = parcelRequire("iZjkG");
var $929da90f51aae46e$var$inspect = $iZjkG.inspect;

var $iZjkG = parcelRequire("iZjkG");
var $929da90f51aae46e$require$_require$types = $iZjkG.types;
var $929da90f51aae46e$var$isPromise = $929da90f51aae46e$require$_require$types.isPromise, $929da90f51aae46e$var$isRegExp = $929da90f51aae46e$require$_require$types.isRegExp;

var $929da90f51aae46e$var$objectAssign = Object.assign ? Object.assign : (parcelRequire("3hx1b")).assign;

var $929da90f51aae46e$var$objectIs = Object.is ? Object.is : (parcelRequire("b3ubc"));
var $929da90f51aae46e$var$errorCache = new Map();
var $929da90f51aae46e$var$isDeepEqual;
var $929da90f51aae46e$var$isDeepStrictEqual;
var $929da90f51aae46e$var$parseExpressionAt;
var $929da90f51aae46e$var$findNodeAround;
var $929da90f51aae46e$var$decoder;

function $929da90f51aae46e$var$lazyLoadComparison() {
    var comparison = (parcelRequire("ecKAN"));
    $929da90f51aae46e$var$isDeepEqual = comparison.isDeepEqual;
    $929da90f51aae46e$var$isDeepStrictEqual = comparison.isDeepStrictEqual;
} // Escape control characters but not \n and \t to keep the line breaks and
// indentation intact.
// eslint-disable-next-line no-control-regex
var $929da90f51aae46e$var$escapeSequencesRegExp = /[\x00-\x08\x0b\x0c\x0e-\x1f]/g;
var $929da90f51aae46e$var$meta = [
    "\\u0000",
    "\\u0001",
    "\\u0002",
    "\\u0003",
    "\\u0004",
    "\\u0005",
    "\\u0006",
    "\\u0007",
    '\\b',
    '',
    '',
    "\\u000b",
    '\\f',
    '',
    "\\u000e",
    "\\u000f",
    "\\u0010",
    "\\u0011",
    "\\u0012",
    "\\u0013",
    "\\u0014",
    "\\u0015",
    "\\u0016",
    "\\u0017",
    "\\u0018",
    "\\u0019",
    "\\u001a",
    "\\u001b",
    "\\u001c",
    "\\u001d",
    "\\u001e",
    "\\u001f"
];
var $929da90f51aae46e$var$escapeFn = function escapeFn(str) {
    return $929da90f51aae46e$var$meta[str.charCodeAt(0)];
};
var $929da90f51aae46e$var$warned = false; // The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.
var $929da90f51aae46e$var$assert = module.exports = $929da90f51aae46e$var$ok;
var $929da90f51aae46e$var$NO_EXCEPTION_SENTINEL = {}; // All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided. All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.
function $929da90f51aae46e$var$innerFail(obj) {
    if (obj.message instanceof Error) throw obj.message;
    throw new $am1qC(obj);
}
function $929da90f51aae46e$var$fail(actual, expected, message, operator, stackStartFn) {
    var argsLen = arguments.length;
    var internalMessage;
    if (argsLen === 0) internalMessage = 'Failed';
    else if (argsLen === 1) {
        message = actual;
        actual = undefined;
    } else {
        if ($929da90f51aae46e$var$warned === false) {
            $929da90f51aae46e$var$warned = true;
            var warn = $FkHbz.emitWarning ? $FkHbz.emitWarning : console.warn.bind(console);
            warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", 'DeprecationWarning', 'DEP0094');
        }
        if (argsLen === 2) operator = '!=';
    }
    if (message instanceof Error) throw message;
    var errArgs = {
        actual: actual,
        expected: expected,
        operator: operator === undefined ? 'fail' : operator,
        stackStartFn: stackStartFn || $929da90f51aae46e$var$fail
    };
    if (message !== undefined) errArgs.message = message;
    var err = new $am1qC(errArgs);
    if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
    }
    throw err;
}
$929da90f51aae46e$var$assert.fail = $929da90f51aae46e$var$fail; // The AssertionError is defined in internal/error.
$929da90f51aae46e$var$assert.AssertionError = $am1qC;
function $929da90f51aae46e$var$innerOk(fn, argLen, value, message) {
    if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
            generatedMessage = true;
            message = 'No value argument passed to `assert.ok()`';
        } else if (message instanceof Error) throw message;
        var err = new $am1qC({
            actual: value,
            expected: true,
            message: message,
            operator: '==',
            stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
    }
} // Pure assertion tests whether a value is truthy, as determined
// by !!value.
function $929da90f51aae46e$var$ok() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    $929da90f51aae46e$var$innerOk.apply(void 0, [
        $929da90f51aae46e$var$ok,
        args.length
    ].concat(args));
}
$929da90f51aae46e$var$assert.ok = $929da90f51aae46e$var$ok; // The equality assertion tests shallow, coercive equality with ==.
/* eslint-disable no-restricted-properties */ $929da90f51aae46e$var$assert.equal = function equal(actual, expected, message) {
    if (arguments.length < 2) throw new $929da90f51aae46e$var$ERR_MISSING_ARGS('actual', 'expected');
     // eslint-disable-next-line eqeqeq
    if (actual != expected) $929da90f51aae46e$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: '==',
        stackStartFn: equal
    });
}; // The non-equality assertion tests for whether two objects are not
// equal with !=.
$929da90f51aae46e$var$assert.notEqual = function notEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $929da90f51aae46e$var$ERR_MISSING_ARGS('actual', 'expected');
     // eslint-disable-next-line eqeqeq
    if (actual == expected) $929da90f51aae46e$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: '!=',
        stackStartFn: notEqual
    });
}; // The equivalence assertion tests a deep equality relation.
$929da90f51aae46e$var$assert.deepEqual = function deepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $929da90f51aae46e$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($929da90f51aae46e$var$isDeepEqual === undefined) $929da90f51aae46e$var$lazyLoadComparison();
    if (!$929da90f51aae46e$var$isDeepEqual(actual, expected)) $929da90f51aae46e$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'deepEqual',
        stackStartFn: deepEqual
    });
}; // The non-equivalence assertion tests for any deep inequality.
$929da90f51aae46e$var$assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $929da90f51aae46e$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($929da90f51aae46e$var$isDeepEqual === undefined) $929da90f51aae46e$var$lazyLoadComparison();
    if ($929da90f51aae46e$var$isDeepEqual(actual, expected)) $929da90f51aae46e$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'notDeepEqual',
        stackStartFn: notDeepEqual
    });
};
/* eslint-enable */ $929da90f51aae46e$var$assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $929da90f51aae46e$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($929da90f51aae46e$var$isDeepEqual === undefined) $929da90f51aae46e$var$lazyLoadComparison();
    if (!$929da90f51aae46e$var$isDeepStrictEqual(actual, expected)) $929da90f51aae46e$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'deepStrictEqual',
        stackStartFn: deepStrictEqual
    });
};
$929da90f51aae46e$var$assert.notDeepStrictEqual = $929da90f51aae46e$var$notDeepStrictEqual;
function $929da90f51aae46e$var$notDeepStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $929da90f51aae46e$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($929da90f51aae46e$var$isDeepEqual === undefined) $929da90f51aae46e$var$lazyLoadComparison();
    if ($929da90f51aae46e$var$isDeepStrictEqual(actual, expected)) $929da90f51aae46e$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'notDeepStrictEqual',
        stackStartFn: $929da90f51aae46e$var$notDeepStrictEqual
    });
}
$929da90f51aae46e$var$assert.strictEqual = function strictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $929da90f51aae46e$var$ERR_MISSING_ARGS('actual', 'expected');
    if (!$929da90f51aae46e$var$objectIs(actual, expected)) $929da90f51aae46e$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'strictEqual',
        stackStartFn: strictEqual
    });
};
$929da90f51aae46e$var$assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
    if (arguments.length < 2) throw new $929da90f51aae46e$var$ERR_MISSING_ARGS('actual', 'expected');
    if ($929da90f51aae46e$var$objectIs(actual, expected)) $929da90f51aae46e$var$innerFail({
        actual: actual,
        expected: expected,
        message: message,
        operator: 'notStrictEqual',
        stackStartFn: notStrictEqual
    });
};
var $929da90f51aae46e$var$Comparison = function Comparison(obj, keys, actual) {
    var _this = this;
    $929da90f51aae46e$var$_classCallCheck(this, Comparison);
    keys.forEach(function(key) {
        if (key in obj) {
            if (actual !== undefined && typeof actual[key] === 'string' && $929da90f51aae46e$var$isRegExp(obj[key]) && obj[key].test(actual[key])) _this[key] = actual[key];
            else _this[key] = obj[key];
        }
    });
};
function $929da90f51aae46e$var$compareExceptionKey(actual, expected, key, message, keys, fn) {
    if (!(key in actual) || !$929da90f51aae46e$var$isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
            // Create placeholder objects to create a nice output.
            var a = new $929da90f51aae46e$var$Comparison(actual, keys);
            var b = new $929da90f51aae46e$var$Comparison(expected, keys, actual);
            var err = new $am1qC({
                actual: a,
                expected: b,
                operator: 'deepStrictEqual',
                stackStartFn: fn
            });
            err.actual = actual;
            err.expected = expected;
            err.operator = fn.name;
            throw err;
        }
        $929da90f51aae46e$var$innerFail({
            actual: actual,
            expected: expected,
            message: message,
            operator: fn.name,
            stackStartFn: fn
        });
    }
}
function $929da90f51aae46e$var$expectedException(actual, expected, msg, fn) {
    if (typeof expected !== 'function') {
        if ($929da90f51aae46e$var$isRegExp(expected)) return expected.test(actual); // assert.doesNotThrow does not accept objects.
        if (arguments.length === 2) throw new $929da90f51aae46e$var$ERR_INVALID_ARG_TYPE('expected', [
            'Function',
            'RegExp'
        ], expected);
         // Handle primitives properly.
        if ($929da90f51aae46e$var$_typeof(actual) !== 'object' || actual === null) {
            var err = new $am1qC({
                actual: actual,
                expected: expected,
                message: msg,
                operator: 'deepStrictEqual',
                stackStartFn: fn
            });
            err.operator = fn.name;
            throw err;
        }
        var keys = Object.keys(expected); // Special handle errors to make sure the name and the message are compared
        // as well.
        if (expected instanceof Error) keys.push('name', 'message');
        else if (keys.length === 0) throw new $929da90f51aae46e$var$ERR_INVALID_ARG_VALUE('error', expected, 'may not be an empty object');
        if ($929da90f51aae46e$var$isDeepEqual === undefined) $929da90f51aae46e$var$lazyLoadComparison();
        keys.forEach(function(key) {
            if (typeof actual[key] === 'string' && $929da90f51aae46e$var$isRegExp(expected[key]) && expected[key].test(actual[key])) return;
            $929da90f51aae46e$var$compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
    } // Guard instanceof against arrow functions as they don't have a prototype.
    if (expected.prototype !== undefined && actual instanceof expected) return true;
    if (Error.isPrototypeOf(expected)) return false;
    return expected.call({}, actual) === true;
}
function $929da90f51aae46e$var$getActual(fn) {
    if (typeof fn !== 'function') throw new $929da90f51aae46e$var$ERR_INVALID_ARG_TYPE('fn', 'Function', fn);
    try {
        fn();
    } catch (e) {
        return e;
    }
    return $929da90f51aae46e$var$NO_EXCEPTION_SENTINEL;
}
function $929da90f51aae46e$var$checkIsPromise(obj) {
    // Accept native ES6 promises and promises that are implemented in a similar
    // way. Do not accept thenables that use a function as `obj` and that have no
    // `catch` handler.
    // TODO: thenables are checked up until they have the correct methods,
    // but according to documentation, the `then` method should receive
    // the `fulfill` and `reject` arguments as well or it may be never resolved.
    return $929da90f51aae46e$var$isPromise(obj) || obj !== null && $929da90f51aae46e$var$_typeof(obj) === 'object' && typeof obj.then === 'function' && typeof obj.catch === 'function';
}
function $929da90f51aae46e$var$waitForActual(promiseFn) {
    return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === 'function') {
            // Return a rejected promise if `promiseFn` throws synchronously.
            resultPromise = promiseFn(); // Fail in case no promise is returned.
            if (!$929da90f51aae46e$var$checkIsPromise(resultPromise)) throw new $929da90f51aae46e$var$ERR_INVALID_RETURN_VALUE('instance of Promise', 'promiseFn', resultPromise);
        } else if ($929da90f51aae46e$var$checkIsPromise(promiseFn)) resultPromise = promiseFn;
        else throw new $929da90f51aae46e$var$ERR_INVALID_ARG_TYPE('promiseFn', [
            'Function',
            'Promise'
        ], promiseFn);
        return Promise.resolve().then(function() {
            return resultPromise;
        }).then(function() {
            return $929da90f51aae46e$var$NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
            return e;
        });
    });
}
function $929da90f51aae46e$var$expectsError(stackStartFn, actual, error, message) {
    if (typeof error === 'string') {
        if (arguments.length === 4) throw new $929da90f51aae46e$var$ERR_INVALID_ARG_TYPE('error', [
            'Object',
            'Error',
            'Function',
            'RegExp'
        ], error);
        if ($929da90f51aae46e$var$_typeof(actual) === 'object' && actual !== null) {
            if (actual.message === error) throw new $929da90f51aae46e$var$ERR_AMBIGUOUS_ARGUMENT('error/message', "The error message \"".concat(actual.message, "\" is identical to the message."));
        } else if (actual === error) throw new $929da90f51aae46e$var$ERR_AMBIGUOUS_ARGUMENT('error/message', "The error \"".concat(actual, "\" is identical to the message."));
        message = error;
        error = undefined;
    } else if (error != null && $929da90f51aae46e$var$_typeof(error) !== 'object' && typeof error !== 'function') throw new $929da90f51aae46e$var$ERR_INVALID_ARG_TYPE('error', [
        'Object',
        'Error',
        'Function',
        'RegExp'
    ], error);
    if (actual === $929da90f51aae46e$var$NO_EXCEPTION_SENTINEL) {
        var details = '';
        if (error && error.name) details += " (".concat(error.name, ")");
        details += message ? ": ".concat(message) : '.';
        var fnType = stackStartFn.name === 'rejects' ? 'rejection' : 'exception';
        $929da90f51aae46e$var$innerFail({
            actual: undefined,
            expected: error,
            operator: stackStartFn.name,
            message: "Missing expected ".concat(fnType).concat(details),
            stackStartFn: stackStartFn
        });
    }
    if (error && !$929da90f51aae46e$var$expectedException(actual, error, message, stackStartFn)) throw actual;
}
function $929da90f51aae46e$var$expectsNoError(stackStartFn, actual, error, message) {
    if (actual === $929da90f51aae46e$var$NO_EXCEPTION_SENTINEL) return;
    if (typeof error === 'string') {
        message = error;
        error = undefined;
    }
    if (!error || $929da90f51aae46e$var$expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : '.';
        var fnType = stackStartFn.name === 'doesNotReject' ? 'rejection' : 'exception';
        $929da90f51aae46e$var$innerFail({
            actual: actual,
            expected: error,
            operator: stackStartFn.name,
            message: "Got unwanted ".concat(fnType).concat(details, "\n") + "Actual message: \"".concat(actual && actual.message, "\""),
            stackStartFn: stackStartFn
        });
    }
    throw actual;
}
$929da90f51aae46e$var$assert.throws = function throws(promiseFn) {
    for(var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++)args[_key2 - 1] = arguments[_key2];
    $929da90f51aae46e$var$expectsError.apply(void 0, [
        throws,
        $929da90f51aae46e$var$getActual(promiseFn)
    ].concat(args));
};
$929da90f51aae46e$var$assert.rejects = function rejects(promiseFn) {
    for(var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++)args[_key3 - 1] = arguments[_key3];
    return $929da90f51aae46e$var$waitForActual(promiseFn).then(function(result) {
        return $929da90f51aae46e$var$expectsError.apply(void 0, [
            rejects,
            result
        ].concat(args));
    });
};
$929da90f51aae46e$var$assert.doesNotThrow = function doesNotThrow(fn) {
    for(var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++)args[_key4 - 1] = arguments[_key4];
    $929da90f51aae46e$var$expectsNoError.apply(void 0, [
        doesNotThrow,
        $929da90f51aae46e$var$getActual(fn)
    ].concat(args));
};
$929da90f51aae46e$var$assert.doesNotReject = function doesNotReject(fn) {
    for(var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++)args[_key5 - 1] = arguments[_key5];
    return $929da90f51aae46e$var$waitForActual(fn).then(function(result) {
        return $929da90f51aae46e$var$expectsNoError.apply(void 0, [
            doesNotReject,
            result
        ].concat(args));
    });
};
$929da90f51aae46e$var$assert.ifError = function ifError(err) {
    if (err !== null && err !== undefined) {
        var message = 'ifError got unwanted exception: ';
        if ($929da90f51aae46e$var$_typeof(err) === 'object' && typeof err.message === 'string') {
            if (err.message.length === 0 && err.constructor) message += err.constructor.name;
            else message += err.message;
        } else message += $929da90f51aae46e$var$inspect(err);
        var newErr = new $am1qC({
            actual: err,
            expected: null,
            operator: 'ifError',
            message: message,
            stackStartFn: ifError
        }); // Make sure we actually have a stack trace!
        var origStack = err.stack;
        if (typeof origStack === 'string') {
            // This will remove any duplicated frames from the error frames taken
            // from within `ifError` and add the original error frames to the newly
            // created ones.
            var tmp2 = origStack.split('\n');
            tmp2.shift(); // Filter all frames existing in err.stack.
            var tmp1 = newErr.stack.split('\n');
            for(var i = 0; i < tmp2.length; i++){
                // Find the first occurrence of the frame.
                var pos = tmp1.indexOf(tmp2[i]);
                if (pos !== -1) {
                    // Only keep new frames.
                    tmp1 = tmp1.slice(0, pos);
                    break;
                }
            }
            newErr.stack = "".concat(tmp1.join('\n'), "\n").concat(tmp2.join('\n'));
        }
        throw newErr;
    }
}; // Expose a strict only variant of assert
function $929da90f51aae46e$var$strict() {
    for(var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++)args[_key6] = arguments[_key6];
    $929da90f51aae46e$var$innerOk.apply(void 0, [
        $929da90f51aae46e$var$strict,
        args.length
    ].concat(args));
}
$929da90f51aae46e$var$assert.strict = $929da90f51aae46e$var$objectAssign($929da90f51aae46e$var$strict, $929da90f51aae46e$var$assert, {
    equal: $929da90f51aae46e$var$assert.strictEqual,
    deepEqual: $929da90f51aae46e$var$assert.deepStrictEqual,
    notEqual: $929da90f51aae46e$var$assert.notStrictEqual,
    notDeepEqual: $929da90f51aae46e$var$assert.notDeepStrictEqual
});
$929da90f51aae46e$var$assert.strict.strict = $929da90f51aae46e$var$assert.strict;

});
parcelRequire.register("5wcsW", function(module, exports) {

$parcel$export(module.exports, "codes", () => $40499c5f066ea3ed$export$e45cb6485273080e, (v) => $40499c5f066ea3ed$export$e45cb6485273080e = v);
var $40499c5f066ea3ed$export$e45cb6485273080e;
// Currently in sync with Node.js lib/internal/errors.js
// https://github.com/nodejs/node/commit/3b044962c48fe313905877a96b5d0894a5404f6f
/* eslint node-core/documented-errors: "error" */ /* eslint node-core/alphabetize-errors: "error" */ /* eslint node-core/prefer-util-format-errors: "error" */ 'use strict'; // The whole point behind this internal module is to allow Node.js to no
// longer be forced to treat every error message change as a semver-major
// change. The NodeError classes here all expose a `code` property whose
// value statically and permanently identifies the error. While the error
// message may change, the code should not.
function $40499c5f066ea3ed$var$_typeof(obj1) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") $40499c5f066ea3ed$var$_typeof = function _typeof(obj) {
        return typeof obj;
    };
    else $40499c5f066ea3ed$var$_typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return $40499c5f066ea3ed$var$_typeof(obj1);
}
function $40499c5f066ea3ed$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $40499c5f066ea3ed$var$_possibleConstructorReturn(self, call) {
    if (call && ($40499c5f066ea3ed$var$_typeof(call) === "object" || typeof call === "function")) return call;
    return $40499c5f066ea3ed$var$_assertThisInitialized(self);
}
function $40499c5f066ea3ed$var$_assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function $40499c5f066ea3ed$var$_getPrototypeOf(o1) {
    $40499c5f066ea3ed$var$_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $40499c5f066ea3ed$var$_getPrototypeOf(o1);
}
function $40499c5f066ea3ed$var$_inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) $40499c5f066ea3ed$var$_setPrototypeOf(subClass, superClass);
}
function $40499c5f066ea3ed$var$_setPrototypeOf(o2, p1) {
    $40499c5f066ea3ed$var$_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $40499c5f066ea3ed$var$_setPrototypeOf(o2, p1);
}
var $40499c5f066ea3ed$var$codes = {}; // Lazy loaded
var $40499c5f066ea3ed$var$assert;
var $40499c5f066ea3ed$var$util;
function $40499c5f066ea3ed$var$createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        $40499c5f066ea3ed$var$_inherits(NodeError, _Base);
        function NodeError(arg1, arg2, arg3) {
            var _this;
            $40499c5f066ea3ed$var$_classCallCheck(this, NodeError);
            _this = $40499c5f066ea3ed$var$_possibleConstructorReturn(this, $40499c5f066ea3ed$var$_getPrototypeOf(NodeError).call(this, getMessage(arg1, arg2, arg3)));
            _this.code = code;
            return _this;
        }
        return NodeError;
    }(Base);
    $40499c5f066ea3ed$var$codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function $40499c5f066ea3ed$var$oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function $40499c5f066ea3ed$var$startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $40499c5f066ea3ed$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function $40499c5f066ea3ed$var$includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
$40499c5f066ea3ed$var$createErrorType('ERR_AMBIGUOUS_ARGUMENT', 'The "%s" argument is ambiguous. %s', TypeError);

$40499c5f066ea3ed$var$createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    if ($40499c5f066ea3ed$var$assert === undefined) $40499c5f066ea3ed$var$assert = (parcelRequire("cAqPD"));
    $40499c5f066ea3ed$var$assert(typeof name === 'string', "'name' must be a string"); // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && $40499c5f066ea3ed$var$startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if ($40499c5f066ea3ed$var$endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat($40499c5f066ea3ed$var$oneOf(expected, 'type'));
    else {
        var type = $40499c5f066ea3ed$var$includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat($40499c5f066ea3ed$var$oneOf(expected, 'type'));
    } // TODO(BridgeAR): Improve the output by showing `null` and similar.
    msg += ". Received type ".concat($40499c5f066ea3ed$var$_typeof(actual));
    return msg;
}, TypeError);

$40499c5f066ea3ed$var$createErrorType('ERR_INVALID_ARG_VALUE', function(name, value) {
    var reason = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'is invalid';
    if ($40499c5f066ea3ed$var$util === undefined) $40499c5f066ea3ed$var$util = (parcelRequire("iZjkG"));
    var inspected = $40499c5f066ea3ed$var$util.inspect(value);
    if (inspected.length > 128) inspected = "".concat(inspected.slice(0, 128), "...");
    return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
}, TypeError, RangeError);
$40499c5f066ea3ed$var$createErrorType('ERR_INVALID_RETURN_VALUE', function(input, name, value) {
    var type;
    if (value && value.constructor && value.constructor.name) type = "instance of ".concat(value.constructor.name);
    else type = "type ".concat($40499c5f066ea3ed$var$_typeof(value));
    return "Expected ".concat(input, " to be returned from the \"").concat(name, "\"") + " function but got ".concat(type, ".");
}, TypeError);

$40499c5f066ea3ed$var$createErrorType('ERR_MISSING_ARGS', function() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
    if ($40499c5f066ea3ed$var$assert === undefined) $40499c5f066ea3ed$var$assert = (parcelRequire("cAqPD"));
    $40499c5f066ea3ed$var$assert(args.length > 0, 'At least one arg needs to be specified');
    var msg = 'The ';
    var len = args.length;
    args = args.map(function(a) {
        return "\"".concat(a, "\"");
    });
    switch(len){
        case 1:
            msg += "".concat(args[0], " argument");
            break;
        case 2:
            msg += "".concat(args[0], " and ").concat(args[1], " arguments");
            break;
        default:
            msg += args.slice(0, len - 1).join(', ');
            msg += ", and ".concat(args[len - 1], " arguments");
            break;
    }
    return "".concat(msg, " must be specified");
}, TypeError);
$40499c5f066ea3ed$export$e45cb6485273080e = $40499c5f066ea3ed$var$codes;

});
parcelRequire.register("iZjkG", function(module, exports) {

var $FkHbz = parcelRequire("FkHbz");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
var $dd2ceb919a237efa$var$getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(obj) {
    var keys = Object.keys(obj);
    var descriptors = {};
    for(var i = 0; i < keys.length; i++)descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
    return descriptors;
};
var $dd2ceb919a237efa$var$formatRegExp = /%[sdj%]/g;
module.exports.format = function(f) {
    if (!$dd2ceb919a237efa$var$isString(f)) {
        var objects = [];
        for(var i = 0; i < arguments.length; i++)objects.push($dd2ceb919a237efa$var$inspect(arguments[i]));
        return objects.join(' ');
    }
    var i = 1;
    var args = arguments;
    var len = args.length;
    var str = String(f).replace($dd2ceb919a237efa$var$formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch(x){
            case '%s':
                return String(args[i++]);
            case '%d':
                return Number(args[i++]);
            case '%j':
                try {
                    return JSON.stringify(args[i++]);
                } catch (_) {
                    return '[Circular]';
                }
            default:
                return x;
        }
    });
    for(var x1 = args[i]; i < len; x1 = args[++i])if ($dd2ceb919a237efa$var$isNull(x1) || !$dd2ceb919a237efa$var$isObject(x1)) str += ' ' + x1;
    else str += ' ' + $dd2ceb919a237efa$var$inspect(x1);
    return str;
};
// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
module.exports.deprecate = function(fn, msg) {
    if (typeof $FkHbz !== 'undefined' && $FkHbz.noDeprecation === true) return fn;
    // Allow for deprecating things in the process of starting up.
    if (typeof $FkHbz === 'undefined') return function() {
        return module.exports.deprecate(fn, msg).apply(this, arguments);
    };
    var warned = false;
    function deprecated() {
        if (!warned) {
            if ($FkHbz.throwDeprecation) throw new Error(msg);
            else if ($FkHbz.traceDeprecation) console.trace(msg);
            else console.error(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
};
var $dd2ceb919a237efa$var$debugs = {};
var $dd2ceb919a237efa$var$debugEnvRegex = /^$/;
var $dd2ceb919a237efa$var$debugEnv;
module.exports.debuglog = function(set) {
    set = set.toUpperCase();
    if (!$dd2ceb919a237efa$var$debugs[set]) {
        if ($dd2ceb919a237efa$var$debugEnvRegex.test(set)) {
            var pid = $FkHbz.pid;
            $dd2ceb919a237efa$var$debugs[set] = function() {
                var msg = module.exports.format.apply(module.exports, arguments);
                console.error('%s %d: %s', set, pid, msg);
            };
        } else $dd2ceb919a237efa$var$debugs[set] = function() {};
    }
    return $dd2ceb919a237efa$var$debugs[set];
};
/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */ /* legacy: obj, showHidden, depth, colors*/ function $dd2ceb919a237efa$var$inspect(obj, opts) {
    // default options
    var ctx = {
        seen: [],
        stylize: $dd2ceb919a237efa$var$stylizeNoColor
    };
    // legacy...
    if (arguments.length >= 3) ctx.depth = arguments[2];
    if (arguments.length >= 4) ctx.colors = arguments[3];
    if ($dd2ceb919a237efa$var$isBoolean(opts)) // legacy...
    ctx.showHidden = opts;
    else if (opts) // got an "options" object
    module.exports._extend(ctx, opts);
    // set default options
    if ($dd2ceb919a237efa$var$isUndefined(ctx.showHidden)) ctx.showHidden = false;
    if ($dd2ceb919a237efa$var$isUndefined(ctx.depth)) ctx.depth = 2;
    if ($dd2ceb919a237efa$var$isUndefined(ctx.colors)) ctx.colors = false;
    if ($dd2ceb919a237efa$var$isUndefined(ctx.customInspect)) ctx.customInspect = true;
    if (ctx.colors) ctx.stylize = $dd2ceb919a237efa$var$stylizeWithColor;
    return $dd2ceb919a237efa$var$formatValue(ctx, obj, ctx.depth);
}
module.exports.inspect = $dd2ceb919a237efa$var$inspect;
// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
$dd2ceb919a237efa$var$inspect.colors = {
    'bold': [
        1,
        22
    ],
    'italic': [
        3,
        23
    ],
    'underline': [
        4,
        24
    ],
    'inverse': [
        7,
        27
    ],
    'white': [
        37,
        39
    ],
    'grey': [
        90,
        39
    ],
    'black': [
        30,
        39
    ],
    'blue': [
        34,
        39
    ],
    'cyan': [
        36,
        39
    ],
    'green': [
        32,
        39
    ],
    'magenta': [
        35,
        39
    ],
    'red': [
        31,
        39
    ],
    'yellow': [
        33,
        39
    ]
};
// Don't use 'blue' not visible on cmd.exe
$dd2ceb919a237efa$var$inspect.styles = {
    'special': 'cyan',
    'number': 'yellow',
    'boolean': 'yellow',
    'undefined': 'grey',
    'null': 'bold',
    'string': 'green',
    'date': 'magenta',
    // "name": intentionally not styling
    'regexp': 'red'
};
function $dd2ceb919a237efa$var$stylizeWithColor(str, styleType) {
    var style = $dd2ceb919a237efa$var$inspect.styles[styleType];
    if (style) return '\u001b[' + $dd2ceb919a237efa$var$inspect.colors[style][0] + 'm' + str + '\u001b[' + $dd2ceb919a237efa$var$inspect.colors[style][1] + 'm';
    else return str;
}
function $dd2ceb919a237efa$var$stylizeNoColor(str, styleType) {
    return str;
}
function $dd2ceb919a237efa$var$arrayToHash(array) {
    var hash = {};
    array.forEach(function(val, idx) {
        hash[val] = true;
    });
    return hash;
}
function $dd2ceb919a237efa$var$formatValue(ctx, value, recurseTimes) {
    // Provide a hook for user-specified inspect functions.
    // Check that value is an object with an inspect function on it
    if (ctx.customInspect && value && $dd2ceb919a237efa$var$isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
    value.inspect !== module.exports.inspect && // Also filter out any prototype objects using the circular check.
    !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!$dd2ceb919a237efa$var$isString(ret)) ret = $dd2ceb919a237efa$var$formatValue(ctx, ret, recurseTimes);
        return ret;
    }
    // Primitive types cannot have properties
    var primitive = $dd2ceb919a237efa$var$formatPrimitive(ctx, value);
    if (primitive) return primitive;
    // Look up the keys of the object.
    var keys = Object.keys(value);
    var visibleKeys = $dd2ceb919a237efa$var$arrayToHash(keys);
    if (ctx.showHidden) keys = Object.getOwnPropertyNames(value);
    // IE doesn't make error fields non-enumerable
    // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
    if ($dd2ceb919a237efa$var$isError(value) && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) return $dd2ceb919a237efa$var$formatError(value);
    // Some type of object without properties can be shortcutted.
    if (keys.length === 0) {
        if ($dd2ceb919a237efa$var$isFunction(value)) {
            var name = value.name ? ': ' + value.name : '';
            return ctx.stylize('[Function' + name + ']', 'special');
        }
        if ($dd2ceb919a237efa$var$isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        if ($dd2ceb919a237efa$var$isDate(value)) return ctx.stylize(Date.prototype.toString.call(value), 'date');
        if ($dd2ceb919a237efa$var$isError(value)) return $dd2ceb919a237efa$var$formatError(value);
    }
    var base = '', array = false, braces = [
        '{',
        '}'
    ];
    // Make Array say that they are Array
    if ($dd2ceb919a237efa$var$isArray(value)) {
        array = true;
        braces = [
            '[',
            ']'
        ];
    }
    // Make functions say that they are functions
    if ($dd2ceb919a237efa$var$isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
    }
    // Make RegExps say that they are RegExps
    if ($dd2ceb919a237efa$var$isRegExp(value)) base = ' ' + RegExp.prototype.toString.call(value);
    // Make dates with properties first say the date
    if ($dd2ceb919a237efa$var$isDate(value)) base = ' ' + Date.prototype.toUTCString.call(value);
    // Make error with message first say the error
    if ($dd2ceb919a237efa$var$isError(value)) base = ' ' + $dd2ceb919a237efa$var$formatError(value);
    if (keys.length === 0 && (!array || value.length == 0)) return braces[0] + base + braces[1];
    if (recurseTimes < 0) {
        if ($dd2ceb919a237efa$var$isRegExp(value)) return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        else return ctx.stylize('[Object]', 'special');
    }
    ctx.seen.push(value);
    var output;
    if (array) output = $dd2ceb919a237efa$var$formatArray(ctx, value, recurseTimes, visibleKeys, keys);
    else output = keys.map(function(key) {
        return $dd2ceb919a237efa$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
    ctx.seen.pop();
    return $dd2ceb919a237efa$var$reduceToSingleString(output, base, braces);
}
function $dd2ceb919a237efa$var$formatPrimitive(ctx, value) {
    if ($dd2ceb919a237efa$var$isUndefined(value)) return ctx.stylize('undefined', 'undefined');
    if ($dd2ceb919a237efa$var$isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '').replace(/'/g, "\\'").replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
    }
    if ($dd2ceb919a237efa$var$isNumber(value)) return ctx.stylize('' + value, 'number');
    if ($dd2ceb919a237efa$var$isBoolean(value)) return ctx.stylize('' + value, 'boolean');
    // For some reason typeof null is "object", so special case here.
    if ($dd2ceb919a237efa$var$isNull(value)) return ctx.stylize('null', 'null');
}
function $dd2ceb919a237efa$var$formatError(value) {
    return '[' + Error.prototype.toString.call(value) + ']';
}
function $dd2ceb919a237efa$var$formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
    var output = [];
    for(var i = 0, l = value.length; i < l; ++i)if ($dd2ceb919a237efa$var$hasOwnProperty(value, String(i))) output.push($dd2ceb919a237efa$var$formatProperty(ctx, value, recurseTimes, visibleKeys, String(i), true));
    else output.push('');
    keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) output.push($dd2ceb919a237efa$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, true));
    });
    return output;
}
function $dd2ceb919a237efa$var$formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
    var name, str, desc;
    desc = Object.getOwnPropertyDescriptor(value, key) || {
        value: value[key]
    };
    if (desc.get) {
        if (desc.set) str = ctx.stylize('[Getter/Setter]', 'special');
        else str = ctx.stylize('[Getter]', 'special');
    } else if (desc.set) str = ctx.stylize('[Setter]', 'special');
    if (!$dd2ceb919a237efa$var$hasOwnProperty(visibleKeys, key)) name = '[' + key + ']';
    if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
            if ($dd2ceb919a237efa$var$isNull(recurseTimes)) str = $dd2ceb919a237efa$var$formatValue(ctx, desc.value, null);
            else str = $dd2ceb919a237efa$var$formatValue(ctx, desc.value, recurseTimes - 1);
            if (str.indexOf('\n') > -1) {
                if (array) str = str.split('\n').map(function(line) {
                    return '  ' + line;
                }).join('\n').substr(2);
                else str = '\n' + str.split('\n').map(function(line) {
                    return '   ' + line;
                }).join('\n');
            }
        } else str = ctx.stylize('[Circular]', 'special');
    }
    if ($dd2ceb919a237efa$var$isUndefined(name)) {
        if (array && key.match(/^\d+$/)) return str;
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
            name = name.substr(1, name.length - 2);
            name = ctx.stylize(name, 'name');
        } else {
            name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
            name = ctx.stylize(name, 'string');
        }
    }
    return name + ': ' + str;
}
function $dd2ceb919a237efa$var$reduceToSingleString(output, base, braces) {
    var numLinesEst = 0;
    var length = output.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf('\n') >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
    }, 0);
    if (length > 60) return braces[0] + (base === '' ? '' : base + '\n ') + ' ' + output.join(',\n  ') + ' ' + braces[1];
    return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
module.exports.types = (parcelRequire("llFH2"));
function $dd2ceb919a237efa$var$isArray(ar) {
    return Array.isArray(ar);
}
module.exports.isArray = $dd2ceb919a237efa$var$isArray;
function $dd2ceb919a237efa$var$isBoolean(arg) {
    return typeof arg === 'boolean';
}
module.exports.isBoolean = $dd2ceb919a237efa$var$isBoolean;
function $dd2ceb919a237efa$var$isNull(arg) {
    return arg === null;
}
module.exports.isNull = $dd2ceb919a237efa$var$isNull;
function $dd2ceb919a237efa$var$isNullOrUndefined(arg) {
    return arg == null;
}
module.exports.isNullOrUndefined = $dd2ceb919a237efa$var$isNullOrUndefined;
function $dd2ceb919a237efa$var$isNumber(arg) {
    return typeof arg === 'number';
}
module.exports.isNumber = $dd2ceb919a237efa$var$isNumber;
function $dd2ceb919a237efa$var$isString(arg) {
    return typeof arg === 'string';
}
module.exports.isString = $dd2ceb919a237efa$var$isString;
function $dd2ceb919a237efa$var$isSymbol(arg) {
    return typeof arg === 'symbol';
}
module.exports.isSymbol = $dd2ceb919a237efa$var$isSymbol;
function $dd2ceb919a237efa$var$isUndefined(arg) {
    return arg === void 0;
}
module.exports.isUndefined = $dd2ceb919a237efa$var$isUndefined;
function $dd2ceb919a237efa$var$isRegExp(re) {
    return $dd2ceb919a237efa$var$isObject(re) && $dd2ceb919a237efa$var$objectToString(re) === '[object RegExp]';
}
module.exports.isRegExp = $dd2ceb919a237efa$var$isRegExp;
module.exports.types.isRegExp = $dd2ceb919a237efa$var$isRegExp;
function $dd2ceb919a237efa$var$isObject(arg) {
    return typeof arg === 'object' && arg !== null;
}
module.exports.isObject = $dd2ceb919a237efa$var$isObject;
function $dd2ceb919a237efa$var$isDate(d) {
    return $dd2ceb919a237efa$var$isObject(d) && $dd2ceb919a237efa$var$objectToString(d) === '[object Date]';
}
module.exports.isDate = $dd2ceb919a237efa$var$isDate;
module.exports.types.isDate = $dd2ceb919a237efa$var$isDate;
function $dd2ceb919a237efa$var$isError(e) {
    return $dd2ceb919a237efa$var$isObject(e) && ($dd2ceb919a237efa$var$objectToString(e) === '[object Error]' || e instanceof Error);
}
module.exports.isError = $dd2ceb919a237efa$var$isError;
module.exports.types.isNativeError = $dd2ceb919a237efa$var$isError;
function $dd2ceb919a237efa$var$isFunction(arg) {
    return typeof arg === 'function';
}
module.exports.isFunction = $dd2ceb919a237efa$var$isFunction;
function $dd2ceb919a237efa$var$isPrimitive(arg) {
    return arg === null || typeof arg === 'boolean' || typeof arg === 'number' || typeof arg === 'string' || typeof arg === 'symbol' || typeof arg === 'undefined';
}
module.exports.isPrimitive = $dd2ceb919a237efa$var$isPrimitive;

module.exports.isBuffer = (parcelRequire("gqCG1"));
function $dd2ceb919a237efa$var$objectToString(o) {
    return Object.prototype.toString.call(o);
}
function $dd2ceb919a237efa$var$pad(n) {
    return n < 10 ? '0' + n.toString(10) : n.toString(10);
}
var $dd2ceb919a237efa$var$months = [
    'Jan',
    'Feb',
    'Mar',
    'Apr',
    'May',
    'Jun',
    'Jul',
    'Aug',
    'Sep',
    'Oct',
    'Nov',
    'Dec'
];
// 26 Feb 16:19:34
function $dd2ceb919a237efa$var$timestamp() {
    var d = new Date();
    var time = [
        $dd2ceb919a237efa$var$pad(d.getHours()),
        $dd2ceb919a237efa$var$pad(d.getMinutes()),
        $dd2ceb919a237efa$var$pad(d.getSeconds())
    ].join(':');
    return [
        d.getDate(),
        $dd2ceb919a237efa$var$months[d.getMonth()],
        time
    ].join(' ');
}
// log is just a thin wrapper to console.log that prepends a timestamp
module.exports.log = function() {
    console.log('%s - %s', $dd2ceb919a237efa$var$timestamp(), module.exports.format.apply(module.exports, arguments));
};

/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */ module.exports.inherits = (parcelRequire("fGyu9"));
module.exports._extend = function(origin, add) {
    // Don't do anything if add isn't an object
    if (!add || !$dd2ceb919a237efa$var$isObject(add)) return origin;
    var keys = Object.keys(add);
    var i = keys.length;
    while(i--)origin[keys[i]] = add[keys[i]];
    return origin;
};
function $dd2ceb919a237efa$var$hasOwnProperty(obj, prop) {
    return Object.prototype.hasOwnProperty.call(obj, prop);
}
var $dd2ceb919a237efa$var$kCustomPromisifiedSymbol = typeof Symbol !== 'undefined' ? Symbol('util.promisify.custom') : undefined;
module.exports.promisify = function promisify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    if ($dd2ceb919a237efa$var$kCustomPromisifiedSymbol && original[$dd2ceb919a237efa$var$kCustomPromisifiedSymbol]) {
        var fn = original[$dd2ceb919a237efa$var$kCustomPromisifiedSymbol];
        if (typeof fn !== 'function') throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        Object.defineProperty(fn, $dd2ceb919a237efa$var$kCustomPromisifiedSymbol, {
            value: fn,
            enumerable: false,
            writable: false,
            configurable: true
        });
        return fn;
    }
    function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
            promiseResolve = resolve;
            promiseReject = reject;
        });
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        args.push(function(err, value) {
            if (err) promiseReject(err);
            else promiseResolve(value);
        });
        try {
            original.apply(this, args);
        } catch (err) {
            promiseReject(err);
        }
        return promise;
    }
    Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
    if ($dd2ceb919a237efa$var$kCustomPromisifiedSymbol) Object.defineProperty(fn, $dd2ceb919a237efa$var$kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
    });
    return Object.defineProperties(fn, $dd2ceb919a237efa$var$getOwnPropertyDescriptors(original));
};
module.exports.promisify.custom = $dd2ceb919a237efa$var$kCustomPromisifiedSymbol;
function $dd2ceb919a237efa$var$callbackifyOnRejected(reason, cb) {
    // `!reason` guard inspired by bluebird (Ref: https://goo.gl/t5IS6M).
    // Because `null` is a special error value in callbacks which means "no error
    // occurred", we error-wrap so the callback consumer can distinguish between
    // "the promise rejected with null" or "the promise fulfilled with undefined".
    if (!reason) {
        var newReason = new Error('Promise was rejected with a falsy value');
        newReason.reason = reason;
        reason = newReason;
    }
    return cb(reason);
}
function $dd2ceb919a237efa$var$callbackify(original) {
    if (typeof original !== 'function') throw new TypeError('The "original" argument must be of type Function');
    // We DO NOT return the promise as it gives the user a false sense that
    // the promise is actually somehow related to the callback's execution
    // and that the callback throwing will reject the promise.
    function callbackified() {
        var args = [];
        for(var i = 0; i < arguments.length; i++)args.push(arguments[i]);
        var maybeCb = args.pop();
        if (typeof maybeCb !== 'function') throw new TypeError('The last argument must be of type Function');
        var self = this;
        var cb = function() {
            return maybeCb.apply(self, arguments);
        };
        // In true node style we process the callback on `nextTick` with all the
        // implications (stack, `uncaughtException`, `async_hooks`)
        original.apply(this, args).then(function(ret) {
            $FkHbz.nextTick(cb.bind(null, null, ret));
        }, function(rej) {
            $FkHbz.nextTick($dd2ceb919a237efa$var$callbackifyOnRejected.bind(null, rej, cb));
        });
    }
    Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
    Object.defineProperties(callbackified, $dd2ceb919a237efa$var$getOwnPropertyDescriptors(original));
    return callbackified;
}
module.exports.callbackify = $dd2ceb919a237efa$var$callbackify;

});
parcelRequire.register("llFH2", function(module, exports) {
// Currently in sync with Node.js lib/internal/util/types.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
'use strict';

var $e5OMN = parcelRequire("e5OMN");

var $biTc4 = parcelRequire("biTc4");

var $gfEUr = parcelRequire("gfEUr");

var $kWJuj = parcelRequire("kWJuj");
function $f8abe68a4cbbd3b9$var$uncurryThis(f) {
    return f.call.bind(f);
}
var $f8abe68a4cbbd3b9$var$BigIntSupported = typeof BigInt !== 'undefined';
var $f8abe68a4cbbd3b9$var$SymbolSupported = typeof Symbol !== 'undefined';
var $f8abe68a4cbbd3b9$var$ObjectToString = $f8abe68a4cbbd3b9$var$uncurryThis(Object.prototype.toString);
var $f8abe68a4cbbd3b9$var$numberValue = $f8abe68a4cbbd3b9$var$uncurryThis(Number.prototype.valueOf);
var $f8abe68a4cbbd3b9$var$stringValue = $f8abe68a4cbbd3b9$var$uncurryThis(String.prototype.valueOf);
var $f8abe68a4cbbd3b9$var$booleanValue = $f8abe68a4cbbd3b9$var$uncurryThis(Boolean.prototype.valueOf);
if ($f8abe68a4cbbd3b9$var$BigIntSupported) var $f8abe68a4cbbd3b9$var$bigIntValue = $f8abe68a4cbbd3b9$var$uncurryThis(BigInt.prototype.valueOf);
if ($f8abe68a4cbbd3b9$var$SymbolSupported) var $f8abe68a4cbbd3b9$var$symbolValue = $f8abe68a4cbbd3b9$var$uncurryThis(Symbol.prototype.valueOf);
function $f8abe68a4cbbd3b9$var$checkBoxedPrimitive(value, prototypeValueOf) {
    if (typeof value !== 'object') return false;
    try {
        prototypeValueOf(value);
        return true;
    } catch (e) {
        return false;
    }
}
module.exports.isArgumentsObject = $e5OMN;
module.exports.isGeneratorFunction = $biTc4;
module.exports.isTypedArray = $kWJuj;
// Taken from here and modified for better browser support
// https://github.com/sindresorhus/p-is-promise/blob/cda35a513bda03f977ad5cde3a079d237e82d7ef/index.js
function $f8abe68a4cbbd3b9$var$isPromise(input) {
    return typeof Promise !== 'undefined' && input instanceof Promise || input !== null && typeof input === 'object' && typeof input.then === 'function' && typeof input.catch === 'function';
}
module.exports.isPromise = $f8abe68a4cbbd3b9$var$isPromise;
function $f8abe68a4cbbd3b9$var$isArrayBufferView(value) {
    if (typeof ArrayBuffer !== 'undefined' && ArrayBuffer.isView) return ArrayBuffer.isView(value);
    return $kWJuj(value) || $f8abe68a4cbbd3b9$var$isDataView(value);
}
module.exports.isArrayBufferView = $f8abe68a4cbbd3b9$var$isArrayBufferView;
function $f8abe68a4cbbd3b9$var$isUint8Array(value) {
    return $gfEUr(value) === 'Uint8Array';
}
module.exports.isUint8Array = $f8abe68a4cbbd3b9$var$isUint8Array;
function $f8abe68a4cbbd3b9$var$isUint8ClampedArray(value) {
    return $gfEUr(value) === 'Uint8ClampedArray';
}
module.exports.isUint8ClampedArray = $f8abe68a4cbbd3b9$var$isUint8ClampedArray;
function $f8abe68a4cbbd3b9$var$isUint16Array(value) {
    return $gfEUr(value) === 'Uint16Array';
}
module.exports.isUint16Array = $f8abe68a4cbbd3b9$var$isUint16Array;
function $f8abe68a4cbbd3b9$var$isUint32Array(value) {
    return $gfEUr(value) === 'Uint32Array';
}
module.exports.isUint32Array = $f8abe68a4cbbd3b9$var$isUint32Array;
function $f8abe68a4cbbd3b9$var$isInt8Array(value) {
    return $gfEUr(value) === 'Int8Array';
}
module.exports.isInt8Array = $f8abe68a4cbbd3b9$var$isInt8Array;
function $f8abe68a4cbbd3b9$var$isInt16Array(value) {
    return $gfEUr(value) === 'Int16Array';
}
module.exports.isInt16Array = $f8abe68a4cbbd3b9$var$isInt16Array;
function $f8abe68a4cbbd3b9$var$isInt32Array(value) {
    return $gfEUr(value) === 'Int32Array';
}
module.exports.isInt32Array = $f8abe68a4cbbd3b9$var$isInt32Array;
function $f8abe68a4cbbd3b9$var$isFloat32Array(value) {
    return $gfEUr(value) === 'Float32Array';
}
module.exports.isFloat32Array = $f8abe68a4cbbd3b9$var$isFloat32Array;
function $f8abe68a4cbbd3b9$var$isFloat64Array(value) {
    return $gfEUr(value) === 'Float64Array';
}
module.exports.isFloat64Array = $f8abe68a4cbbd3b9$var$isFloat64Array;
function $f8abe68a4cbbd3b9$var$isBigInt64Array(value) {
    return $gfEUr(value) === 'BigInt64Array';
}
module.exports.isBigInt64Array = $f8abe68a4cbbd3b9$var$isBigInt64Array;
function $f8abe68a4cbbd3b9$var$isBigUint64Array(value) {
    return $gfEUr(value) === 'BigUint64Array';
}
module.exports.isBigUint64Array = $f8abe68a4cbbd3b9$var$isBigUint64Array;
function $f8abe68a4cbbd3b9$var$isMapToString(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object Map]';
}
$f8abe68a4cbbd3b9$var$isMapToString.working = typeof Map !== 'undefined' && $f8abe68a4cbbd3b9$var$isMapToString(new Map());
function $f8abe68a4cbbd3b9$var$isMap(value) {
    if (typeof Map === 'undefined') return false;
    return $f8abe68a4cbbd3b9$var$isMapToString.working ? $f8abe68a4cbbd3b9$var$isMapToString(value) : value instanceof Map;
}
module.exports.isMap = $f8abe68a4cbbd3b9$var$isMap;
function $f8abe68a4cbbd3b9$var$isSetToString(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object Set]';
}
$f8abe68a4cbbd3b9$var$isSetToString.working = typeof Set !== 'undefined' && $f8abe68a4cbbd3b9$var$isSetToString(new Set());
function $f8abe68a4cbbd3b9$var$isSet(value) {
    if (typeof Set === 'undefined') return false;
    return $f8abe68a4cbbd3b9$var$isSetToString.working ? $f8abe68a4cbbd3b9$var$isSetToString(value) : value instanceof Set;
}
module.exports.isSet = $f8abe68a4cbbd3b9$var$isSet;
function $f8abe68a4cbbd3b9$var$isWeakMapToString(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object WeakMap]';
}
$f8abe68a4cbbd3b9$var$isWeakMapToString.working = typeof WeakMap !== 'undefined' && $f8abe68a4cbbd3b9$var$isWeakMapToString(new WeakMap());
function $f8abe68a4cbbd3b9$var$isWeakMap(value) {
    if (typeof WeakMap === 'undefined') return false;
    return $f8abe68a4cbbd3b9$var$isWeakMapToString.working ? $f8abe68a4cbbd3b9$var$isWeakMapToString(value) : value instanceof WeakMap;
}
module.exports.isWeakMap = $f8abe68a4cbbd3b9$var$isWeakMap;
function $f8abe68a4cbbd3b9$var$isWeakSetToString(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object WeakSet]';
}
$f8abe68a4cbbd3b9$var$isWeakSetToString.working = typeof WeakSet !== 'undefined' && $f8abe68a4cbbd3b9$var$isWeakSetToString(new WeakSet());
function $f8abe68a4cbbd3b9$var$isWeakSet(value) {
    return $f8abe68a4cbbd3b9$var$isWeakSetToString(value);
}
module.exports.isWeakSet = $f8abe68a4cbbd3b9$var$isWeakSet;
function $f8abe68a4cbbd3b9$var$isArrayBufferToString(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object ArrayBuffer]';
}
$f8abe68a4cbbd3b9$var$isArrayBufferToString.working = typeof ArrayBuffer !== 'undefined' && $f8abe68a4cbbd3b9$var$isArrayBufferToString(new ArrayBuffer());
function $f8abe68a4cbbd3b9$var$isArrayBuffer(value) {
    if (typeof ArrayBuffer === 'undefined') return false;
    return $f8abe68a4cbbd3b9$var$isArrayBufferToString.working ? $f8abe68a4cbbd3b9$var$isArrayBufferToString(value) : value instanceof ArrayBuffer;
}
module.exports.isArrayBuffer = $f8abe68a4cbbd3b9$var$isArrayBuffer;
function $f8abe68a4cbbd3b9$var$isDataViewToString(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object DataView]';
}
$f8abe68a4cbbd3b9$var$isDataViewToString.working = typeof ArrayBuffer !== 'undefined' && typeof DataView !== 'undefined' && $f8abe68a4cbbd3b9$var$isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
function $f8abe68a4cbbd3b9$var$isDataView(value) {
    if (typeof DataView === 'undefined') return false;
    return $f8abe68a4cbbd3b9$var$isDataViewToString.working ? $f8abe68a4cbbd3b9$var$isDataViewToString(value) : value instanceof DataView;
}
module.exports.isDataView = $f8abe68a4cbbd3b9$var$isDataView;
// Store a copy of SharedArrayBuffer in case it's deleted elsewhere
var $f8abe68a4cbbd3b9$var$SharedArrayBufferCopy = typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : undefined;
function $f8abe68a4cbbd3b9$var$isSharedArrayBufferToString(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object SharedArrayBuffer]';
}
function $f8abe68a4cbbd3b9$var$isSharedArrayBuffer(value) {
    if (typeof $f8abe68a4cbbd3b9$var$SharedArrayBufferCopy === 'undefined') return false;
    if (typeof $f8abe68a4cbbd3b9$var$isSharedArrayBufferToString.working === 'undefined') $f8abe68a4cbbd3b9$var$isSharedArrayBufferToString.working = $f8abe68a4cbbd3b9$var$isSharedArrayBufferToString(new $f8abe68a4cbbd3b9$var$SharedArrayBufferCopy());
    return $f8abe68a4cbbd3b9$var$isSharedArrayBufferToString.working ? $f8abe68a4cbbd3b9$var$isSharedArrayBufferToString(value) : value instanceof $f8abe68a4cbbd3b9$var$SharedArrayBufferCopy;
}
module.exports.isSharedArrayBuffer = $f8abe68a4cbbd3b9$var$isSharedArrayBuffer;
function $f8abe68a4cbbd3b9$var$isAsyncFunction(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object AsyncFunction]';
}
module.exports.isAsyncFunction = $f8abe68a4cbbd3b9$var$isAsyncFunction;
function $f8abe68a4cbbd3b9$var$isMapIterator(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object Map Iterator]';
}
module.exports.isMapIterator = $f8abe68a4cbbd3b9$var$isMapIterator;
function $f8abe68a4cbbd3b9$var$isSetIterator(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object Set Iterator]';
}
module.exports.isSetIterator = $f8abe68a4cbbd3b9$var$isSetIterator;
function $f8abe68a4cbbd3b9$var$isGeneratorObject(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object Generator]';
}
module.exports.isGeneratorObject = $f8abe68a4cbbd3b9$var$isGeneratorObject;
function $f8abe68a4cbbd3b9$var$isWebAssemblyCompiledModule(value) {
    return $f8abe68a4cbbd3b9$var$ObjectToString(value) === '[object WebAssembly.Module]';
}
module.exports.isWebAssemblyCompiledModule = $f8abe68a4cbbd3b9$var$isWebAssemblyCompiledModule;
function $f8abe68a4cbbd3b9$var$isNumberObject(value) {
    return $f8abe68a4cbbd3b9$var$checkBoxedPrimitive(value, $f8abe68a4cbbd3b9$var$numberValue);
}
module.exports.isNumberObject = $f8abe68a4cbbd3b9$var$isNumberObject;
function $f8abe68a4cbbd3b9$var$isStringObject(value) {
    return $f8abe68a4cbbd3b9$var$checkBoxedPrimitive(value, $f8abe68a4cbbd3b9$var$stringValue);
}
module.exports.isStringObject = $f8abe68a4cbbd3b9$var$isStringObject;
function $f8abe68a4cbbd3b9$var$isBooleanObject(value) {
    return $f8abe68a4cbbd3b9$var$checkBoxedPrimitive(value, $f8abe68a4cbbd3b9$var$booleanValue);
}
module.exports.isBooleanObject = $f8abe68a4cbbd3b9$var$isBooleanObject;
function $f8abe68a4cbbd3b9$var$isBigIntObject(value) {
    return $f8abe68a4cbbd3b9$var$BigIntSupported && $f8abe68a4cbbd3b9$var$checkBoxedPrimitive(value, $f8abe68a4cbbd3b9$var$bigIntValue);
}
module.exports.isBigIntObject = $f8abe68a4cbbd3b9$var$isBigIntObject;
function $f8abe68a4cbbd3b9$var$isSymbolObject(value) {
    return $f8abe68a4cbbd3b9$var$SymbolSupported && $f8abe68a4cbbd3b9$var$checkBoxedPrimitive(value, $f8abe68a4cbbd3b9$var$symbolValue);
}
module.exports.isSymbolObject = $f8abe68a4cbbd3b9$var$isSymbolObject;
function $f8abe68a4cbbd3b9$var$isBoxedPrimitive(value) {
    return $f8abe68a4cbbd3b9$var$isNumberObject(value) || $f8abe68a4cbbd3b9$var$isStringObject(value) || $f8abe68a4cbbd3b9$var$isBooleanObject(value) || $f8abe68a4cbbd3b9$var$isBigIntObject(value) || $f8abe68a4cbbd3b9$var$isSymbolObject(value);
}
module.exports.isBoxedPrimitive = $f8abe68a4cbbd3b9$var$isBoxedPrimitive;
function $f8abe68a4cbbd3b9$var$isAnyArrayBuffer(value) {
    return typeof Uint8Array !== 'undefined' && ($f8abe68a4cbbd3b9$var$isArrayBuffer(value) || $f8abe68a4cbbd3b9$var$isSharedArrayBuffer(value));
}
module.exports.isAnyArrayBuffer = $f8abe68a4cbbd3b9$var$isAnyArrayBuffer;
[
    'isProxy',
    'isExternal',
    'isModuleNamespaceObject'
].forEach(function(method) {
    Object.defineProperty(module.exports, method, {
        enumerable: false,
        value: function() {
            throw new Error(method + ' is not supported in userland');
        }
    });
});

});
parcelRequire.register("e5OMN", function(module, exports) {
'use strict';

var $a428ed622b7705e0$var$hasToStringTag = (parcelRequire("2UJ69"))();

var $iUkwV = parcelRequire("iUkwV");
var $a428ed622b7705e0$var$$toString = $iUkwV('Object.prototype.toString');
var $a428ed622b7705e0$var$isStandardArguments = function isArguments(value) {
    if ($a428ed622b7705e0$var$hasToStringTag && value && typeof value === 'object' && Symbol.toStringTag in value) return false;
    return $a428ed622b7705e0$var$$toString(value) === '[object Arguments]';
};
var $a428ed622b7705e0$var$isLegacyArguments = function isArguments(value) {
    if ($a428ed622b7705e0$var$isStandardArguments(value)) return true;
    return value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && $a428ed622b7705e0$var$$toString(value) !== '[object Array]' && $a428ed622b7705e0$var$$toString(value.callee) === '[object Function]';
};
var $a428ed622b7705e0$var$supportsStandardArguments = function() {
    return $a428ed622b7705e0$var$isStandardArguments(arguments);
}();
$a428ed622b7705e0$var$isStandardArguments.isLegacyArguments = $a428ed622b7705e0$var$isLegacyArguments; // for tests
module.exports = $a428ed622b7705e0$var$supportsStandardArguments ? $a428ed622b7705e0$var$isStandardArguments : $a428ed622b7705e0$var$isLegacyArguments;

});
parcelRequire.register("2UJ69", function(module, exports) {
'use strict';

var $2M1O9 = parcelRequire("2M1O9");
module.exports = function hasToStringTagShams() {
    return $2M1O9() && !!Symbol.toStringTag;
};

});
parcelRequire.register("2M1O9", function(module, exports) {
'use strict';
/* eslint complexity: [2, 18], max-statements: [2, 33] */ module.exports = function hasSymbols() {
    if (typeof Symbol !== 'function' || typeof Object.getOwnPropertySymbols !== 'function') return false;
    if (typeof Symbol.iterator === 'symbol') return true;
    var obj = {};
    var sym = Symbol('test');
    var symObj = Object(sym);
    if (typeof sym === 'string') return false;
    if (Object.prototype.toString.call(sym) !== '[object Symbol]') return false;
    if (Object.prototype.toString.call(symObj) !== '[object Symbol]') return false;
    // temp disabled per https://github.com/ljharb/object.assign/issues/17
    // if (sym instanceof Symbol) { return false; }
    // temp disabled per https://github.com/WebReflection/get-own-property-symbols/issues/4
    // if (!(symObj instanceof Symbol)) { return false; }
    // if (typeof Symbol.prototype.toString !== 'function') { return false; }
    // if (String(sym) !== Symbol.prototype.toString.call(sym)) { return false; }
    var symVal = 42;
    obj[sym] = symVal;
    for(sym in obj)return false;
     // eslint-disable-line no-restricted-syntax, no-unreachable-loop
    if (typeof Object.keys === 'function' && Object.keys(obj).length !== 0) return false;
    if (typeof Object.getOwnPropertyNames === 'function' && Object.getOwnPropertyNames(obj).length !== 0) return false;
    var syms = Object.getOwnPropertySymbols(obj);
    if (syms.length !== 1 || syms[0] !== sym) return false;
    if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) return false;
    if (typeof Object.getOwnPropertyDescriptor === 'function') {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) return false;
    }
    return true;
};

});


parcelRequire.register("iUkwV", function(module, exports) {
'use strict';

var $20vju = parcelRequire("20vju");

var $gkfDL = parcelRequire("gkfDL");
var $dc3d61d252e40a8a$var$$indexOf = $gkfDL($20vju('String.prototype.indexOf'));
module.exports = function callBoundIntrinsic(name, allowMissing) {
    var intrinsic = $20vju(name, !!allowMissing);
    if (typeof intrinsic === 'function' && $dc3d61d252e40a8a$var$$indexOf(name, '.prototype.') > -1) return $gkfDL(intrinsic);
    return intrinsic;
};

});
parcelRequire.register("20vju", function(module, exports) {
'use strict';
var $1763df0740e89cfd$var$undefined;
var $1763df0740e89cfd$var$$SyntaxError = SyntaxError;
var $1763df0740e89cfd$var$$Function = Function;
var $1763df0740e89cfd$var$$TypeError = TypeError;
// eslint-disable-next-line consistent-return
var $1763df0740e89cfd$var$getEvalledConstructor = function(expressionSyntax) {
    try {
        return $1763df0740e89cfd$var$$Function('"use strict"; return (' + expressionSyntax + ').constructor;')();
    } catch (e) {}
};
var $1763df0740e89cfd$var$$gOPD = Object.getOwnPropertyDescriptor;
if ($1763df0740e89cfd$var$$gOPD) try {
    $1763df0740e89cfd$var$$gOPD({}, '');
} catch (e) {
    $1763df0740e89cfd$var$$gOPD = null; // this is IE 8, which has a broken gOPD
}
var $1763df0740e89cfd$var$throwTypeError = function() {
    throw new $1763df0740e89cfd$var$$TypeError();
};
var $1763df0740e89cfd$var$ThrowTypeError = $1763df0740e89cfd$var$$gOPD ? function() {
    try {
        // eslint-disable-next-line no-unused-expressions, no-caller, no-restricted-properties
        arguments.callee; // IE 8 does not throw here
        return $1763df0740e89cfd$var$throwTypeError;
    } catch (calleeThrows) {
        try {
            // IE 8 throws on Object.getOwnPropertyDescriptor(arguments, '')
            return $1763df0740e89cfd$var$$gOPD(arguments, 'callee').get;
        } catch (gOPDthrows) {
            return $1763df0740e89cfd$var$throwTypeError;
        }
    }
}() : $1763df0740e89cfd$var$throwTypeError;

var $1763df0740e89cfd$var$hasSymbols = (parcelRequire("dJhRR"))();
var $1763df0740e89cfd$var$getProto = Object.getPrototypeOf || function(x) {
    return x.__proto__;
}; // eslint-disable-line no-proto
var $1763df0740e89cfd$var$needsEval = {};
var $1763df0740e89cfd$var$TypedArray = typeof Uint8Array === 'undefined' ? $1763df0740e89cfd$var$undefined : $1763df0740e89cfd$var$getProto(Uint8Array);
var $1763df0740e89cfd$var$INTRINSICS = {
    '%AggregateError%': typeof AggregateError === 'undefined' ? $1763df0740e89cfd$var$undefined : AggregateError,
    '%Array%': Array,
    '%ArrayBuffer%': typeof ArrayBuffer === 'undefined' ? $1763df0740e89cfd$var$undefined : ArrayBuffer,
    '%ArrayIteratorPrototype%': $1763df0740e89cfd$var$hasSymbols ? $1763df0740e89cfd$var$getProto([][Symbol.iterator]()) : $1763df0740e89cfd$var$undefined,
    '%AsyncFromSyncIteratorPrototype%': $1763df0740e89cfd$var$undefined,
    '%AsyncFunction%': $1763df0740e89cfd$var$needsEval,
    '%AsyncGenerator%': $1763df0740e89cfd$var$needsEval,
    '%AsyncGeneratorFunction%': $1763df0740e89cfd$var$needsEval,
    '%AsyncIteratorPrototype%': $1763df0740e89cfd$var$needsEval,
    '%Atomics%': typeof Atomics === 'undefined' ? $1763df0740e89cfd$var$undefined : Atomics,
    '%BigInt%': typeof BigInt === 'undefined' ? $1763df0740e89cfd$var$undefined : BigInt,
    '%Boolean%': Boolean,
    '%DataView%': typeof DataView === 'undefined' ? $1763df0740e89cfd$var$undefined : DataView,
    '%Date%': Date,
    '%decodeURI%': decodeURI,
    '%decodeURIComponent%': decodeURIComponent,
    '%encodeURI%': encodeURI,
    '%encodeURIComponent%': encodeURIComponent,
    '%Error%': Error,
    '%eval%': eval,
    '%EvalError%': EvalError,
    '%Float32Array%': typeof Float32Array === 'undefined' ? $1763df0740e89cfd$var$undefined : Float32Array,
    '%Float64Array%': typeof Float64Array === 'undefined' ? $1763df0740e89cfd$var$undefined : Float64Array,
    '%FinalizationRegistry%': typeof FinalizationRegistry === 'undefined' ? $1763df0740e89cfd$var$undefined : FinalizationRegistry,
    '%Function%': $1763df0740e89cfd$var$$Function,
    '%GeneratorFunction%': $1763df0740e89cfd$var$needsEval,
    '%Int8Array%': typeof Int8Array === 'undefined' ? $1763df0740e89cfd$var$undefined : Int8Array,
    '%Int16Array%': typeof Int16Array === 'undefined' ? $1763df0740e89cfd$var$undefined : Int16Array,
    '%Int32Array%': typeof Int32Array === 'undefined' ? $1763df0740e89cfd$var$undefined : Int32Array,
    '%isFinite%': isFinite,
    '%isNaN%': isNaN,
    '%IteratorPrototype%': $1763df0740e89cfd$var$hasSymbols ? $1763df0740e89cfd$var$getProto($1763df0740e89cfd$var$getProto([][Symbol.iterator]())) : $1763df0740e89cfd$var$undefined,
    '%JSON%': typeof JSON === 'object' ? JSON : $1763df0740e89cfd$var$undefined,
    '%Map%': typeof Map === 'undefined' ? $1763df0740e89cfd$var$undefined : Map,
    '%MapIteratorPrototype%': typeof Map === 'undefined' || !$1763df0740e89cfd$var$hasSymbols ? $1763df0740e89cfd$var$undefined : $1763df0740e89cfd$var$getProto(new Map()[Symbol.iterator]()),
    '%Math%': Math,
    '%Number%': Number,
    '%Object%': Object,
    '%parseFloat%': parseFloat,
    '%parseInt%': parseInt,
    '%Promise%': typeof Promise === 'undefined' ? $1763df0740e89cfd$var$undefined : Promise,
    '%Proxy%': typeof Proxy === 'undefined' ? $1763df0740e89cfd$var$undefined : Proxy,
    '%RangeError%': RangeError,
    '%ReferenceError%': ReferenceError,
    '%Reflect%': typeof Reflect === 'undefined' ? $1763df0740e89cfd$var$undefined : Reflect,
    '%RegExp%': RegExp,
    '%Set%': typeof Set === 'undefined' ? $1763df0740e89cfd$var$undefined : Set,
    '%SetIteratorPrototype%': typeof Set === 'undefined' || !$1763df0740e89cfd$var$hasSymbols ? $1763df0740e89cfd$var$undefined : $1763df0740e89cfd$var$getProto(new Set()[Symbol.iterator]()),
    '%SharedArrayBuffer%': typeof SharedArrayBuffer === 'undefined' ? $1763df0740e89cfd$var$undefined : SharedArrayBuffer,
    '%String%': String,
    '%StringIteratorPrototype%': $1763df0740e89cfd$var$hasSymbols ? $1763df0740e89cfd$var$getProto(''[Symbol.iterator]()) : $1763df0740e89cfd$var$undefined,
    '%Symbol%': $1763df0740e89cfd$var$hasSymbols ? Symbol : $1763df0740e89cfd$var$undefined,
    '%SyntaxError%': $1763df0740e89cfd$var$$SyntaxError,
    '%ThrowTypeError%': $1763df0740e89cfd$var$ThrowTypeError,
    '%TypedArray%': $1763df0740e89cfd$var$TypedArray,
    '%TypeError%': $1763df0740e89cfd$var$$TypeError,
    '%Uint8Array%': typeof Uint8Array === 'undefined' ? $1763df0740e89cfd$var$undefined : Uint8Array,
    '%Uint8ClampedArray%': typeof Uint8ClampedArray === 'undefined' ? $1763df0740e89cfd$var$undefined : Uint8ClampedArray,
    '%Uint16Array%': typeof Uint16Array === 'undefined' ? $1763df0740e89cfd$var$undefined : Uint16Array,
    '%Uint32Array%': typeof Uint32Array === 'undefined' ? $1763df0740e89cfd$var$undefined : Uint32Array,
    '%URIError%': URIError,
    '%WeakMap%': typeof WeakMap === 'undefined' ? $1763df0740e89cfd$var$undefined : WeakMap,
    '%WeakRef%': typeof WeakRef === 'undefined' ? $1763df0740e89cfd$var$undefined : WeakRef,
    '%WeakSet%': typeof WeakSet === 'undefined' ? $1763df0740e89cfd$var$undefined : WeakSet
};
var $1763df0740e89cfd$var$doEval = function doEval(name) {
    var value;
    if (name === '%AsyncFunction%') value = $1763df0740e89cfd$var$getEvalledConstructor('async function () {}');
    else if (name === '%GeneratorFunction%') value = $1763df0740e89cfd$var$getEvalledConstructor('function* () {}');
    else if (name === '%AsyncGeneratorFunction%') value = $1763df0740e89cfd$var$getEvalledConstructor('async function* () {}');
    else if (name === '%AsyncGenerator%') {
        var fn = doEval('%AsyncGeneratorFunction%');
        if (fn) value = fn.prototype;
    } else if (name === '%AsyncIteratorPrototype%') {
        var gen = doEval('%AsyncGenerator%');
        if (gen) value = $1763df0740e89cfd$var$getProto(gen.prototype);
    }
    $1763df0740e89cfd$var$INTRINSICS[name] = value;
    return value;
};
var $1763df0740e89cfd$var$LEGACY_ALIASES = {
    '%ArrayBufferPrototype%': [
        'ArrayBuffer',
        'prototype'
    ],
    '%ArrayPrototype%': [
        'Array',
        'prototype'
    ],
    '%ArrayProto_entries%': [
        'Array',
        'prototype',
        'entries'
    ],
    '%ArrayProto_forEach%': [
        'Array',
        'prototype',
        'forEach'
    ],
    '%ArrayProto_keys%': [
        'Array',
        'prototype',
        'keys'
    ],
    '%ArrayProto_values%': [
        'Array',
        'prototype',
        'values'
    ],
    '%AsyncFunctionPrototype%': [
        'AsyncFunction',
        'prototype'
    ],
    '%AsyncGenerator%': [
        'AsyncGeneratorFunction',
        'prototype'
    ],
    '%AsyncGeneratorPrototype%': [
        'AsyncGeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%BooleanPrototype%': [
        'Boolean',
        'prototype'
    ],
    '%DataViewPrototype%': [
        'DataView',
        'prototype'
    ],
    '%DatePrototype%': [
        'Date',
        'prototype'
    ],
    '%ErrorPrototype%': [
        'Error',
        'prototype'
    ],
    '%EvalErrorPrototype%': [
        'EvalError',
        'prototype'
    ],
    '%Float32ArrayPrototype%': [
        'Float32Array',
        'prototype'
    ],
    '%Float64ArrayPrototype%': [
        'Float64Array',
        'prototype'
    ],
    '%FunctionPrototype%': [
        'Function',
        'prototype'
    ],
    '%Generator%': [
        'GeneratorFunction',
        'prototype'
    ],
    '%GeneratorPrototype%': [
        'GeneratorFunction',
        'prototype',
        'prototype'
    ],
    '%Int8ArrayPrototype%': [
        'Int8Array',
        'prototype'
    ],
    '%Int16ArrayPrototype%': [
        'Int16Array',
        'prototype'
    ],
    '%Int32ArrayPrototype%': [
        'Int32Array',
        'prototype'
    ],
    '%JSONParse%': [
        'JSON',
        'parse'
    ],
    '%JSONStringify%': [
        'JSON',
        'stringify'
    ],
    '%MapPrototype%': [
        'Map',
        'prototype'
    ],
    '%NumberPrototype%': [
        'Number',
        'prototype'
    ],
    '%ObjectPrototype%': [
        'Object',
        'prototype'
    ],
    '%ObjProto_toString%': [
        'Object',
        'prototype',
        'toString'
    ],
    '%ObjProto_valueOf%': [
        'Object',
        'prototype',
        'valueOf'
    ],
    '%PromisePrototype%': [
        'Promise',
        'prototype'
    ],
    '%PromiseProto_then%': [
        'Promise',
        'prototype',
        'then'
    ],
    '%Promise_all%': [
        'Promise',
        'all'
    ],
    '%Promise_reject%': [
        'Promise',
        'reject'
    ],
    '%Promise_resolve%': [
        'Promise',
        'resolve'
    ],
    '%RangeErrorPrototype%': [
        'RangeError',
        'prototype'
    ],
    '%ReferenceErrorPrototype%': [
        'ReferenceError',
        'prototype'
    ],
    '%RegExpPrototype%': [
        'RegExp',
        'prototype'
    ],
    '%SetPrototype%': [
        'Set',
        'prototype'
    ],
    '%SharedArrayBufferPrototype%': [
        'SharedArrayBuffer',
        'prototype'
    ],
    '%StringPrototype%': [
        'String',
        'prototype'
    ],
    '%SymbolPrototype%': [
        'Symbol',
        'prototype'
    ],
    '%SyntaxErrorPrototype%': [
        'SyntaxError',
        'prototype'
    ],
    '%TypedArrayPrototype%': [
        'TypedArray',
        'prototype'
    ],
    '%TypeErrorPrototype%': [
        'TypeError',
        'prototype'
    ],
    '%Uint8ArrayPrototype%': [
        'Uint8Array',
        'prototype'
    ],
    '%Uint8ClampedArrayPrototype%': [
        'Uint8ClampedArray',
        'prototype'
    ],
    '%Uint16ArrayPrototype%': [
        'Uint16Array',
        'prototype'
    ],
    '%Uint32ArrayPrototype%': [
        'Uint32Array',
        'prototype'
    ],
    '%URIErrorPrototype%': [
        'URIError',
        'prototype'
    ],
    '%WeakMapPrototype%': [
        'WeakMap',
        'prototype'
    ],
    '%WeakSetPrototype%': [
        'WeakSet',
        'prototype'
    ]
};

var $bT49A = parcelRequire("bT49A");

var $gqRnI = parcelRequire("gqRnI");
var $1763df0740e89cfd$var$$concat = $bT49A.call(Function.call, Array.prototype.concat);
var $1763df0740e89cfd$var$$spliceApply = $bT49A.call(Function.apply, Array.prototype.splice);
var $1763df0740e89cfd$var$$replace = $bT49A.call(Function.call, String.prototype.replace);
var $1763df0740e89cfd$var$$strSlice = $bT49A.call(Function.call, String.prototype.slice);
/* adapted from https://github.com/lodash/lodash/blob/4.17.15/dist/lodash.js#L6735-L6744 */ var $1763df0740e89cfd$var$rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
var $1763df0740e89cfd$var$reEscapeChar = /\\(\\)?/g; /** Used to match backslashes in property paths. */ 
var $1763df0740e89cfd$var$stringToPath = function stringToPath(string) {
    var first = $1763df0740e89cfd$var$$strSlice(string, 0, 1);
    var last = $1763df0740e89cfd$var$$strSlice(string, -1);
    if (first === '%' && last !== '%') throw new $1763df0740e89cfd$var$$SyntaxError('invalid intrinsic syntax, expected closing `%`');
    else if (last === '%' && first !== '%') throw new $1763df0740e89cfd$var$$SyntaxError('invalid intrinsic syntax, expected opening `%`');
    var result = [];
    $1763df0740e89cfd$var$$replace(string, $1763df0740e89cfd$var$rePropName, function(match, number, quote, subString) {
        result[result.length] = quote ? $1763df0740e89cfd$var$$replace(subString, $1763df0740e89cfd$var$reEscapeChar, '$1') : number || match;
    });
    return result;
};
/* end adaptation */ var $1763df0740e89cfd$var$getBaseIntrinsic = function getBaseIntrinsic(name, allowMissing) {
    var intrinsicName = name;
    var alias;
    if ($gqRnI($1763df0740e89cfd$var$LEGACY_ALIASES, intrinsicName)) {
        alias = $1763df0740e89cfd$var$LEGACY_ALIASES[intrinsicName];
        intrinsicName = '%' + alias[0] + '%';
    }
    if ($gqRnI($1763df0740e89cfd$var$INTRINSICS, intrinsicName)) {
        var value = $1763df0740e89cfd$var$INTRINSICS[intrinsicName];
        if (value === $1763df0740e89cfd$var$needsEval) value = $1763df0740e89cfd$var$doEval(intrinsicName);
        if (typeof value === 'undefined' && !allowMissing) throw new $1763df0740e89cfd$var$$TypeError('intrinsic ' + name + ' exists, but is not available. Please file an issue!');
        return {
            alias: alias,
            name: intrinsicName,
            value: value
        };
    }
    throw new $1763df0740e89cfd$var$$SyntaxError('intrinsic ' + name + ' does not exist!');
};
module.exports = function GetIntrinsic(name, allowMissing) {
    if (typeof name !== 'string' || name.length === 0) throw new $1763df0740e89cfd$var$$TypeError('intrinsic name must be a non-empty string');
    if (arguments.length > 1 && typeof allowMissing !== 'boolean') throw new $1763df0740e89cfd$var$$TypeError('"allowMissing" argument must be a boolean');
    var parts = $1763df0740e89cfd$var$stringToPath(name);
    var intrinsicBaseName = parts.length > 0 ? parts[0] : '';
    var intrinsic = $1763df0740e89cfd$var$getBaseIntrinsic('%' + intrinsicBaseName + '%', allowMissing);
    var intrinsicRealName = intrinsic.name;
    var value = intrinsic.value;
    var skipFurtherCaching = false;
    var alias = intrinsic.alias;
    if (alias) {
        intrinsicBaseName = alias[0];
        $1763df0740e89cfd$var$$spliceApply(parts, $1763df0740e89cfd$var$$concat([
            0,
            1
        ], alias));
    }
    for(var i = 1, isOwn = true; i < parts.length; i += 1){
        var part = parts[i];
        var first = $1763df0740e89cfd$var$$strSlice(part, 0, 1);
        var last = $1763df0740e89cfd$var$$strSlice(part, -1);
        if ((first === '"' || first === "'" || first === '`' || last === '"' || last === "'" || last === '`') && first !== last) throw new $1763df0740e89cfd$var$$SyntaxError('property names with quotes must have matching quotes');
        if (part === 'constructor' || !isOwn) skipFurtherCaching = true;
        intrinsicBaseName += '.' + part;
        intrinsicRealName = '%' + intrinsicBaseName + '%';
        if ($gqRnI($1763df0740e89cfd$var$INTRINSICS, intrinsicRealName)) value = $1763df0740e89cfd$var$INTRINSICS[intrinsicRealName];
        else if (value != null) {
            if (!(part in value)) {
                if (!allowMissing) throw new $1763df0740e89cfd$var$$TypeError('base intrinsic for ' + name + ' exists, but the property is not available.');
                return void 0;
            }
            if ($1763df0740e89cfd$var$$gOPD && i + 1 >= parts.length) {
                var desc = $1763df0740e89cfd$var$$gOPD(value, part);
                isOwn = !!desc;
                // By convention, when a data property is converted to an accessor
                // property to emulate a data property that does not suffer from
                // the override mistake, that accessor's getter is marked with
                // an `originalValue` property. Here, when we detect this, we
                // uphold the illusion by pretending to see that original data
                // property, i.e., returning the value rather than the getter
                // itself.
                if (isOwn && 'get' in desc && !('originalValue' in desc.get)) value = desc.get;
                else value = value[part];
            } else {
                isOwn = $gqRnI(value, part);
                value = value[part];
            }
            if (isOwn && !skipFurtherCaching) $1763df0740e89cfd$var$INTRINSICS[intrinsicRealName] = value;
        }
    }
    return value;
};

});
parcelRequire.register("dJhRR", function(module, exports) {
'use strict';
var $9fed56815d0d5365$var$origSymbol = typeof Symbol !== 'undefined' && Symbol;

var $2M1O9 = parcelRequire("2M1O9");
module.exports = function hasNativeSymbols() {
    if (typeof $9fed56815d0d5365$var$origSymbol !== 'function') return false;
    if (typeof Symbol !== 'function') return false;
    if (typeof $9fed56815d0d5365$var$origSymbol('foo') !== 'symbol') return false;
    if (typeof Symbol('bar') !== 'symbol') return false;
    return $2M1O9();
};

});

parcelRequire.register("bT49A", function(module, exports) {
'use strict';

var $2c6ip = parcelRequire("2c6ip");
module.exports = Function.prototype.bind || $2c6ip;

});
parcelRequire.register("2c6ip", function(module, exports) {
'use strict';
/* eslint no-invalid-this: 1 */ var $199195f9ff5156fd$var$ERROR_MESSAGE = 'Function.prototype.bind called on incompatible ';
var $199195f9ff5156fd$var$slice = Array.prototype.slice;
var $199195f9ff5156fd$var$toStr = Object.prototype.toString;
var $199195f9ff5156fd$var$funcType = '[object Function]';
module.exports = function bind(that) {
    var target = this;
    if (typeof target !== 'function' || $199195f9ff5156fd$var$toStr.call(target) !== $199195f9ff5156fd$var$funcType) throw new TypeError($199195f9ff5156fd$var$ERROR_MESSAGE + target);
    var args = $199195f9ff5156fd$var$slice.call(arguments, 1);
    var bound;
    var binder = function() {
        if (this instanceof bound) {
            var result = target.apply(this, args.concat($199195f9ff5156fd$var$slice.call(arguments)));
            if (Object(result) === result) return result;
            return this;
        } else return target.apply(that, args.concat($199195f9ff5156fd$var$slice.call(arguments)));
    };
    var boundLength = Math.max(0, target.length - args.length);
    var boundArgs = [];
    for(var i = 0; i < boundLength; i++)boundArgs.push('$' + i);
    bound = Function('binder', 'return function (' + boundArgs.join(',') + '){ return binder.apply(this,arguments); }')(binder);
    if (target.prototype) {
        var Empty = function Empty() {};
        Empty.prototype = target.prototype;
        bound.prototype = new Empty();
        Empty.prototype = null;
    }
    return bound;
};

});


parcelRequire.register("gqRnI", function(module, exports) {
'use strict';

var $bT49A = parcelRequire("bT49A");
module.exports = $bT49A.call(Function.call, Object.prototype.hasOwnProperty);

});


parcelRequire.register("gkfDL", function(module, exports) {
'use strict';

var $bT49A = parcelRequire("bT49A");

var $20vju = parcelRequire("20vju");
var $be2aa5702c1855a9$var$$apply = $20vju('%Function.prototype.apply%');
var $be2aa5702c1855a9$var$$call = $20vju('%Function.prototype.call%');
var $be2aa5702c1855a9$var$$reflectApply = $20vju('%Reflect.apply%', true) || $bT49A.call($be2aa5702c1855a9$var$$call, $be2aa5702c1855a9$var$$apply);
var $be2aa5702c1855a9$var$$gOPD = $20vju('%Object.getOwnPropertyDescriptor%', true);
var $be2aa5702c1855a9$var$$defineProperty = $20vju('%Object.defineProperty%', true);
var $be2aa5702c1855a9$var$$max = $20vju('%Math.max%');
if ($be2aa5702c1855a9$var$$defineProperty) try {
    $be2aa5702c1855a9$var$$defineProperty({}, 'a', {
        value: 1
    });
} catch (e) {
    // IE 8 has a broken defineProperty
    $be2aa5702c1855a9$var$$defineProperty = null;
}
module.exports = function callBind(originalFunction) {
    var func = $be2aa5702c1855a9$var$$reflectApply($bT49A, $be2aa5702c1855a9$var$$call, arguments);
    if ($be2aa5702c1855a9$var$$gOPD && $be2aa5702c1855a9$var$$defineProperty) {
        var desc = $be2aa5702c1855a9$var$$gOPD(func, 'length');
        if (desc.configurable) // original length, plus the receiver, minus any additional arguments (after the receiver)
        $be2aa5702c1855a9$var$$defineProperty(func, 'length', {
            value: 1 + $be2aa5702c1855a9$var$$max(0, originalFunction.length - (arguments.length - 1))
        });
    }
    return func;
};
var $be2aa5702c1855a9$var$applyBind = function applyBind() {
    return $be2aa5702c1855a9$var$$reflectApply($bT49A, $be2aa5702c1855a9$var$$apply, arguments);
};
if ($be2aa5702c1855a9$var$$defineProperty) $be2aa5702c1855a9$var$$defineProperty(module.exports, 'apply', {
    value: $be2aa5702c1855a9$var$applyBind
});
else module.exports.apply = $be2aa5702c1855a9$var$applyBind;

});



parcelRequire.register("biTc4", function(module, exports) {
'use strict';
var $83ac3075a2d1823b$var$toStr = Object.prototype.toString;
var $83ac3075a2d1823b$var$fnToStr = Function.prototype.toString;
var $83ac3075a2d1823b$var$isFnRegex = /^\s*(?:function)?\*/;

var $83ac3075a2d1823b$var$hasToStringTag = (parcelRequire("2UJ69"))();
var $83ac3075a2d1823b$var$getProto = Object.getPrototypeOf;
var $83ac3075a2d1823b$var$getGeneratorFunc = function() {
    if (!$83ac3075a2d1823b$var$hasToStringTag) return false;
    try {
        return Function('return function*() {}')();
    } catch (e) {}
};
var $83ac3075a2d1823b$var$GeneratorFunction;
module.exports = function isGeneratorFunction(fn) {
    if (typeof fn !== 'function') return false;
    if ($83ac3075a2d1823b$var$isFnRegex.test($83ac3075a2d1823b$var$fnToStr.call(fn))) return true;
    if (!$83ac3075a2d1823b$var$hasToStringTag) {
        var str = $83ac3075a2d1823b$var$toStr.call(fn);
        return str === '[object GeneratorFunction]';
    }
    if (!$83ac3075a2d1823b$var$getProto) return false;
    if (typeof $83ac3075a2d1823b$var$GeneratorFunction === 'undefined') {
        var generatorFunc = $83ac3075a2d1823b$var$getGeneratorFunc();
        $83ac3075a2d1823b$var$GeneratorFunction = generatorFunc ? $83ac3075a2d1823b$var$getProto(generatorFunc) : false;
    }
    return $83ac3075a2d1823b$var$getProto(fn) === $83ac3075a2d1823b$var$GeneratorFunction;
};

});

parcelRequire.register("gfEUr", function(module, exports) {
'use strict';

var $dhplt = parcelRequire("dhplt");

var $jtwOE = parcelRequire("jtwOE");

var $iUkwV = parcelRequire("iUkwV");
var $bd4dc7c8927040f6$var$$toString = $iUkwV('Object.prototype.toString');

var $bd4dc7c8927040f6$var$hasToStringTag = (parcelRequire("2UJ69"))();
var $bd4dc7c8927040f6$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
var $bd4dc7c8927040f6$var$typedArrays = $jtwOE();
var $bd4dc7c8927040f6$var$$slice = $iUkwV('String.prototype.slice');
var $bd4dc7c8927040f6$var$toStrTags = {};

var $fxFd9 = parcelRequire("fxFd9");
var $bd4dc7c8927040f6$var$getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if ($bd4dc7c8927040f6$var$hasToStringTag && $fxFd9 && $bd4dc7c8927040f6$var$getPrototypeOf) $dhplt($bd4dc7c8927040f6$var$typedArrays, function(typedArray) {
    if (typeof $bd4dc7c8927040f6$var$g[typedArray] === 'function') {
        var arr = new $bd4dc7c8927040f6$var$g[typedArray]();
        if (Symbol.toStringTag in arr) {
            var proto = $bd4dc7c8927040f6$var$getPrototypeOf(arr);
            var descriptor = $fxFd9(proto, Symbol.toStringTag);
            if (!descriptor) {
                var superProto = $bd4dc7c8927040f6$var$getPrototypeOf(proto);
                descriptor = $fxFd9(superProto, Symbol.toStringTag);
            }
            $bd4dc7c8927040f6$var$toStrTags[typedArray] = descriptor.get;
        }
    }
});
var $bd4dc7c8927040f6$var$tryTypedArrays = function tryAllTypedArrays(value) {
    var foundName = false;
    $dhplt($bd4dc7c8927040f6$var$toStrTags, function(getter, typedArray) {
        if (!foundName) try {
            var name = getter.call(value);
            if (name === typedArray) foundName = name;
        } catch (e) {}
    });
    return foundName;
};

var $kWJuj = parcelRequire("kWJuj");
module.exports = function whichTypedArray(value) {
    if (!$kWJuj(value)) return false;
    if (!$bd4dc7c8927040f6$var$hasToStringTag || !(Symbol.toStringTag in value)) return $bd4dc7c8927040f6$var$$slice($bd4dc7c8927040f6$var$$toString(value), 8, -1);
    return $bd4dc7c8927040f6$var$tryTypedArrays(value);
};

});
parcelRequire.register("dhplt", function(module, exports) {
var $9ab085f72e6e1842$var$hasOwn = Object.prototype.hasOwnProperty;
var $9ab085f72e6e1842$var$toString = Object.prototype.toString;
module.exports = function forEach(obj, fn, ctx) {
    if ($9ab085f72e6e1842$var$toString.call(fn) !== '[object Function]') throw new TypeError('iterator must be a function');
    var l = obj.length;
    if (l === +l) for(var i = 0; i < l; i++)fn.call(ctx, obj[i], i, obj);
    else {
        for(var k in obj)if ($9ab085f72e6e1842$var$hasOwn.call(obj, k)) fn.call(ctx, obj[k], k, obj);
    }
};

});

parcelRequire.register("jtwOE", function(module, exports) {
'use strict';
var $e2da2e54bc0f5a89$var$possibleNames = [
    'BigInt64Array',
    'BigUint64Array',
    'Float32Array',
    'Float64Array',
    'Int16Array',
    'Int32Array',
    'Int8Array',
    'Uint16Array',
    'Uint32Array',
    'Uint8Array',
    'Uint8ClampedArray'
];
var $e2da2e54bc0f5a89$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
module.exports = function availableTypedArrays() {
    var out = [];
    for(var i = 0; i < $e2da2e54bc0f5a89$var$possibleNames.length; i++)if (typeof $e2da2e54bc0f5a89$var$g[$e2da2e54bc0f5a89$var$possibleNames[i]] === 'function') out[out.length] = $e2da2e54bc0f5a89$var$possibleNames[i];
    return out;
};

});

parcelRequire.register("fxFd9", function(module, exports) {
'use strict';

var $20vju = parcelRequire("20vju");
var $b509e7bab30a4d8e$var$$gOPD = $20vju('%Object.getOwnPropertyDescriptor%', true);
if ($b509e7bab30a4d8e$var$$gOPD) try {
    $b509e7bab30a4d8e$var$$gOPD([], 'length');
} catch (e) {
    // IE 8 has a broken gOPD
    $b509e7bab30a4d8e$var$$gOPD = null;
}
module.exports = $b509e7bab30a4d8e$var$$gOPD;

});

parcelRequire.register("kWJuj", function(module, exports) {
'use strict';

var $dhplt = parcelRequire("dhplt");

var $jtwOE = parcelRequire("jtwOE");

var $iUkwV = parcelRequire("iUkwV");
var $f3fc825c30e91653$var$$toString = $iUkwV('Object.prototype.toString');

var $f3fc825c30e91653$var$hasToStringTag = (parcelRequire("2UJ69"))();
var $f3fc825c30e91653$var$g = typeof globalThis === 'undefined' ? $parcel$global : globalThis;
var $f3fc825c30e91653$var$typedArrays = $jtwOE();
var $f3fc825c30e91653$var$$indexOf = $iUkwV('Array.prototype.indexOf', true) || function indexOf(array, value) {
    for(var i = 0; i < array.length; i += 1){
        if (array[i] === value) return i;
    }
    return -1;
};
var $f3fc825c30e91653$var$$slice = $iUkwV('String.prototype.slice');
var $f3fc825c30e91653$var$toStrTags = {};

var $fxFd9 = parcelRequire("fxFd9");
var $f3fc825c30e91653$var$getPrototypeOf = Object.getPrototypeOf; // require('getprototypeof');
if ($f3fc825c30e91653$var$hasToStringTag && $fxFd9 && $f3fc825c30e91653$var$getPrototypeOf) $dhplt($f3fc825c30e91653$var$typedArrays, function(typedArray) {
    var arr = new $f3fc825c30e91653$var$g[typedArray]();
    if (Symbol.toStringTag in arr) {
        var proto = $f3fc825c30e91653$var$getPrototypeOf(arr);
        var descriptor = $fxFd9(proto, Symbol.toStringTag);
        if (!descriptor) {
            var superProto = $f3fc825c30e91653$var$getPrototypeOf(proto);
            descriptor = $fxFd9(superProto, Symbol.toStringTag);
        }
        $f3fc825c30e91653$var$toStrTags[typedArray] = descriptor.get;
    }
});
var $f3fc825c30e91653$var$tryTypedArrays = function tryAllTypedArrays(value) {
    var anyTrue = false;
    $dhplt($f3fc825c30e91653$var$toStrTags, function(getter, typedArray) {
        if (!anyTrue) try {
            anyTrue = getter.call(value) === typedArray;
        } catch (e) {}
    });
    return anyTrue;
};
module.exports = function isTypedArray(value) {
    if (!value || typeof value !== 'object') return false;
    if (!$f3fc825c30e91653$var$hasToStringTag || !(Symbol.toStringTag in value)) {
        var tag = $f3fc825c30e91653$var$$slice($f3fc825c30e91653$var$$toString(value), 8, -1);
        return $f3fc825c30e91653$var$$indexOf($f3fc825c30e91653$var$typedArrays, tag) > -1;
    }
    if (!$fxFd9) return false;
    return $f3fc825c30e91653$var$tryTypedArrays(value);
};

});



parcelRequire.register("gqCG1", function(module, exports) {
module.exports = function isBuffer(arg) {
    return arg && typeof arg === 'object' && typeof arg.copy === 'function' && typeof arg.fill === 'function' && typeof arg.readUInt8 === 'function';
};

});



parcelRequire.register("am1qC", function(module, exports) {
// Currently in sync with Node.js lib/internal/assert/assertion_error.js
// https://github.com/nodejs/node/commit/0817840f775032169ddd70c85ac059f18ffcc81c
'use strict';

var $FkHbz = parcelRequire("FkHbz");
function $789d1119f0f74602$var$_objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {};
        var ownKeys = Object.keys(source);
        if (typeof Object.getOwnPropertySymbols === 'function') ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function(sym) {
            return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
        ownKeys.forEach(function(key) {
            $789d1119f0f74602$var$_defineProperty(target, key, source[key]);
        });
    }
    return target;
}
function $789d1119f0f74602$var$_defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function $789d1119f0f74602$var$_classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function $789d1119f0f74602$var$_defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function $789d1119f0f74602$var$_createClass(Constructor, protoProps, staticProps) {
    if (protoProps) $789d1119f0f74602$var$_defineProperties(Constructor.prototype, protoProps);
    if (staticProps) $789d1119f0f74602$var$_defineProperties(Constructor, staticProps);
    return Constructor;
}
function $789d1119f0f74602$var$_possibleConstructorReturn(self, call) {
    if (call && ($789d1119f0f74602$var$_typeof(call) === "object" || typeof call === "function")) return call;
    return $789d1119f0f74602$var$_assertThisInitialized(self);
}
function $789d1119f0f74602$var$_assertThisInitialized(self) {
    if (self === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return self;
}
function $789d1119f0f74602$var$_inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) throw new TypeError("Super expression must either be null or a function");
    subClass.prototype = Object.create(superClass && superClass.prototype, {
        constructor: {
            value: subClass,
            writable: true,
            configurable: true
        }
    });
    if (superClass) $789d1119f0f74602$var$_setPrototypeOf(subClass, superClass);
}
function $789d1119f0f74602$var$_wrapNativeSuper(Class1) {
    var _cache = typeof Map === "function" ? new Map() : undefined;
    $789d1119f0f74602$var$_wrapNativeSuper = function _wrapNativeSuper(Class) {
        if (Class === null || !$789d1119f0f74602$var$_isNativeFunction(Class)) return Class;
        if (typeof Class !== "function") throw new TypeError("Super expression must either be null or a function");
        if (typeof _cache !== "undefined") {
            if (_cache.has(Class)) return _cache.get(Class);
            _cache.set(Class, Wrapper);
        }
        function Wrapper() {
            return $789d1119f0f74602$var$_construct(Class, arguments, $789d1119f0f74602$var$_getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class.prototype, {
            constructor: {
                value: Wrapper,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        return $789d1119f0f74602$var$_setPrototypeOf(Wrapper, Class);
    };
    return $789d1119f0f74602$var$_wrapNativeSuper(Class1);
}
function $789d1119f0f74602$var$isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;
    try {
        Date.prototype.toString.call(Reflect.construct(Date, [], function() {}));
        return true;
    } catch (e) {
        return false;
    }
}
function $789d1119f0f74602$var$_construct(Parent1, args1, Class2) {
    if ($789d1119f0f74602$var$isNativeReflectConstruct()) $789d1119f0f74602$var$_construct = Reflect.construct;
    else $789d1119f0f74602$var$_construct = function _construct(Parent, args, Class) {
        var a = [
            null
        ];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) $789d1119f0f74602$var$_setPrototypeOf(instance, Class.prototype);
        return instance;
    };
    return $789d1119f0f74602$var$_construct.apply(null, arguments);
}
function $789d1119f0f74602$var$_isNativeFunction(fn) {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
}
function $789d1119f0f74602$var$_setPrototypeOf(o1, p1) {
    $789d1119f0f74602$var$_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
        o.__proto__ = p;
        return o;
    };
    return $789d1119f0f74602$var$_setPrototypeOf(o1, p1);
}
function $789d1119f0f74602$var$_getPrototypeOf(o2) {
    $789d1119f0f74602$var$_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
        return o.__proto__ || Object.getPrototypeOf(o);
    };
    return $789d1119f0f74602$var$_getPrototypeOf(o2);
}
function $789d1119f0f74602$var$_typeof(obj1) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") $789d1119f0f74602$var$_typeof = function _typeof(obj) {
        return typeof obj;
    };
    else $789d1119f0f74602$var$_typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return $789d1119f0f74602$var$_typeof(obj1);
}

var $iZjkG = parcelRequire("iZjkG");
var $789d1119f0f74602$var$inspect = $iZjkG.inspect;

var $5wcsW = parcelRequire("5wcsW");
var $789d1119f0f74602$var$ERR_INVALID_ARG_TYPE = $5wcsW.codes.ERR_INVALID_ARG_TYPE; // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function $789d1119f0f74602$var$endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat
function $789d1119f0f74602$var$repeat(str, count) {
    count = Math.floor(count);
    if (str.length == 0 || count == 0) return '';
    var maxCount = str.length * count;
    count = Math.floor(Math.log(count) / Math.log(2));
    while(count){
        str += str;
        count--;
    }
    str += str.substring(0, maxCount - str.length);
    return str;
}
var $789d1119f0f74602$var$blue = '';
var $789d1119f0f74602$var$green = '';
var $789d1119f0f74602$var$red = '';
var $789d1119f0f74602$var$white = '';
var $789d1119f0f74602$var$kReadableOperator = {
    deepStrictEqual: 'Expected values to be strictly deep-equal:',
    strictEqual: 'Expected values to be strictly equal:',
    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
    deepEqual: 'Expected values to be loosely deep-equal:',
    equal: 'Expected values to be loosely equal:',
    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
    notEqual: 'Expected "actual" to be loosely unequal to:',
    notIdentical: 'Values identical but not reference-equal:'
}; // Comparing short primitives should just show === / !== instead of using the
// diff.
var $789d1119f0f74602$var$kMaxShortLength = 10;
function $789d1119f0f74602$var$copyError(source) {
    var keys = Object.keys(source);
    var target = Object.create(Object.getPrototypeOf(source));
    keys.forEach(function(key) {
        target[key] = source[key];
    });
    Object.defineProperty(target, 'message', {
        value: source.message
    });
    return target;
}
function $789d1119f0f74602$var$inspectValue(val) {
    // The util.inspect default values could be changed. This makes sure the
    // error messages contain the necessary information nevertheless.
    return $789d1119f0f74602$var$inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1000,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
    });
}
function $789d1119f0f74602$var$createErrDiff(actual, expected, operator) {
    var other = '';
    var res = '';
    var lastPos = 0;
    var end = '';
    var skipped = false;
    var actualInspected = $789d1119f0f74602$var$inspectValue(actual);
    var actualLines = actualInspected.split('\n');
    var expectedLines = $789d1119f0f74602$var$inspectValue(expected).split('\n');
    var i = 0;
    var indicator = ''; // In case both values are objects explicitly mark them as not reference equal
    // for the `strictEqual` operator.
    if (operator === 'strictEqual' && $789d1119f0f74602$var$_typeof(actual) === 'object' && $789d1119f0f74602$var$_typeof(expected) === 'object' && actual !== null && expected !== null) operator = 'strictEqualObject';
     // If "actual" and "expected" fit on a single line and they are not strictly
    // equal, check further special handling.
    if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length; // If the character length of "actual" and "expected" together is less than
        // kMaxShortLength and if neither is an object and at least one of them is
        // not `zero`, use the strict equal comparison to visualize the output.
        if (inputLength <= $789d1119f0f74602$var$kMaxShortLength) {
            if (($789d1119f0f74602$var$_typeof(actual) !== 'object' || actual === null) && ($789d1119f0f74602$var$_typeof(expected) !== 'object' || expected === null) && (actual !== 0 || expected !== 0)) // -0 === +0
            return "".concat($789d1119f0f74602$var$kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
        } else if (operator !== 'strictEqualObject') {
            // If the stderr is a tty and the input length is lower than the current
            // columns per line, add a mismatch indicator below the output. If it is
            // not a tty, use a default value of 80 characters.
            var maxLength = $FkHbz.stderr && $FkHbz.stderr.isTTY ? $FkHbz.stderr.columns : 80;
            if (inputLength < maxLength) {
                while(actualLines[0][i] === expectedLines[0][i])i++;
                 // Ignore the first characters.
                if (i > 2) {
                    // Add position indicator for the first mismatch in case it is a
                    // single line and the input length is less than the column length.
                    indicator = "\n  ".concat($789d1119f0f74602$var$repeat(' ', i), "^");
                    i = 0;
                }
            }
        }
    } // Remove all ending lines that match (this optimizes the output for
    // readability by reducing the number of total changed lines).
    var a = actualLines[actualLines.length - 1];
    var b = expectedLines[expectedLines.length - 1];
    while(a === b){
        if (i++ < 2) end = "\n  ".concat(a).concat(end);
        else other = a;
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b = expectedLines[expectedLines.length - 1];
    }
    var maxLines = Math.max(actualLines.length, expectedLines.length); // Strict equal with identical objects that are not identical by reference.
    // E.g., assert.deepStrictEqual({ a: Symbol() }, { a: Symbol() })
    if (maxLines === 0) {
        // We have to get the result again. The lines were all removed before.
        var _actualLines = actualInspected.split('\n'); // Only remove lines in case it makes sense to collapse those.
        // TODO: Accept env to always show the full error.
        if (_actualLines.length > 30) {
            _actualLines[26] = "".concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white);
            while(_actualLines.length > 27)_actualLines.pop();
        }
        return "".concat($789d1119f0f74602$var$kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join('\n'), "\n");
    }
    if (i > 3) {
        end = "\n".concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white).concat(end);
        skipped = true;
    }
    if (other !== '') {
        end = "\n  ".concat(other).concat(end);
        other = '';
    }
    var printedLines = 0;
    var msg = $789d1119f0f74602$var$kReadableOperator[operator] + "\n".concat($789d1119f0f74602$var$green, "+ actual").concat($789d1119f0f74602$var$white, " ").concat($789d1119f0f74602$var$red, "- expected").concat($789d1119f0f74602$var$white);
    var skippedMsg = " ".concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white, " Lines skipped");
    for(i = 0; i < maxLines; i++){
        // Only extra expected lines exist
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
                if (cur > 4) {
                    res += "\n".concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white);
                    skipped = true;
                } else if (cur > 3) {
                    res += "\n  ".concat(expectedLines[i - 2]);
                    printedLines++;
                }
                res += "\n  ".concat(expectedLines[i - 1]);
                printedLines++;
            } // Mark the current line as the last diverging one.
            lastPos = i; // Add the expected line to the cache.
            other += "\n".concat($789d1119f0f74602$var$red, "-").concat($789d1119f0f74602$var$white, " ").concat(expectedLines[i]);
            printedLines++; // Only extra actual lines exist
        } else if (expectedLines.length < i + 1) {
            // If the last diverging line is more than one line above and the
            // current line is at least line three, add some of the former lines and
            // also add dots to indicate skipped entries.
            if (cur > 1 && i > 2) {
                if (cur > 4) {
                    res += "\n".concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white);
                    skipped = true;
                } else if (cur > 3) {
                    res += "\n  ".concat(actualLines[i - 2]);
                    printedLines++;
                }
                res += "\n  ".concat(actualLines[i - 1]);
                printedLines++;
            } // Mark the current line as the last diverging one.
            lastPos = i; // Add the actual line to the result.
            res += "\n".concat($789d1119f0f74602$var$green, "+").concat($789d1119f0f74602$var$white, " ").concat(actualLines[i]);
            printedLines++; // Lines diverge
        } else {
            var expectedLine = expectedLines[i];
            var actualLine = actualLines[i]; // If the lines diverge, specifically check for lines that only diverge by
            // a trailing comma. In that case it is actually identical and we should
            // mark it as such.
            var divergingLines = actualLine !== expectedLine && (!$789d1119f0f74602$var$endsWith(actualLine, ',') || actualLine.slice(0, -1) !== expectedLine); // If the expected line has a trailing comma but is otherwise identical,
            // add a comma at the end of the actual line. Otherwise the output could
            // look weird as in:
            //
            //   [
            //     1         // No comma at the end!
            // +   2
            //   ]
            //
            if (divergingLines && $789d1119f0f74602$var$endsWith(expectedLine, ',') && expectedLine.slice(0, -1) === actualLine) {
                divergingLines = false;
                actualLine += ',';
            }
            if (divergingLines) {
                // If the last diverging line is more than one line above and the
                // current line is at least line three, add some of the former lines and
                // also add dots to indicate skipped entries.
                if (cur > 1 && i > 2) {
                    if (cur > 4) {
                        res += "\n".concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white);
                        skipped = true;
                    } else if (cur > 3) {
                        res += "\n  ".concat(actualLines[i - 2]);
                        printedLines++;
                    }
                    res += "\n  ".concat(actualLines[i - 1]);
                    printedLines++;
                } // Mark the current line as the last diverging one.
                lastPos = i; // Add the actual line to the result and cache the expected diverging
                // line so consecutive diverging lines show up as +++--- and not +-+-+-.
                res += "\n".concat($789d1119f0f74602$var$green, "+").concat($789d1119f0f74602$var$white, " ").concat(actualLine);
                other += "\n".concat($789d1119f0f74602$var$red, "-").concat($789d1119f0f74602$var$white, " ").concat(expectedLine);
                printedLines += 2; // Lines are identical
            } else {
                // Add all cached information to the result before adding other things
                // and reset the cache.
                res += other;
                other = ''; // If the last diverging line is exactly one line above or if it is the
                // very first line, add the line to the result.
                if (cur === 1 || i === 0) {
                    res += "\n  ".concat(actualLine);
                    printedLines++;
                }
            }
        } // Inspected object to big (Show ~20 rows max)
        if (printedLines > 20 && i < maxLines - 2) return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white).concat(other, "\n") + "".concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white);
    }
    return "".concat(msg).concat(skipped ? skippedMsg : '', "\n").concat(res).concat(other).concat(end).concat(indicator);
}
var $789d1119f0f74602$var$AssertionError = /*#__PURE__*/ function(_Error) {
    $789d1119f0f74602$var$_inherits(AssertionError, _Error);
    function AssertionError(options) {
        var _this;
        $789d1119f0f74602$var$_classCallCheck(this, AssertionError);
        if ($789d1119f0f74602$var$_typeof(options) !== 'object' || options === null) throw new $789d1119f0f74602$var$ERR_INVALID_ARG_TYPE('options', 'Object', options);
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) _this = $789d1119f0f74602$var$_possibleConstructorReturn(this, $789d1119f0f74602$var$_getPrototypeOf(AssertionError).call(this, String(message)));
        else {
            if ($FkHbz.stderr && $FkHbz.stderr.isTTY) {
                // Reset on each call to make sure we handle dynamically set environment
                // variables correct.
                if ($FkHbz.stderr && $FkHbz.stderr.getColorDepth && $FkHbz.stderr.getColorDepth() !== 1) {
                    $789d1119f0f74602$var$blue = "\x1B[34m";
                    $789d1119f0f74602$var$green = "\x1B[32m";
                    $789d1119f0f74602$var$white = "\x1B[39m";
                    $789d1119f0f74602$var$red = "\x1B[31m";
                } else {
                    $789d1119f0f74602$var$blue = '';
                    $789d1119f0f74602$var$green = '';
                    $789d1119f0f74602$var$white = '';
                    $789d1119f0f74602$var$red = '';
                }
            } // Prevent the error stack from being visible by duplicating the error
            // in a very close way to the original in case both sides are actually
            // instances of Error.
            if ($789d1119f0f74602$var$_typeof(actual) === 'object' && actual !== null && $789d1119f0f74602$var$_typeof(expected) === 'object' && expected !== null && 'stack' in actual && actual instanceof Error && 'stack' in expected && expected instanceof Error) {
                actual = $789d1119f0f74602$var$copyError(actual);
                expected = $789d1119f0f74602$var$copyError(expected);
            }
            if (operator === 'deepStrictEqual' || operator === 'strictEqual') _this = $789d1119f0f74602$var$_possibleConstructorReturn(this, $789d1119f0f74602$var$_getPrototypeOf(AssertionError).call(this, $789d1119f0f74602$var$createErrDiff(actual, expected, operator)));
            else if (operator === 'notDeepStrictEqual' || operator === 'notStrictEqual') {
                // In case the objects are equal but the operator requires unequal, show
                // the first object and say A equals B
                var base = $789d1119f0f74602$var$kReadableOperator[operator];
                var res = $789d1119f0f74602$var$inspectValue(actual).split('\n'); // In case "actual" is an object, it should not be reference equal.
                if (operator === 'notStrictEqual' && $789d1119f0f74602$var$_typeof(actual) === 'object' && actual !== null) base = $789d1119f0f74602$var$kReadableOperator.notStrictEqualObject;
                 // Only remove lines in case it makes sense to collapse those.
                // TODO: Accept env to always show the full error.
                if (res.length > 30) {
                    res[26] = "".concat($789d1119f0f74602$var$blue, "...").concat($789d1119f0f74602$var$white);
                    while(res.length > 27)res.pop();
                } // Only print a single input.
                if (res.length === 1) _this = $789d1119f0f74602$var$_possibleConstructorReturn(this, $789d1119f0f74602$var$_getPrototypeOf(AssertionError).call(this, "".concat(base, " ").concat(res[0])));
                else _this = $789d1119f0f74602$var$_possibleConstructorReturn(this, $789d1119f0f74602$var$_getPrototypeOf(AssertionError).call(this, "".concat(base, "\n\n").concat(res.join('\n'), "\n")));
            } else {
                var _res = $789d1119f0f74602$var$inspectValue(actual);
                var other = '';
                var knownOperators = $789d1119f0f74602$var$kReadableOperator[operator];
                if (operator === 'notDeepEqual' || operator === 'notEqual') {
                    _res = "".concat($789d1119f0f74602$var$kReadableOperator[operator], "\n\n").concat(_res);
                    if (_res.length > 1024) _res = "".concat(_res.slice(0, 1021), "...");
                } else {
                    other = "".concat($789d1119f0f74602$var$inspectValue(expected));
                    if (_res.length > 512) _res = "".concat(_res.slice(0, 509), "...");
                    if (other.length > 512) other = "".concat(other.slice(0, 509), "...");
                    if (operator === 'deepEqual' || operator === 'equal') _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
                    else other = " ".concat(operator, " ").concat(other);
                }
                _this = $789d1119f0f74602$var$_possibleConstructorReturn(this, $789d1119f0f74602$var$_getPrototypeOf(AssertionError).call(this, "".concat(_res).concat(other)));
            }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty($789d1119f0f74602$var$_assertThisInitialized(_this), 'name', {
            value: 'AssertionError [ERR_ASSERTION]',
            enumerable: false,
            writable: true,
            configurable: true
        });
        _this.code = 'ERR_ASSERTION';
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) // eslint-disable-next-line no-restricted-syntax
        Error.captureStackTrace($789d1119f0f74602$var$_assertThisInitialized(_this), stackStartFn);
         // Create error message including the error code in the name.
        _this.stack; // Reset the name.
        _this.name = 'AssertionError';
        return $789d1119f0f74602$var$_possibleConstructorReturn(_this);
    }
    $789d1119f0f74602$var$_createClass(AssertionError, [
        {
            key: "toString",
            value: function toString() {
                return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
            }
        },
        {
            key: $789d1119f0f74602$var$inspect.custom,
            value: function value(recurseTimes, ctx) {
                // This limits the `actual` and `expected` property default inspection to
                // the minimum depth. Otherwise those values would be too verbose compared
                // to the actual error message which contains a combined view of these two
                // input values.
                return $789d1119f0f74602$var$inspect(this, $789d1119f0f74602$var$_objectSpread({}, ctx, {
                    customInspect: false,
                    depth: 0
                }));
            }
        }
    ]);
    return AssertionError;
}($789d1119f0f74602$var$_wrapNativeSuper(Error));
module.exports = $789d1119f0f74602$var$AssertionError;

});

parcelRequire.register("3hx1b", function(module, exports) {
/**
 * Code refactored from Mozilla Developer Network:
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign
 */ 'use strict';
function $263c92589893f41e$var$assign(target, firstSource) {
    if (target === undefined || target === null) throw new TypeError('Cannot convert first argument to object');
    var to = Object(target);
    for(var i = 1; i < arguments.length; i++){
        var nextSource = arguments[i];
        if (nextSource === undefined || nextSource === null) continue;
        var keysArray = Object.keys(Object(nextSource));
        for(var nextIndex = 0, len = keysArray.length; nextIndex < len; nextIndex++){
            var nextKey = keysArray[nextIndex];
            var desc = Object.getOwnPropertyDescriptor(nextSource, nextKey);
            if (desc !== undefined && desc.enumerable) to[nextKey] = nextSource[nextKey];
        }
    }
    return to;
}
function $263c92589893f41e$var$polyfill() {
    if (!Object.assign) Object.defineProperty(Object, 'assign', {
        enumerable: false,
        configurable: true,
        writable: true,
        value: $263c92589893f41e$var$assign
    });
}
module.exports = {
    assign: $263c92589893f41e$var$assign,
    polyfill: $263c92589893f41e$var$polyfill
};

});

parcelRequire.register("b3ubc", function(module, exports) {
'use strict';

var $hBU8T = parcelRequire("hBU8T");

var $gkfDL = parcelRequire("gkfDL");

var $9Zz0x = parcelRequire("9Zz0x");

var $lcA5N = parcelRequire("lcA5N");

var $8pJDD = parcelRequire("8pJDD");
var $80c76293e677b6ec$var$polyfill = $gkfDL($lcA5N(), Object);
$hBU8T($80c76293e677b6ec$var$polyfill, {
    getPolyfill: $lcA5N,
    implementation: $9Zz0x,
    shim: $8pJDD
});
module.exports = $80c76293e677b6ec$var$polyfill;

});
parcelRequire.register("hBU8T", function(module, exports) {
'use strict';

var $5i8ki = parcelRequire("5i8ki");
var $cd2171167a3ea7af$var$hasSymbols = typeof Symbol === 'function' && typeof Symbol('foo') === 'symbol';
var $cd2171167a3ea7af$var$toStr = Object.prototype.toString;
var $cd2171167a3ea7af$var$concat = Array.prototype.concat;
var $cd2171167a3ea7af$var$origDefineProperty = Object.defineProperty;
var $cd2171167a3ea7af$var$isFunction = function(fn) {
    return typeof fn === 'function' && $cd2171167a3ea7af$var$toStr.call(fn) === '[object Function]';
};
var $cd2171167a3ea7af$var$arePropertyDescriptorsSupported = function() {
    var obj = {};
    try {
        $cd2171167a3ea7af$var$origDefineProperty(obj, 'x', {
            enumerable: false,
            value: obj
        });
        // eslint-disable-next-line no-unused-vars, no-restricted-syntax
        for(var _ in obj)return false;
        return obj.x === obj;
    } catch (e) {
        return false;
    }
};
var $cd2171167a3ea7af$var$supportsDescriptors = $cd2171167a3ea7af$var$origDefineProperty && $cd2171167a3ea7af$var$arePropertyDescriptorsSupported();
var $cd2171167a3ea7af$var$defineProperty = function(object, name, value, predicate) {
    if (name in object && (!$cd2171167a3ea7af$var$isFunction(predicate) || !predicate())) return;
    if ($cd2171167a3ea7af$var$supportsDescriptors) $cd2171167a3ea7af$var$origDefineProperty(object, name, {
        configurable: true,
        enumerable: false,
        value: value,
        writable: true
    });
    else object[name] = value;
};
var $cd2171167a3ea7af$var$defineProperties = function(object, map) {
    var predicates = arguments.length > 2 ? arguments[2] : {};
    var props = $5i8ki(map);
    if ($cd2171167a3ea7af$var$hasSymbols) props = $cd2171167a3ea7af$var$concat.call(props, Object.getOwnPropertySymbols(map));
    for(var i = 0; i < props.length; i += 1)$cd2171167a3ea7af$var$defineProperty(object, props[i], map[props[i]], predicates[props[i]]);
};
$cd2171167a3ea7af$var$defineProperties.supportsDescriptors = !!$cd2171167a3ea7af$var$supportsDescriptors;
module.exports = $cd2171167a3ea7af$var$defineProperties;

});
parcelRequire.register("5i8ki", function(module, exports) {
'use strict';
var $3da5179b3cfba6e4$var$slice = Array.prototype.slice;

var $2tsLK = parcelRequire("2tsLK");
var $3da5179b3cfba6e4$var$origKeys = Object.keys;

var $3da5179b3cfba6e4$var$keysShim = $3da5179b3cfba6e4$var$origKeys ? function keys(o) {
    return $3da5179b3cfba6e4$var$origKeys(o);
} : (parcelRequire("edYLM"));
var $3da5179b3cfba6e4$var$originalKeys = Object.keys;
$3da5179b3cfba6e4$var$keysShim.shim = function shimObjectKeys() {
    if (Object.keys) {
        var keysWorksWithArguments = function() {
            // Safari 5.0 bug
            var args = Object.keys(arguments);
            return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) Object.keys = function keys(object) {
            if ($2tsLK(object)) return $3da5179b3cfba6e4$var$originalKeys($3da5179b3cfba6e4$var$slice.call(object));
            return $3da5179b3cfba6e4$var$originalKeys(object);
        };
    } else Object.keys = $3da5179b3cfba6e4$var$keysShim;
    return Object.keys || $3da5179b3cfba6e4$var$keysShim;
};
module.exports = $3da5179b3cfba6e4$var$keysShim;

});
parcelRequire.register("2tsLK", function(module, exports) {
'use strict';
var $1cd49b261671c5a8$var$toStr = Object.prototype.toString;
module.exports = function isArguments(value) {
    var str = $1cd49b261671c5a8$var$toStr.call(value);
    var isArgs = str === '[object Arguments]';
    if (!isArgs) isArgs = str !== '[object Array]' && value !== null && typeof value === 'object' && typeof value.length === 'number' && value.length >= 0 && $1cd49b261671c5a8$var$toStr.call(value.callee) === '[object Function]';
    return isArgs;
};

});

parcelRequire.register("edYLM", function(module, exports) {
'use strict';
var $a5b16b2d43dfce30$var$keysShim;

if (!Object.keys) {
    // modified from https://github.com/es-shims/es5-shim
    var $a5b16b2d43dfce30$var$has = Object.prototype.hasOwnProperty;
    var $a5b16b2d43dfce30$var$toStr = Object.prototype.toString;
    var $a5b16b2d43dfce30$var$isArgs = (parcelRequire("2tsLK")); // eslint-disable-line global-require
    var $a5b16b2d43dfce30$var$isEnumerable = Object.prototype.propertyIsEnumerable;
    var $a5b16b2d43dfce30$var$hasDontEnumBug = !$a5b16b2d43dfce30$var$isEnumerable.call({
        toString: null
    }, 'toString');
    var $a5b16b2d43dfce30$var$hasProtoEnumBug = $a5b16b2d43dfce30$var$isEnumerable.call(function() {}, 'prototype');
    var $a5b16b2d43dfce30$var$dontEnums = [
        'toString',
        'toLocaleString',
        'valueOf',
        'hasOwnProperty',
        'isPrototypeOf',
        'propertyIsEnumerable',
        'constructor'
    ];
    var $a5b16b2d43dfce30$var$equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
    };
    var $a5b16b2d43dfce30$var$excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
    };
    var $a5b16b2d43dfce30$var$hasAutomationEqualityBug = function() {
        /* global window */ if (typeof window === 'undefined') return false;
        for(var k in window)try {
            if (!$a5b16b2d43dfce30$var$excludedKeys['$' + k] && $a5b16b2d43dfce30$var$has.call(window, k) && window[k] !== null && typeof window[k] === 'object') try {
                $a5b16b2d43dfce30$var$equalsConstructorPrototype(window[k]);
            } catch (e) {
                return true;
            }
        } catch (e) {
            return true;
        }
        return false;
    }();
    var $a5b16b2d43dfce30$var$equalsConstructorPrototypeIfNotBuggy = function(o) {
        /* global window */ if (typeof window === 'undefined' || !$a5b16b2d43dfce30$var$hasAutomationEqualityBug) return $a5b16b2d43dfce30$var$equalsConstructorPrototype(o);
        try {
            return $a5b16b2d43dfce30$var$equalsConstructorPrototype(o);
        } catch (e) {
            return false;
        }
    };
    $a5b16b2d43dfce30$var$keysShim = function keys(object) {
        var isObject = object !== null && typeof object === 'object';
        var isFunction = $a5b16b2d43dfce30$var$toStr.call(object) === '[object Function]';
        var isArguments = $a5b16b2d43dfce30$var$isArgs(object);
        var isString = isObject && $a5b16b2d43dfce30$var$toStr.call(object) === '[object String]';
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) throw new TypeError('Object.keys called on a non-object');
        var skipProto = $a5b16b2d43dfce30$var$hasProtoEnumBug && isFunction;
        if (isString && object.length > 0 && !$a5b16b2d43dfce30$var$has.call(object, 0)) for(var i = 0; i < object.length; ++i)theKeys.push(String(i));
        if (isArguments && object.length > 0) for(var j = 0; j < object.length; ++j)theKeys.push(String(j));
        else {
            for(var name in object)if (!(skipProto && name === 'prototype') && $a5b16b2d43dfce30$var$has.call(object, name)) theKeys.push(String(name));
        }
        if ($a5b16b2d43dfce30$var$hasDontEnumBug) {
            var skipConstructor = $a5b16b2d43dfce30$var$equalsConstructorPrototypeIfNotBuggy(object);
            for(var k = 0; k < $a5b16b2d43dfce30$var$dontEnums.length; ++k)if (!(skipConstructor && $a5b16b2d43dfce30$var$dontEnums[k] === 'constructor') && $a5b16b2d43dfce30$var$has.call(object, $a5b16b2d43dfce30$var$dontEnums[k])) theKeys.push($a5b16b2d43dfce30$var$dontEnums[k]);
        }
        return theKeys;
    };
}
module.exports = $a5b16b2d43dfce30$var$keysShim;

});



parcelRequire.register("9Zz0x", function(module, exports) {
'use strict';
var $7464f75c5ba0501f$var$numberIsNaN = function(value) {
    return value !== value;
};
module.exports = function is(a, b) {
    if (a === 0 && b === 0) return 1 / a === 1 / b;
    if (a === b) return true;
    if ($7464f75c5ba0501f$var$numberIsNaN(a) && $7464f75c5ba0501f$var$numberIsNaN(b)) return true;
    return false;
};

});

parcelRequire.register("lcA5N", function(module, exports) {
'use strict';

var $9Zz0x = parcelRequire("9Zz0x");
module.exports = function getPolyfill() {
    return typeof Object.is === 'function' ? Object.is : $9Zz0x;
};

});

parcelRequire.register("8pJDD", function(module, exports) {
'use strict';

var $lcA5N = parcelRequire("lcA5N");

var $hBU8T = parcelRequire("hBU8T");
module.exports = function shimObjectIs() {
    var polyfill = $lcA5N();
    $hBU8T(Object, {
        is: polyfill
    }, {
        is: function testObjectIs() {
            return Object.is !== polyfill;
        }
    });
    return polyfill;
};

});


parcelRequire.register("ecKAN", function(module, exports) {
// Currently in sync with Node.js lib/internal/util/comparisons.js
// https://github.com/nodejs/node/commit/112cc7c27551254aa2b17098fb774867f05ed0d9
'use strict';
function $a57653f9dd22a05f$var$_slicedToArray(arr, i) {
    return $a57653f9dd22a05f$var$_arrayWithHoles(arr) || $a57653f9dd22a05f$var$_iterableToArrayLimit(arr, i) || $a57653f9dd22a05f$var$_nonIterableRest();
}
function $a57653f9dd22a05f$var$_nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
}
function $a57653f9dd22a05f$var$_iterableToArrayLimit(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;
    try {
        for(var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true){
            _arr.push(_s.value);
            if (i && _arr.length === i) break;
        }
    } catch (err) {
        _d = true;
        _e = err;
    } finally{
        try {
            if (!_n && _i["return"] != null) _i["return"]();
        } finally{
            if (_d) throw _e;
        }
    }
    return _arr;
}
function $a57653f9dd22a05f$var$_arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function $a57653f9dd22a05f$var$_typeof(obj1) {
    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") $a57653f9dd22a05f$var$_typeof = function _typeof(obj) {
        return typeof obj;
    };
    else $a57653f9dd22a05f$var$_typeof = function _typeof(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    return $a57653f9dd22a05f$var$_typeof(obj1);
}
var $a57653f9dd22a05f$var$regexFlagsSupported = /a/g.flags !== undefined;
var $a57653f9dd22a05f$var$arrayFromSet = function arrayFromSet(set) {
    var array = [];
    set.forEach(function(value) {
        return array.push(value);
    });
    return array;
};
var $a57653f9dd22a05f$var$arrayFromMap = function arrayFromMap(map) {
    var array = [];
    map.forEach(function(value, key) {
        return array.push([
            key,
            value
        ]);
    });
    return array;
};

var $a57653f9dd22a05f$var$objectIs = Object.is ? Object.is : (parcelRequire("b3ubc"));
var $a57653f9dd22a05f$var$objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
    return [];
};

var $a57653f9dd22a05f$var$numberIsNaN = Number.isNaN ? Number.isNaN : (parcelRequire("60Ld5"));
function $a57653f9dd22a05f$var$uncurryThis(f) {
    return f.call.bind(f);
}
var $a57653f9dd22a05f$var$hasOwnProperty = $a57653f9dd22a05f$var$uncurryThis(Object.prototype.hasOwnProperty);
var $a57653f9dd22a05f$var$propertyIsEnumerable = $a57653f9dd22a05f$var$uncurryThis(Object.prototype.propertyIsEnumerable);
var $a57653f9dd22a05f$var$objectToString = $a57653f9dd22a05f$var$uncurryThis(Object.prototype.toString);

var $iZjkG = parcelRequire("iZjkG");
var $a57653f9dd22a05f$require$_require$types = $iZjkG.types;
var $a57653f9dd22a05f$var$isAnyArrayBuffer = $a57653f9dd22a05f$require$_require$types.isAnyArrayBuffer, $a57653f9dd22a05f$var$isArrayBufferView = $a57653f9dd22a05f$require$_require$types.isArrayBufferView, $a57653f9dd22a05f$var$isDate = $a57653f9dd22a05f$require$_require$types.isDate, $a57653f9dd22a05f$var$isMap = $a57653f9dd22a05f$require$_require$types.isMap, $a57653f9dd22a05f$var$isRegExp = $a57653f9dd22a05f$require$_require$types.isRegExp, $a57653f9dd22a05f$var$isSet = $a57653f9dd22a05f$require$_require$types.isSet, $a57653f9dd22a05f$var$isNativeError = $a57653f9dd22a05f$require$_require$types.isNativeError, $a57653f9dd22a05f$var$isBoxedPrimitive = $a57653f9dd22a05f$require$_require$types.isBoxedPrimitive, $a57653f9dd22a05f$var$isNumberObject = $a57653f9dd22a05f$require$_require$types.isNumberObject, $a57653f9dd22a05f$var$isStringObject = $a57653f9dd22a05f$require$_require$types.isStringObject, $a57653f9dd22a05f$var$isBooleanObject = $a57653f9dd22a05f$require$_require$types.isBooleanObject, $a57653f9dd22a05f$var$isBigIntObject = $a57653f9dd22a05f$require$_require$types.isBigIntObject, $a57653f9dd22a05f$var$isSymbolObject = $a57653f9dd22a05f$require$_require$types.isSymbolObject, $a57653f9dd22a05f$var$isFloat32Array = $a57653f9dd22a05f$require$_require$types.isFloat32Array, $a57653f9dd22a05f$var$isFloat64Array = $a57653f9dd22a05f$require$_require$types.isFloat64Array;
function $a57653f9dd22a05f$var$isNonIndex(key) {
    if (key.length === 0 || key.length > 10) return true;
    for(var i = 0; i < key.length; i++){
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57) return true;
    } // The maximum size for an array is 2 ** 32 -1.
    return key.length === 10 && key >= Math.pow(2, 32);
}
function $a57653f9dd22a05f$var$getOwnNonIndexProperties(value) {
    return Object.keys(value).filter($a57653f9dd22a05f$var$isNonIndex).concat($a57653f9dd22a05f$var$objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
} // Taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */ function $a57653f9dd22a05f$var$compare(a, b) {
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
}
var $a57653f9dd22a05f$var$ONLY_ENUMERABLE = undefined;
var $a57653f9dd22a05f$var$kStrict = true;
var $a57653f9dd22a05f$var$kLoose = false;
var $a57653f9dd22a05f$var$kNoIterator = 0;
var $a57653f9dd22a05f$var$kIsArray = 1;
var $a57653f9dd22a05f$var$kIsSet = 2;
var $a57653f9dd22a05f$var$kIsMap = 3; // Check if they have the same source and flags
function $a57653f9dd22a05f$var$areSimilarRegExps(a, b) {
    return $a57653f9dd22a05f$var$regexFlagsSupported ? a.source === b.source && a.flags === b.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b);
}
function $a57653f9dd22a05f$var$areSimilarFloatArrays(a, b) {
    if (a.byteLength !== b.byteLength) return false;
    for(var offset = 0; offset < a.byteLength; offset++){
        if (a[offset] !== b[offset]) return false;
    }
    return true;
}
function $a57653f9dd22a05f$var$areSimilarTypedArrays(a, b) {
    if (a.byteLength !== b.byteLength) return false;
    return $a57653f9dd22a05f$var$compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
}
function $a57653f9dd22a05f$var$areEqualArrayBuffers(buf1, buf2) {
    return buf1.byteLength === buf2.byteLength && $a57653f9dd22a05f$var$compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
}
function $a57653f9dd22a05f$var$isEqualBoxedPrimitive(val1, val2) {
    if ($a57653f9dd22a05f$var$isNumberObject(val1)) return $a57653f9dd22a05f$var$isNumberObject(val2) && $a57653f9dd22a05f$var$objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
    if ($a57653f9dd22a05f$var$isStringObject(val1)) return $a57653f9dd22a05f$var$isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
    if ($a57653f9dd22a05f$var$isBooleanObject(val1)) return $a57653f9dd22a05f$var$isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
    if ($a57653f9dd22a05f$var$isBigIntObject(val1)) return $a57653f9dd22a05f$var$isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
    return $a57653f9dd22a05f$var$isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
} // Notes: Type tags are historical [[Class]] properties that can be set by
// FunctionTemplate::SetClassName() in C++ or Symbol.toStringTag in JS
// and retrieved using Object.prototype.toString.call(obj) in JS
// See https://tc39.github.io/ecma262/#sec-object.prototype.tostring
// for a list of tags pre-defined in the spec.
// There are some unspecified tags in the wild too (e.g. typed array tags).
// Since tags can be altered, they only serve fast failures
//
// Typed arrays and buffers are checked by comparing the content in their
// underlying ArrayBuffer. This optimization requires that it's
// reasonable to interpret their underlying memory in the same way,
// which is checked by comparing their type tags.
// (e.g. a Uint8Array and a Uint16Array with the same memory content
// could still be different because they will be interpreted differently).
//
// For strict comparison, objects should have
// a) The same built-in type tags
// b) The same prototypes.
function $a57653f9dd22a05f$var$innerDeepEqual(val1, val2, strict, memos) {
    // All identical values are equivalent, as determined by ===.
    if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? $a57653f9dd22a05f$var$objectIs(val1, val2) : true;
    } // Check more closely if val1 and val2 are equal.
    if (strict) {
        if ($a57653f9dd22a05f$var$_typeof(val1) !== 'object') return typeof val1 === 'number' && $a57653f9dd22a05f$var$numberIsNaN(val1) && $a57653f9dd22a05f$var$numberIsNaN(val2);
        if ($a57653f9dd22a05f$var$_typeof(val2) !== 'object' || val1 === null || val2 === null) return false;
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) return false;
    } else {
        if (val1 === null || $a57653f9dd22a05f$var$_typeof(val1) !== 'object') {
            if (val2 === null || $a57653f9dd22a05f$var$_typeof(val2) !== 'object') // eslint-disable-next-line eqeqeq
            return val1 == val2;
            return false;
        }
        if (val2 === null || $a57653f9dd22a05f$var$_typeof(val2) !== 'object') return false;
    }
    var val1Tag = $a57653f9dd22a05f$var$objectToString(val1);
    var val2Tag = $a57653f9dd22a05f$var$objectToString(val2);
    if (val1Tag !== val2Tag) return false;
    if (Array.isArray(val1)) {
        // Check for sparse arrays and general fast path
        if (val1.length !== val2.length) return false;
        var keys1 = $a57653f9dd22a05f$var$getOwnNonIndexProperties(val1, $a57653f9dd22a05f$var$ONLY_ENUMERABLE);
        var keys2 = $a57653f9dd22a05f$var$getOwnNonIndexProperties(val2, $a57653f9dd22a05f$var$ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) return false;
        return $a57653f9dd22a05f$var$keyCheck(val1, val2, strict, memos, $a57653f9dd22a05f$var$kIsArray, keys1);
    } // [browserify] This triggers on certain types in IE (Map/Set) so we don't
    // wan't to early return out of the rest of the checks. However we can check
    // if the second value is one of these values and the first isn't.
    if (val1Tag === '[object Object]') {
        // return keyCheck(val1, val2, strict, memos, kNoIterator);
        if (!$a57653f9dd22a05f$var$isMap(val1) && $a57653f9dd22a05f$var$isMap(val2) || !$a57653f9dd22a05f$var$isSet(val1) && $a57653f9dd22a05f$var$isSet(val2)) return false;
    }
    if ($a57653f9dd22a05f$var$isDate(val1)) {
        if (!$a57653f9dd22a05f$var$isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) return false;
    } else if ($a57653f9dd22a05f$var$isRegExp(val1)) {
        if (!$a57653f9dd22a05f$var$isRegExp(val2) || !$a57653f9dd22a05f$var$areSimilarRegExps(val1, val2)) return false;
    } else if ($a57653f9dd22a05f$var$isNativeError(val1) || val1 instanceof Error) {
        // Do not compare the stack as it might differ even though the error itself
        // is otherwise identical.
        if (val1.message !== val2.message || val1.name !== val2.name) return false;
    } else if ($a57653f9dd22a05f$var$isArrayBufferView(val1)) {
        if (!strict && ($a57653f9dd22a05f$var$isFloat32Array(val1) || $a57653f9dd22a05f$var$isFloat64Array(val1))) {
            if (!$a57653f9dd22a05f$var$areSimilarFloatArrays(val1, val2)) return false;
        } else if (!$a57653f9dd22a05f$var$areSimilarTypedArrays(val1, val2)) return false;
         // Buffer.compare returns true, so val1.length === val2.length. If they both
        // only contain numeric keys, we don't need to exam further than checking
        // the symbols.
        var _keys = $a57653f9dd22a05f$var$getOwnNonIndexProperties(val1, $a57653f9dd22a05f$var$ONLY_ENUMERABLE);
        var _keys2 = $a57653f9dd22a05f$var$getOwnNonIndexProperties(val2, $a57653f9dd22a05f$var$ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) return false;
        return $a57653f9dd22a05f$var$keyCheck(val1, val2, strict, memos, $a57653f9dd22a05f$var$kNoIterator, _keys);
    } else if ($a57653f9dd22a05f$var$isSet(val1)) {
        if (!$a57653f9dd22a05f$var$isSet(val2) || val1.size !== val2.size) return false;
        return $a57653f9dd22a05f$var$keyCheck(val1, val2, strict, memos, $a57653f9dd22a05f$var$kIsSet);
    } else if ($a57653f9dd22a05f$var$isMap(val1)) {
        if (!$a57653f9dd22a05f$var$isMap(val2) || val1.size !== val2.size) return false;
        return $a57653f9dd22a05f$var$keyCheck(val1, val2, strict, memos, $a57653f9dd22a05f$var$kIsMap);
    } else if ($a57653f9dd22a05f$var$isAnyArrayBuffer(val1)) {
        if (!$a57653f9dd22a05f$var$areEqualArrayBuffers(val1, val2)) return false;
    } else if ($a57653f9dd22a05f$var$isBoxedPrimitive(val1) && !$a57653f9dd22a05f$var$isEqualBoxedPrimitive(val1, val2)) return false;
    return $a57653f9dd22a05f$var$keyCheck(val1, val2, strict, memos, $a57653f9dd22a05f$var$kNoIterator);
}
function $a57653f9dd22a05f$var$getEnumerables(val, keys) {
    return keys.filter(function(k) {
        return $a57653f9dd22a05f$var$propertyIsEnumerable(val, k);
    });
}
function $a57653f9dd22a05f$var$keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
    // For all remaining Object pairs, including Array, objects and Maps,
    // equivalence is determined by having:
    // a) The same number of owned enumerable properties
    // b) The same set of keys/indexes (although not necessarily the same order)
    // c) Equivalent values for every corresponding key/index
    // d) For Sets and Maps, equal contents
    // Note: this accounts for both named and indexed properties on Arrays.
    if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2); // The pair must have the same number of owned properties.
        if (aKeys.length !== bKeys.length) return false;
    } // Cheap key test
    var i = 0;
    for(; i < aKeys.length; i++){
        if (!$a57653f9dd22a05f$var$hasOwnProperty(val2, aKeys[i])) return false;
    }
    if (strict && arguments.length === 5) {
        var symbolKeysA = $a57653f9dd22a05f$var$objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
            var count = 0;
            for(i = 0; i < symbolKeysA.length; i++){
                var key = symbolKeysA[i];
                if ($a57653f9dd22a05f$var$propertyIsEnumerable(val1, key)) {
                    if (!$a57653f9dd22a05f$var$propertyIsEnumerable(val2, key)) return false;
                    aKeys.push(key);
                    count++;
                } else if ($a57653f9dd22a05f$var$propertyIsEnumerable(val2, key)) return false;
            }
            var symbolKeysB = $a57653f9dd22a05f$var$objectGetOwnPropertySymbols(val2);
            if (symbolKeysA.length !== symbolKeysB.length && $a57653f9dd22a05f$var$getEnumerables(val2, symbolKeysB).length !== count) return false;
        } else {
            var _symbolKeysB = $a57653f9dd22a05f$var$objectGetOwnPropertySymbols(val2);
            if (_symbolKeysB.length !== 0 && $a57653f9dd22a05f$var$getEnumerables(val2, _symbolKeysB).length !== 0) return false;
        }
    }
    if (aKeys.length === 0 && (iterationType === $a57653f9dd22a05f$var$kNoIterator || iterationType === $a57653f9dd22a05f$var$kIsArray && val1.length === 0 || val1.size === 0)) return true;
     // Use memos to handle cycles.
    if (memos === undefined) memos = {
        val1: new Map(),
        val2: new Map(),
        position: 0
    };
    else {
        // We prevent up to two map.has(x) calls by directly retrieving the value
        // and checking for undefined. The map can only contain numbers, so it is
        // safe to check for undefined only.
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== undefined) {
            var val2MemoB = memos.val2.get(val2);
            if (val2MemoB !== undefined) return val2MemoA === val2MemoB;
        }
        memos.position++;
    }
    memos.val1.set(val1, memos.position);
    memos.val2.set(val2, memos.position);
    var areEq = $a57653f9dd22a05f$var$objEquiv(val1, val2, strict, aKeys, memos, iterationType);
    memos.val1.delete(val1);
    memos.val2.delete(val2);
    return areEq;
}
function $a57653f9dd22a05f$var$setHasEqualElement(set, val1, strict, memo) {
    // Go looking.
    var setValues = $a57653f9dd22a05f$var$arrayFromSet(set);
    for(var i = 0; i < setValues.length; i++){
        var val2 = setValues[i];
        if ($a57653f9dd22a05f$var$innerDeepEqual(val1, val2, strict, memo)) {
            // Remove the matching element to make sure we do not check that again.
            set.delete(val2);
            return true;
        }
    }
    return false;
} // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#Loose_equality_using
// Sadly it is not possible to detect corresponding values properly in case the
// type is a string, number, bigint or boolean. The reason is that those values
// can match lots of different string values (e.g., 1n == '+00001').
function $a57653f9dd22a05f$var$findLooseMatchingPrimitives(prim) {
    switch($a57653f9dd22a05f$var$_typeof(prim)){
        case 'undefined':
            return null;
        case 'object':
            // Only pass in null as object!
            return undefined;
        case 'symbol':
            return false;
        case 'string':
            prim = +prim;
        // Loose equal entries exist only if the string is possible to convert to
        // a regular number and not NaN.
        // Fall through
        case 'number':
            if ($a57653f9dd22a05f$var$numberIsNaN(prim)) return false;
    }
    return true;
}
function $a57653f9dd22a05f$var$setMightHaveLoosePrim(a, b, prim) {
    var altValue = $a57653f9dd22a05f$var$findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    return b.has(altValue) && !a.has(altValue);
}
function $a57653f9dd22a05f$var$mapMightHaveLoosePrim(a, b, prim, item, memo) {
    var altValue = $a57653f9dd22a05f$var$findLooseMatchingPrimitives(prim);
    if (altValue != null) return altValue;
    var curB = b.get(altValue);
    if (curB === undefined && !b.has(altValue) || !$a57653f9dd22a05f$var$innerDeepEqual(item, curB, false, memo)) return false;
    return !a.has(altValue) && $a57653f9dd22a05f$var$innerDeepEqual(item, curB, false, memo);
}
function $a57653f9dd22a05f$var$setEquiv(a, b, strict, memo) {
    // This is a lazily initiated Set of entries which have to be compared
    // pairwise.
    var set = null;
    var aValues = $a57653f9dd22a05f$var$arrayFromSet(a);
    for(var i = 0; i < aValues.length; i++){
        var val = aValues[i]; // Note: Checking for the objects first improves the performance for object
        // heavy sets but it is a minor slow down for primitives. As they are fast
        // to check this improves the worst case scenario instead.
        if ($a57653f9dd22a05f$var$_typeof(val) === 'object' && val !== null) {
            if (set === null) set = new Set();
             // If the specified value doesn't exist in the second set its an not null
            // object (or non strict only: a not matching primitive) we'll need to go
            // hunting for something thats deep-(strict-)equal to it. To make this
            // O(n log n) complexity we have to copy these values in a new set first.
            set.add(val);
        } else if (!b.has(val)) {
            if (strict) return false; // Fast path to detect missing string, symbol, undefined and null values.
            if (!$a57653f9dd22a05f$var$setMightHaveLoosePrim(a, b, val)) return false;
            if (set === null) set = new Set();
            set.add(val);
        }
    }
    if (set !== null) {
        var bValues = $a57653f9dd22a05f$var$arrayFromSet(b);
        for(var _i = 0; _i < bValues.length; _i++){
            var _val = bValues[_i]; // We have to check if a primitive value is already
            // matching and only if it's not, go hunting for it.
            if ($a57653f9dd22a05f$var$_typeof(_val) === 'object' && _val !== null) {
                if (!$a57653f9dd22a05f$var$setHasEqualElement(set, _val, strict, memo)) return false;
            } else if (!strict && !a.has(_val) && !$a57653f9dd22a05f$var$setHasEqualElement(set, _val, strict, memo)) return false;
        }
        return set.size === 0;
    }
    return true;
}
function $a57653f9dd22a05f$var$mapHasEqualEntry(set, map, key1, item1, strict, memo) {
    // To be able to handle cases like:
    //   Map([[{}, 'a'], [{}, 'b']]) vs Map([[{}, 'b'], [{}, 'a']])
    // ... we need to consider *all* matching keys, not just the first we find.
    var setValues = $a57653f9dd22a05f$var$arrayFromSet(set);
    for(var i = 0; i < setValues.length; i++){
        var key2 = setValues[i];
        if ($a57653f9dd22a05f$var$innerDeepEqual(key1, key2, strict, memo) && $a57653f9dd22a05f$var$innerDeepEqual(item1, map.get(key2), strict, memo)) {
            set.delete(key2);
            return true;
        }
    }
    return false;
}
function $a57653f9dd22a05f$var$mapEquiv(a, b, strict, memo) {
    var set = null;
    var aEntries = $a57653f9dd22a05f$var$arrayFromMap(a);
    for(var i = 0; i < aEntries.length; i++){
        var _aEntries$i = $a57653f9dd22a05f$var$_slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if ($a57653f9dd22a05f$var$_typeof(key) === 'object' && key !== null) {
            if (set === null) set = new Set();
            set.add(key);
        } else {
            // By directly retrieving the value we prevent another b.has(key) check in
            // almost all possible cases.
            var item2 = b.get(key);
            if (item2 === undefined && !b.has(key) || !$a57653f9dd22a05f$var$innerDeepEqual(item1, item2, strict, memo)) {
                if (strict) return false; // Fast path to detect missing string, symbol, undefined and null
                // keys.
                if (!$a57653f9dd22a05f$var$mapMightHaveLoosePrim(a, b, key, item1, memo)) return false;
                if (set === null) set = new Set();
                set.add(key);
            }
        }
    }
    if (set !== null) {
        var bEntries = $a57653f9dd22a05f$var$arrayFromMap(b);
        for(var _i2 = 0; _i2 < bEntries.length; _i2++){
            var _bEntries$_i = $a57653f9dd22a05f$var$_slicedToArray(bEntries[_i2], 2), key = _bEntries$_i[0], item = _bEntries$_i[1];
            if ($a57653f9dd22a05f$var$_typeof(key) === 'object' && key !== null) {
                if (!$a57653f9dd22a05f$var$mapHasEqualEntry(set, a, key, item, strict, memo)) return false;
            } else if (!strict && (!a.has(key) || !$a57653f9dd22a05f$var$innerDeepEqual(a.get(key), item, false, memo)) && !$a57653f9dd22a05f$var$mapHasEqualEntry(set, a, key, item, false, memo)) return false;
        }
        return set.size === 0;
    }
    return true;
}
function $a57653f9dd22a05f$var$objEquiv(a, b, strict, keys, memos, iterationType) {
    // Sets and maps don't have their entries accessible via normal object
    // properties.
    var i = 0;
    if (iterationType === $a57653f9dd22a05f$var$kIsSet) {
        if (!$a57653f9dd22a05f$var$setEquiv(a, b, strict, memos)) return false;
    } else if (iterationType === $a57653f9dd22a05f$var$kIsMap) {
        if (!$a57653f9dd22a05f$var$mapEquiv(a, b, strict, memos)) return false;
    } else if (iterationType === $a57653f9dd22a05f$var$kIsArray) for(; i < a.length; i++){
        if ($a57653f9dd22a05f$var$hasOwnProperty(a, i)) {
            if (!$a57653f9dd22a05f$var$hasOwnProperty(b, i) || !$a57653f9dd22a05f$var$innerDeepEqual(a[i], b[i], strict, memos)) return false;
        } else if ($a57653f9dd22a05f$var$hasOwnProperty(b, i)) return false;
        else {
            // Array is sparse.
            var keysA = Object.keys(a);
            for(; i < keysA.length; i++){
                var key = keysA[i];
                if (!$a57653f9dd22a05f$var$hasOwnProperty(b, key) || !$a57653f9dd22a05f$var$innerDeepEqual(a[key], b[key], strict, memos)) return false;
            }
            if (keysA.length !== Object.keys(b).length) return false;
            return true;
        }
    }
     // The pair must have equivalent values for every corresponding key.
    // Possibly expensive deep test:
    for(i = 0; i < keys.length; i++){
        var _key = keys[i];
        if (!$a57653f9dd22a05f$var$innerDeepEqual(a[_key], b[_key], strict, memos)) return false;
    }
    return true;
}
function $a57653f9dd22a05f$var$isDeepEqual(val1, val2) {
    return $a57653f9dd22a05f$var$innerDeepEqual(val1, val2, $a57653f9dd22a05f$var$kLoose);
}
function $a57653f9dd22a05f$var$isDeepStrictEqual(val1, val2) {
    return $a57653f9dd22a05f$var$innerDeepEqual(val1, val2, $a57653f9dd22a05f$var$kStrict);
}
module.exports = {
    isDeepEqual: $a57653f9dd22a05f$var$isDeepEqual,
    isDeepStrictEqual: $a57653f9dd22a05f$var$isDeepStrictEqual
};

});
parcelRequire.register("60Ld5", function(module, exports) {
'use strict';

var $gkfDL = parcelRequire("gkfDL");

var $hBU8T = parcelRequire("hBU8T");

var $56HZY = parcelRequire("56HZY");

var $jN21Q = parcelRequire("jN21Q");

var $6xFYI = parcelRequire("6xFYI");
var $46075d145c7558b9$var$polyfill = $gkfDL($jN21Q(), Number);
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ $hBU8T($46075d145c7558b9$var$polyfill, {
    getPolyfill: $jN21Q,
    implementation: $56HZY,
    shim: $6xFYI
});
module.exports = $46075d145c7558b9$var$polyfill;

});
parcelRequire.register("56HZY", function(module, exports) {
'use strict';
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module.exports = function isNaN(value) {
    return value !== value;
};

});

parcelRequire.register("jN21Q", function(module, exports) {
'use strict';

var $56HZY = parcelRequire("56HZY");
module.exports = function getPolyfill() {
    if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN('a')) return Number.isNaN;
    return $56HZY;
};

});

parcelRequire.register("6xFYI", function(module, exports) {
'use strict';

var $hBU8T = parcelRequire("hBU8T");

var $jN21Q = parcelRequire("jN21Q");
/* http://www.ecma-international.org/ecma-262/6.0/#sec-number.isnan */ module.exports = function shimNumberIsNaN() {
    var polyfill = $jN21Q();
    $hBU8T(Number, {
        isNaN: polyfill
    }, {
        isNaN: function testIsNaN() {
            return Number.isNaN !== polyfill;
        }
    });
    return polyfill;
};

});




parcelRequire.register("f9tZZ", function(module, exports) {
"use strict";

var $b07ef7678185d0f0$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
var $b07ef7678185d0f0$var$__importDefault = module.exports && module.exports.__importDefault || function(mod) {
    return mod && mod.__esModule ? mod : {
        "default": mod
    };
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.getLength = module.exports.decode = module.exports.encode = void 0;

var $b07ef7678185d0f0$var$bn_js_1 = $b07ef7678185d0f0$var$__importDefault((parcelRequire("9i2Ru")));
/**
 * RLP Encoding based on: https://github.com/ethereum/wiki/wiki/%5BEnglish%5D-RLP
 * This function takes in a data, convert it to buffer if not, and a length for recursion
 * @param input - will be converted to buffer
 * @returns returns buffer of encoded data
 **/ function $b07ef7678185d0f0$var$encode(input) {
    if (Array.isArray(input)) {
        var output = [];
        for(var i = 0; i < input.length; i++)output.push($b07ef7678185d0f0$var$encode(input[i]));
        var buf = $b07ef7678185d0f0$require$Buffer.concat(output);
        return $b07ef7678185d0f0$require$Buffer.concat([
            $b07ef7678185d0f0$var$encodeLength(buf.length, 192),
            buf
        ]);
    } else {
        var inputBuf = $b07ef7678185d0f0$var$toBuffer(input);
        return inputBuf.length === 1 && inputBuf[0] < 128 ? inputBuf : $b07ef7678185d0f0$require$Buffer.concat([
            $b07ef7678185d0f0$var$encodeLength(inputBuf.length, 128),
            inputBuf
        ]);
    }
}
module.exports.encode = $b07ef7678185d0f0$var$encode;
/**
 * Parse integers. Check if there is no leading zeros
 * @param v The value to parse
 * @param base The base to parse the integer into
 */ function $b07ef7678185d0f0$var$safeParseInt(v, base) {
    if (v[0] === '0' && v[1] === '0') throw new Error('invalid RLP: extra zeros');
    return parseInt(v, base);
}
function $b07ef7678185d0f0$var$encodeLength(len, offset) {
    if (len < 56) return $b07ef7678185d0f0$require$Buffer.from([
        len + offset
    ]);
    else {
        var hexLength = $b07ef7678185d0f0$var$intToHex(len);
        var lLength = hexLength.length / 2;
        var firstByte = $b07ef7678185d0f0$var$intToHex(offset + 55 + lLength);
        return $b07ef7678185d0f0$require$Buffer.from(firstByte + hexLength, 'hex');
    }
}
function $b07ef7678185d0f0$var$decode(input, stream) {
    if (stream === void 0) stream = false;
    if (!input || input.length === 0) return $b07ef7678185d0f0$require$Buffer.from([]);
    var inputBuffer = $b07ef7678185d0f0$var$toBuffer(input);
    var decoded = $b07ef7678185d0f0$var$_decode(inputBuffer);
    if (stream) return decoded;
    if (decoded.remainder.length !== 0) throw new Error('invalid remainder');
    return decoded.data;
}
module.exports.decode = $b07ef7678185d0f0$var$decode;
/**
 * Get the length of the RLP input
 * @param input
 * @returns The length of the input or an empty Buffer if no input
 */ function $b07ef7678185d0f0$var$getLength(input) {
    if (!input || input.length === 0) return $b07ef7678185d0f0$require$Buffer.from([]);
    var inputBuffer = $b07ef7678185d0f0$var$toBuffer(input);
    var firstByte = inputBuffer[0];
    if (firstByte <= 127) return inputBuffer.length;
    else if (firstByte <= 183) return firstByte - 127;
    else if (firstByte <= 191) return firstByte - 182;
    else if (firstByte <= 247) // a list between  0-55 bytes long
    return firstByte - 191;
    else {
        // a list  over 55 bytes long
        var llength = firstByte - 246;
        var length_1 = $b07ef7678185d0f0$var$safeParseInt(inputBuffer.slice(1, llength).toString('hex'), 16);
        return llength + length_1;
    }
}
module.exports.getLength = $b07ef7678185d0f0$var$getLength;
/** Decode an input with RLP */ function $b07ef7678185d0f0$var$_decode(input) {
    var length, llength, data, innerRemainder, d;
    var decoded = [];
    var firstByte = input[0];
    if (firstByte <= 127) // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.
    return {
        data: input.slice(0, 1),
        remainder: input.slice(1)
    };
    else if (firstByte <= 183) {
        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string
        // The range of the first byte is [0x80, 0xb7]
        length = firstByte - 127;
        // set 0x80 null to 0
        if (firstByte === 128) data = $b07ef7678185d0f0$require$Buffer.from([]);
        else data = input.slice(1, length);
        if (length === 2 && data[0] < 128) throw new Error('invalid rlp encoding: byte must be less 0x80');
        return {
            data: data,
            remainder: input.slice(length)
        };
    } else if (firstByte <= 191) {
        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),
        // followed by the length, followed by the string
        llength = firstByte - 182;
        if (input.length - 1 < llength) throw new Error('invalid RLP: not enough bytes for string length');
        length = $b07ef7678185d0f0$var$safeParseInt(input.slice(1, llength).toString('hex'), 16);
        if (length <= 55) throw new Error('invalid RLP: expected string length to be greater than 55');
        data = input.slice(llength, length + llength);
        if (data.length < length) throw new Error('invalid RLP: not enough bytes for string');
        return {
            data: data,
            remainder: input.slice(length + llength)
        };
    } else if (firstByte <= 247) {
        // a list between  0-55 bytes long
        length = firstByte - 191;
        innerRemainder = input.slice(1, length);
        while(innerRemainder.length){
            d = $b07ef7678185d0f0$var$_decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(length)
        };
    } else {
        // a list  over 55 bytes long
        llength = firstByte - 246;
        length = $b07ef7678185d0f0$var$safeParseInt(input.slice(1, llength).toString('hex'), 16);
        var totalLength = llength + length;
        if (totalLength > input.length) throw new Error('invalid rlp: total length is larger than the data');
        innerRemainder = input.slice(llength, totalLength);
        if (innerRemainder.length === 0) throw new Error('invalid rlp, List has a invalid length');
        while(innerRemainder.length){
            d = $b07ef7678185d0f0$var$_decode(innerRemainder);
            decoded.push(d.data);
            innerRemainder = d.remainder;
        }
        return {
            data: decoded,
            remainder: input.slice(totalLength)
        };
    }
}
/** Check if a string is prefixed by 0x */ function $b07ef7678185d0f0$var$isHexPrefixed(str) {
    return str.slice(0, 2) === '0x';
}
/** Removes 0x from a given String */ function $b07ef7678185d0f0$var$stripHexPrefix(str) {
    if (typeof str !== 'string') return str;
    return $b07ef7678185d0f0$var$isHexPrefixed(str) ? str.slice(2) : str;
}
/** Transform an integer into its hexadecimal value */ function $b07ef7678185d0f0$var$intToHex(integer) {
    if (integer < 0) throw new Error('Invalid integer as argument, must be unsigned!');
    var hex = integer.toString(16);
    return hex.length % 2 ? "0" + hex : hex;
}
/** Pad a string to be even */ function $b07ef7678185d0f0$var$padToEven(a) {
    return a.length % 2 ? "0" + a : a;
}
/** Transform an integer into a Buffer */ function $b07ef7678185d0f0$var$intToBuffer(integer) {
    var hex = $b07ef7678185d0f0$var$intToHex(integer);
    return $b07ef7678185d0f0$require$Buffer.from(hex, 'hex');
}
/** Transform anything into a Buffer */ function $b07ef7678185d0f0$var$toBuffer(v) {
    if (!$b07ef7678185d0f0$require$Buffer.isBuffer(v)) {
        if (typeof v === 'string') {
            if ($b07ef7678185d0f0$var$isHexPrefixed(v)) return $b07ef7678185d0f0$require$Buffer.from($b07ef7678185d0f0$var$padToEven($b07ef7678185d0f0$var$stripHexPrefix(v)), 'hex');
            else return $b07ef7678185d0f0$require$Buffer.from(v);
        } else if (typeof v === 'number' || typeof v === 'bigint') {
            if (!v) return $b07ef7678185d0f0$require$Buffer.from([]);
            else return $b07ef7678185d0f0$var$intToBuffer(v);
        } else if (v === null || v === undefined) return $b07ef7678185d0f0$require$Buffer.from([]);
        else if (v instanceof Uint8Array) return $b07ef7678185d0f0$require$Buffer.from(v);
        else if ($b07ef7678185d0f0$var$bn_js_1.default.isBN(v)) // converts a BN to a Buffer
        return $b07ef7678185d0f0$require$Buffer.from(v.toArray());
        else throw new Error('invalid type');
    }
    return v;
}

});
parcelRequire.register("9i2Ru", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("lb6jJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("cGz00", function(module, exports) {
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $Snhio = parcelRequire("Snhio");

var $4gUXg = parcelRequire("4gUXg");

var $fBdwr = parcelRequire("fBdwr");

var $9VTgz = parcelRequire("9VTgz");
function $93c48e5d02165e20$var$Hash(hash) {
    $9VTgz.call(this, 'digest');
    this._hash = hash;
}
$fGyu9($93c48e5d02165e20$var$Hash, $9VTgz);
$93c48e5d02165e20$var$Hash.prototype._update = function(data) {
    this._hash.update(data);
};
$93c48e5d02165e20$var$Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new $Snhio();
    if (alg === 'rmd160' || alg === 'ripemd160') return new $4gUXg();
    return new $93c48e5d02165e20$var$Hash($fBdwr(alg));
};

});
parcelRequire.register("Snhio", function(module, exports) {
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $kus6K = parcelRequire("kus6K");

var $cBldb = parcelRequire("cBldb");
var $0a3719c75e2438cb$require$Buffer = $cBldb.Buffer;
var $0a3719c75e2438cb$var$ARRAY16 = new Array(16);
function $0a3719c75e2438cb$var$MD5() {
    $kus6K.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
}
$fGyu9($0a3719c75e2438cb$var$MD5, $kus6K);
$0a3719c75e2438cb$var$MD5.prototype._update = function() {
    var M = $0a3719c75e2438cb$var$ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = $0a3719c75e2438cb$var$fnF(a, b, c, d, M[0], 3614090360, 7);
    d = $0a3719c75e2438cb$var$fnF(d, a, b, c, M[1], 3905402710, 12);
    c = $0a3719c75e2438cb$var$fnF(c, d, a, b, M[2], 606105819, 17);
    b = $0a3719c75e2438cb$var$fnF(b, c, d, a, M[3], 3250441966, 22);
    a = $0a3719c75e2438cb$var$fnF(a, b, c, d, M[4], 4118548399, 7);
    d = $0a3719c75e2438cb$var$fnF(d, a, b, c, M[5], 1200080426, 12);
    c = $0a3719c75e2438cb$var$fnF(c, d, a, b, M[6], 2821735955, 17);
    b = $0a3719c75e2438cb$var$fnF(b, c, d, a, M[7], 4249261313, 22);
    a = $0a3719c75e2438cb$var$fnF(a, b, c, d, M[8], 1770035416, 7);
    d = $0a3719c75e2438cb$var$fnF(d, a, b, c, M[9], 2336552879, 12);
    c = $0a3719c75e2438cb$var$fnF(c, d, a, b, M[10], 4294925233, 17);
    b = $0a3719c75e2438cb$var$fnF(b, c, d, a, M[11], 2304563134, 22);
    a = $0a3719c75e2438cb$var$fnF(a, b, c, d, M[12], 1804603682, 7);
    d = $0a3719c75e2438cb$var$fnF(d, a, b, c, M[13], 4254626195, 12);
    c = $0a3719c75e2438cb$var$fnF(c, d, a, b, M[14], 2792965006, 17);
    b = $0a3719c75e2438cb$var$fnF(b, c, d, a, M[15], 1236535329, 22);
    a = $0a3719c75e2438cb$var$fnG(a, b, c, d, M[1], 4129170786, 5);
    d = $0a3719c75e2438cb$var$fnG(d, a, b, c, M[6], 3225465664, 9);
    c = $0a3719c75e2438cb$var$fnG(c, d, a, b, M[11], 643717713, 14);
    b = $0a3719c75e2438cb$var$fnG(b, c, d, a, M[0], 3921069994, 20);
    a = $0a3719c75e2438cb$var$fnG(a, b, c, d, M[5], 3593408605, 5);
    d = $0a3719c75e2438cb$var$fnG(d, a, b, c, M[10], 38016083, 9);
    c = $0a3719c75e2438cb$var$fnG(c, d, a, b, M[15], 3634488961, 14);
    b = $0a3719c75e2438cb$var$fnG(b, c, d, a, M[4], 3889429448, 20);
    a = $0a3719c75e2438cb$var$fnG(a, b, c, d, M[9], 568446438, 5);
    d = $0a3719c75e2438cb$var$fnG(d, a, b, c, M[14], 3275163606, 9);
    c = $0a3719c75e2438cb$var$fnG(c, d, a, b, M[3], 4107603335, 14);
    b = $0a3719c75e2438cb$var$fnG(b, c, d, a, M[8], 1163531501, 20);
    a = $0a3719c75e2438cb$var$fnG(a, b, c, d, M[13], 2850285829, 5);
    d = $0a3719c75e2438cb$var$fnG(d, a, b, c, M[2], 4243563512, 9);
    c = $0a3719c75e2438cb$var$fnG(c, d, a, b, M[7], 1735328473, 14);
    b = $0a3719c75e2438cb$var$fnG(b, c, d, a, M[12], 2368359562, 20);
    a = $0a3719c75e2438cb$var$fnH(a, b, c, d, M[5], 4294588738, 4);
    d = $0a3719c75e2438cb$var$fnH(d, a, b, c, M[8], 2272392833, 11);
    c = $0a3719c75e2438cb$var$fnH(c, d, a, b, M[11], 1839030562, 16);
    b = $0a3719c75e2438cb$var$fnH(b, c, d, a, M[14], 4259657740, 23);
    a = $0a3719c75e2438cb$var$fnH(a, b, c, d, M[1], 2763975236, 4);
    d = $0a3719c75e2438cb$var$fnH(d, a, b, c, M[4], 1272893353, 11);
    c = $0a3719c75e2438cb$var$fnH(c, d, a, b, M[7], 4139469664, 16);
    b = $0a3719c75e2438cb$var$fnH(b, c, d, a, M[10], 3200236656, 23);
    a = $0a3719c75e2438cb$var$fnH(a, b, c, d, M[13], 681279174, 4);
    d = $0a3719c75e2438cb$var$fnH(d, a, b, c, M[0], 3936430074, 11);
    c = $0a3719c75e2438cb$var$fnH(c, d, a, b, M[3], 3572445317, 16);
    b = $0a3719c75e2438cb$var$fnH(b, c, d, a, M[6], 76029189, 23);
    a = $0a3719c75e2438cb$var$fnH(a, b, c, d, M[9], 3654602809, 4);
    d = $0a3719c75e2438cb$var$fnH(d, a, b, c, M[12], 3873151461, 11);
    c = $0a3719c75e2438cb$var$fnH(c, d, a, b, M[15], 530742520, 16);
    b = $0a3719c75e2438cb$var$fnH(b, c, d, a, M[2], 3299628645, 23);
    a = $0a3719c75e2438cb$var$fnI(a, b, c, d, M[0], 4096336452, 6);
    d = $0a3719c75e2438cb$var$fnI(d, a, b, c, M[7], 1126891415, 10);
    c = $0a3719c75e2438cb$var$fnI(c, d, a, b, M[14], 2878612391, 15);
    b = $0a3719c75e2438cb$var$fnI(b, c, d, a, M[5], 4237533241, 21);
    a = $0a3719c75e2438cb$var$fnI(a, b, c, d, M[12], 1700485571, 6);
    d = $0a3719c75e2438cb$var$fnI(d, a, b, c, M[3], 2399980690, 10);
    c = $0a3719c75e2438cb$var$fnI(c, d, a, b, M[10], 4293915773, 15);
    b = $0a3719c75e2438cb$var$fnI(b, c, d, a, M[1], 2240044497, 21);
    a = $0a3719c75e2438cb$var$fnI(a, b, c, d, M[8], 1873313359, 6);
    d = $0a3719c75e2438cb$var$fnI(d, a, b, c, M[15], 4264355552, 10);
    c = $0a3719c75e2438cb$var$fnI(c, d, a, b, M[6], 2734768916, 15);
    b = $0a3719c75e2438cb$var$fnI(b, c, d, a, M[13], 1309151649, 21);
    a = $0a3719c75e2438cb$var$fnI(a, b, c, d, M[4], 4149444226, 6);
    d = $0a3719c75e2438cb$var$fnI(d, a, b, c, M[11], 3174756917, 10);
    c = $0a3719c75e2438cb$var$fnI(c, d, a, b, M[2], 718787259, 15);
    b = $0a3719c75e2438cb$var$fnI(b, c, d, a, M[9], 3951481745, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
$0a3719c75e2438cb$var$MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $0a3719c75e2438cb$require$Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function $0a3719c75e2438cb$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $0a3719c75e2438cb$var$fnF(a, b, c, d, m, k, s) {
    return $0a3719c75e2438cb$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function $0a3719c75e2438cb$var$fnG(a, b, c, d, m, k, s) {
    return $0a3719c75e2438cb$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function $0a3719c75e2438cb$var$fnH(a, b, c, d, m, k, s) {
    return $0a3719c75e2438cb$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function $0a3719c75e2438cb$var$fnI(a, b, c, d, m, k, s) {
    return $0a3719c75e2438cb$var$rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = $0a3719c75e2438cb$var$MD5;

});
parcelRequire.register("kus6K", function(module, exports) {
'use strict';

var $cBldb = parcelRequire("cBldb");
var $eeac69a481d7244d$require$Buffer = $cBldb.Buffer;

var $55xsE = parcelRequire("55xsE");
var $eeac69a481d7244d$require$Transform = $55xsE.Transform;

var $fGyu9 = parcelRequire("fGyu9");
function $eeac69a481d7244d$var$throwIfNotStringOrBuffer(val, prefix) {
    if (!$eeac69a481d7244d$require$Buffer.isBuffer(val) && typeof val !== 'string') throw new TypeError(prefix + ' must be a string or a buffer');
}
function $eeac69a481d7244d$var$HashBase(blockSize) {
    $eeac69a481d7244d$require$Transform.call(this);
    this._block = $eeac69a481d7244d$require$Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
$fGyu9($eeac69a481d7244d$var$HashBase, $eeac69a481d7244d$require$Transform);
$eeac69a481d7244d$var$HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
$eeac69a481d7244d$var$HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
$eeac69a481d7244d$var$HashBase.prototype.update = function(data, encoding) {
    $eeac69a481d7244d$var$throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called');
    if (!$eeac69a481d7244d$require$Buffer.isBuffer(data)) data = $eeac69a481d7244d$require$Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
    }
    return this;
};
$eeac69a481d7244d$var$HashBase.prototype._update = function() {
    throw new Error('_update is not implemented');
};
$eeac69a481d7244d$var$HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
$eeac69a481d7244d$var$HashBase.prototype._digest = function() {
    throw new Error('_digest is not implemented');
};
module.exports = $eeac69a481d7244d$var$HashBase;

});


parcelRequire.register("4gUXg", function(module, exports) {
'use strict';

var $31c4d6176ef53b4f$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $fGyu9 = parcelRequire("fGyu9");

var $kus6K = parcelRequire("kus6K");
var $31c4d6176ef53b4f$var$ARRAY16 = new Array(16);
var $31c4d6176ef53b4f$var$zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var $31c4d6176ef53b4f$var$zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var $31c4d6176ef53b4f$var$sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var $31c4d6176ef53b4f$var$sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var $31c4d6176ef53b4f$var$hl = [
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
];
var $31c4d6176ef53b4f$var$hr = [
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
];
function $31c4d6176ef53b4f$var$RIPEMD160() {
    $kus6K.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
}
$fGyu9($31c4d6176ef53b4f$var$RIPEMD160, $kus6K);
$31c4d6176ef53b4f$var$RIPEMD160.prototype._update = function() {
    var words = $31c4d6176ef53b4f$var$ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = $31c4d6176ef53b4f$var$fn1(al, bl, cl, dl, el, words[$31c4d6176ef53b4f$var$zl[i]], $31c4d6176ef53b4f$var$hl[0], $31c4d6176ef53b4f$var$sl[i]);
            tr = $31c4d6176ef53b4f$var$fn5(ar, br, cr, dr, er, words[$31c4d6176ef53b4f$var$zr[i]], $31c4d6176ef53b4f$var$hr[0], $31c4d6176ef53b4f$var$sr[i]);
        } else if (i < 32) {
            tl = $31c4d6176ef53b4f$var$fn2(al, bl, cl, dl, el, words[$31c4d6176ef53b4f$var$zl[i]], $31c4d6176ef53b4f$var$hl[1], $31c4d6176ef53b4f$var$sl[i]);
            tr = $31c4d6176ef53b4f$var$fn4(ar, br, cr, dr, er, words[$31c4d6176ef53b4f$var$zr[i]], $31c4d6176ef53b4f$var$hr[1], $31c4d6176ef53b4f$var$sr[i]);
        } else if (i < 48) {
            tl = $31c4d6176ef53b4f$var$fn3(al, bl, cl, dl, el, words[$31c4d6176ef53b4f$var$zl[i]], $31c4d6176ef53b4f$var$hl[2], $31c4d6176ef53b4f$var$sl[i]);
            tr = $31c4d6176ef53b4f$var$fn3(ar, br, cr, dr, er, words[$31c4d6176ef53b4f$var$zr[i]], $31c4d6176ef53b4f$var$hr[2], $31c4d6176ef53b4f$var$sr[i]);
        } else if (i < 64) {
            tl = $31c4d6176ef53b4f$var$fn4(al, bl, cl, dl, el, words[$31c4d6176ef53b4f$var$zl[i]], $31c4d6176ef53b4f$var$hl[3], $31c4d6176ef53b4f$var$sl[i]);
            tr = $31c4d6176ef53b4f$var$fn2(ar, br, cr, dr, er, words[$31c4d6176ef53b4f$var$zr[i]], $31c4d6176ef53b4f$var$hr[3], $31c4d6176ef53b4f$var$sr[i]);
        } else {
            tl = $31c4d6176ef53b4f$var$fn5(al, bl, cl, dl, el, words[$31c4d6176ef53b4f$var$zl[i]], $31c4d6176ef53b4f$var$hl[4], $31c4d6176ef53b4f$var$sl[i]);
            tr = $31c4d6176ef53b4f$var$fn1(ar, br, cr, dr, er, words[$31c4d6176ef53b4f$var$zr[i]], $31c4d6176ef53b4f$var$hr[4], $31c4d6176ef53b4f$var$sr[i]);
        }
        al = el;
        el = dl;
        dl = $31c4d6176ef53b4f$var$rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = $31c4d6176ef53b4f$var$rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
$31c4d6176ef53b4f$var$RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = $31c4d6176ef53b4f$require$Buffer.alloc ? $31c4d6176ef53b4f$require$Buffer.alloc(20) : new $31c4d6176ef53b4f$require$Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function $31c4d6176ef53b4f$var$rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function $31c4d6176ef53b4f$var$fn1(a, b, c, d, e, m, k, s) {
    return $31c4d6176ef53b4f$var$rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function $31c4d6176ef53b4f$var$fn2(a, b, c, d, e, m, k, s) {
    return $31c4d6176ef53b4f$var$rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function $31c4d6176ef53b4f$var$fn3(a, b, c, d, e, m, k, s) {
    return $31c4d6176ef53b4f$var$rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function $31c4d6176ef53b4f$var$fn4(a, b, c, d, e, m, k, s) {
    return $31c4d6176ef53b4f$var$rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function $31c4d6176ef53b4f$var$fn5(a, b, c, d, e, m, k, s) {
    return $31c4d6176ef53b4f$var$rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = $31c4d6176ef53b4f$var$RIPEMD160;

});

parcelRequire.register("fBdwr", function(module, exports) {
var $b5b4ccf5ab92dd1d$var$exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = $b5b4ccf5ab92dd1d$var$exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
};

$b5b4ccf5ab92dd1d$var$exports.sha = (parcelRequire("9juvs"));

$b5b4ccf5ab92dd1d$var$exports.sha1 = (parcelRequire("3vptp"));

$b5b4ccf5ab92dd1d$var$exports.sha224 = (parcelRequire("hFDlt"));

$b5b4ccf5ab92dd1d$var$exports.sha256 = (parcelRequire("7vyLm"));

$b5b4ccf5ab92dd1d$var$exports.sha384 = (parcelRequire("fwX8G"));

$b5b4ccf5ab92dd1d$var$exports.sha512 = (parcelRequire("3a4U5"));

});
parcelRequire.register("9juvs", function(module, exports) {

var $fGyu9 = parcelRequire("fGyu9");

var $74omh = parcelRequire("74omh");

var $cBldb = parcelRequire("cBldb");
var $6c7d8d564b43ce1a$require$Buffer = $cBldb.Buffer;
var $6c7d8d564b43ce1a$var$K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var $6c7d8d564b43ce1a$var$W = new Array(80);
function $6c7d8d564b43ce1a$var$Sha() {
    this.init();
    this._w = $6c7d8d564b43ce1a$var$W;
    $74omh.call(this, 64, 56);
}
$fGyu9($6c7d8d564b43ce1a$var$Sha, $74omh);
$6c7d8d564b43ce1a$var$Sha.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function $6c7d8d564b43ce1a$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $6c7d8d564b43ce1a$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $6c7d8d564b43ce1a$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$6c7d8d564b43ce1a$var$Sha.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $6c7d8d564b43ce1a$var$rotl5(a) + $6c7d8d564b43ce1a$var$ft(s, b, c, d) + e + W[j] + $6c7d8d564b43ce1a$var$K[s] | 0;
        e = d;
        d = c;
        c = $6c7d8d564b43ce1a$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$6c7d8d564b43ce1a$var$Sha.prototype._hash = function() {
    var H = $6c7d8d564b43ce1a$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $6c7d8d564b43ce1a$var$Sha;

});
parcelRequire.register("74omh", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $525bcd3272fa6352$require$Buffer = $cBldb.Buffer;
// prototype class for hash functions
function $525bcd3272fa6352$var$Hash(blockSize, finalSize) {
    this._block = $525bcd3272fa6352$require$Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
$525bcd3272fa6352$var$Hash.prototype.update = function(data, enc) {
    if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = $525bcd3272fa6352$require$Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
$525bcd3272fa6352$var$Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 128;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 4294967295) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
$525bcd3272fa6352$var$Hash.prototype._update = function() {
    throw new Error('_update must be implemented by subclass');
};
module.exports = $525bcd3272fa6352$var$Hash;

});


parcelRequire.register("3vptp", function(module, exports) {

var $fGyu9 = parcelRequire("fGyu9");

var $74omh = parcelRequire("74omh");

var $cBldb = parcelRequire("cBldb");
var $28d806d36f6d1fe6$require$Buffer = $cBldb.Buffer;
var $28d806d36f6d1fe6$var$K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var $28d806d36f6d1fe6$var$W = new Array(80);
function $28d806d36f6d1fe6$var$Sha1() {
    this.init();
    this._w = $28d806d36f6d1fe6$var$W;
    $74omh.call(this, 64, 56);
}
$fGyu9($28d806d36f6d1fe6$var$Sha1, $74omh);
$28d806d36f6d1fe6$var$Sha1.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function $28d806d36f6d1fe6$var$rotl1(num) {
    return num << 1 | num >>> 31;
}
function $28d806d36f6d1fe6$var$rotl5(num) {
    return num << 5 | num >>> 27;
}
function $28d806d36f6d1fe6$var$rotl30(num) {
    return num << 30 | num >>> 2;
}
function $28d806d36f6d1fe6$var$ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
$28d806d36f6d1fe6$var$Sha1.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W[i] = $28d806d36f6d1fe6$var$rotl1(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = $28d806d36f6d1fe6$var$rotl5(a) + $28d806d36f6d1fe6$var$ft(s, b, c, d) + e + W[j] + $28d806d36f6d1fe6$var$K[s] | 0;
        e = d;
        d = c;
        c = $28d806d36f6d1fe6$var$rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
$28d806d36f6d1fe6$var$Sha1.prototype._hash = function() {
    var H = $28d806d36f6d1fe6$require$Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = $28d806d36f6d1fe6$var$Sha1;

});

parcelRequire.register("hFDlt", function(module, exports) {

var $fGyu9 = parcelRequire("fGyu9");

var $7vyLm = parcelRequire("7vyLm");

var $74omh = parcelRequire("74omh");

var $cBldb = parcelRequire("cBldb");
var $cdd4c929c5fb2807$require$Buffer = $cBldb.Buffer;
var $cdd4c929c5fb2807$var$W = new Array(64);
function $cdd4c929c5fb2807$var$Sha224() {
    this.init();
    this._w = $cdd4c929c5fb2807$var$W // new Array(64)
    ;
    $74omh.call(this, 64, 56);
}
$fGyu9($cdd4c929c5fb2807$var$Sha224, $7vyLm);
$cdd4c929c5fb2807$var$Sha224.prototype.init = function() {
    this._a = 3238371032;
    this._b = 914150663;
    this._c = 812702999;
    this._d = 4144912697;
    this._e = 4290775857;
    this._f = 1750603025;
    this._g = 1694076839;
    this._h = 3204075428;
    return this;
};
$cdd4c929c5fb2807$var$Sha224.prototype._hash = function() {
    var H = $cdd4c929c5fb2807$require$Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = $cdd4c929c5fb2807$var$Sha224;

});
parcelRequire.register("7vyLm", function(module, exports) {

var $fGyu9 = parcelRequire("fGyu9");

var $74omh = parcelRequire("74omh");

var $cBldb = parcelRequire("cBldb");
var $577664d57753ed3b$require$Buffer = $cBldb.Buffer;
var $577664d57753ed3b$var$K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
var $577664d57753ed3b$var$W = new Array(64);
function $577664d57753ed3b$var$Sha256() {
    this.init();
    this._w = $577664d57753ed3b$var$W // new Array(64)
    ;
    $74omh.call(this, 64, 56);
}
$fGyu9($577664d57753ed3b$var$Sha256, $74omh);
$577664d57753ed3b$var$Sha256.prototype.init = function() {
    this._a = 1779033703;
    this._b = 3144134277;
    this._c = 1013904242;
    this._d = 2773480762;
    this._e = 1359893119;
    this._f = 2600822924;
    this._g = 528734635;
    this._h = 1541459225;
    return this;
};
function $577664d57753ed3b$var$ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $577664d57753ed3b$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $577664d57753ed3b$var$sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function $577664d57753ed3b$var$sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function $577664d57753ed3b$var$gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function $577664d57753ed3b$var$gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
$577664d57753ed3b$var$Sha256.prototype._update = function(M) {
    var W = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W[i] = $577664d57753ed3b$var$gamma1(W[i - 2]) + W[i - 7] + $577664d57753ed3b$var$gamma0(W[i - 15]) + W[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + $577664d57753ed3b$var$sigma1(e) + $577664d57753ed3b$var$ch(e, f, g) + $577664d57753ed3b$var$K[j] + W[j] | 0;
        var T2 = $577664d57753ed3b$var$sigma0(a) + $577664d57753ed3b$var$maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
$577664d57753ed3b$var$Sha256.prototype._hash = function() {
    var H = $577664d57753ed3b$require$Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = $577664d57753ed3b$var$Sha256;

});


parcelRequire.register("fwX8G", function(module, exports) {

var $fGyu9 = parcelRequire("fGyu9");

var $3a4U5 = parcelRequire("3a4U5");

var $74omh = parcelRequire("74omh");

var $cBldb = parcelRequire("cBldb");
var $b4e7b7f0b2822faa$require$Buffer = $cBldb.Buffer;
var $b4e7b7f0b2822faa$var$W = new Array(160);
function $b4e7b7f0b2822faa$var$Sha384() {
    this.init();
    this._w = $b4e7b7f0b2822faa$var$W;
    $74omh.call(this, 128, 112);
}
$fGyu9($b4e7b7f0b2822faa$var$Sha384, $3a4U5);
$b4e7b7f0b2822faa$var$Sha384.prototype.init = function() {
    this._ah = 3418070365;
    this._bh = 1654270250;
    this._ch = 2438529370;
    this._dh = 355462360;
    this._eh = 1731405415;
    this._fh = 2394180231;
    this._gh = 3675008525;
    this._hh = 1203062813;
    this._al = 3238371032;
    this._bl = 914150663;
    this._cl = 812702999;
    this._dl = 4144912697;
    this._el = 4290775857;
    this._fl = 1750603025;
    this._gl = 1694076839;
    this._hl = 3204075428;
    return this;
};
$b4e7b7f0b2822faa$var$Sha384.prototype._hash = function() {
    var H = $b4e7b7f0b2822faa$require$Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = $b4e7b7f0b2822faa$var$Sha384;

});
parcelRequire.register("3a4U5", function(module, exports) {

var $fGyu9 = parcelRequire("fGyu9");

var $74omh = parcelRequire("74omh");

var $cBldb = parcelRequire("cBldb");
var $24d61c07edb4af0a$require$Buffer = $cBldb.Buffer;
var $24d61c07edb4af0a$var$K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
var $24d61c07edb4af0a$var$W = new Array(160);
function $24d61c07edb4af0a$var$Sha512() {
    this.init();
    this._w = $24d61c07edb4af0a$var$W;
    $74omh.call(this, 128, 112);
}
$fGyu9($24d61c07edb4af0a$var$Sha512, $74omh);
$24d61c07edb4af0a$var$Sha512.prototype.init = function() {
    this._ah = 1779033703;
    this._bh = 3144134277;
    this._ch = 1013904242;
    this._dh = 2773480762;
    this._eh = 1359893119;
    this._fh = 2600822924;
    this._gh = 528734635;
    this._hh = 1541459225;
    this._al = 4089235720;
    this._bl = 2227873595;
    this._cl = 4271175723;
    this._dl = 1595750129;
    this._el = 2917565137;
    this._fl = 725511199;
    this._gl = 4215389547;
    this._hl = 327033209;
    return this;
};
function $24d61c07edb4af0a$var$Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function $24d61c07edb4af0a$var$maj(x, y, z) {
    return x & y | z & (x | y);
}
function $24d61c07edb4af0a$var$sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function $24d61c07edb4af0a$var$sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function $24d61c07edb4af0a$var$Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function $24d61c07edb4af0a$var$Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function $24d61c07edb4af0a$var$Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function $24d61c07edb4af0a$var$Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function $24d61c07edb4af0a$var$getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
$24d61c07edb4af0a$var$Sha512.prototype._update = function(M) {
    var W = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W[i] = M.readInt32BE(i * 4);
        W[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W[i - 30];
        var xl = W[i - 30 + 1];
        var gamma0 = $24d61c07edb4af0a$var$Gamma0(xh, xl);
        var gamma0l = $24d61c07edb4af0a$var$Gamma0l(xl, xh);
        xh = W[i - 4];
        xl = W[i - 4 + 1];
        var gamma1 = $24d61c07edb4af0a$var$Gamma1(xh, xl);
        var gamma1l = $24d61c07edb4af0a$var$Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W[i - 14];
        var Wi7l = W[i - 14 + 1];
        var Wi16h = W[i - 32];
        var Wi16l = W[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + $24d61c07edb4af0a$var$getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + $24d61c07edb4af0a$var$getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + $24d61c07edb4af0a$var$getCarry(Wil, Wi16l) | 0;
        W[i] = Wih;
        W[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W[j];
        Wil = W[j + 1];
        var majh = $24d61c07edb4af0a$var$maj(ah, bh, ch);
        var majl = $24d61c07edb4af0a$var$maj(al, bl, cl);
        var sigma0h = $24d61c07edb4af0a$var$sigma0(ah, al);
        var sigma0l = $24d61c07edb4af0a$var$sigma0(al, ah);
        var sigma1h = $24d61c07edb4af0a$var$sigma1(eh, el);
        var sigma1l = $24d61c07edb4af0a$var$sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = $24d61c07edb4af0a$var$K[j];
        var Kil = $24d61c07edb4af0a$var$K[j + 1];
        var chh = $24d61c07edb4af0a$var$Ch(eh, fh, gh);
        var chl = $24d61c07edb4af0a$var$Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + $24d61c07edb4af0a$var$getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + $24d61c07edb4af0a$var$getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + $24d61c07edb4af0a$var$getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + $24d61c07edb4af0a$var$getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + $24d61c07edb4af0a$var$getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + $24d61c07edb4af0a$var$getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + $24d61c07edb4af0a$var$getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + $24d61c07edb4af0a$var$getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + $24d61c07edb4af0a$var$getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + $24d61c07edb4af0a$var$getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + $24d61c07edb4af0a$var$getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + $24d61c07edb4af0a$var$getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + $24d61c07edb4af0a$var$getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + $24d61c07edb4af0a$var$getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + $24d61c07edb4af0a$var$getCarry(this._hl, hl) | 0;
};
$24d61c07edb4af0a$var$Sha512.prototype._hash = function() {
    var H = $24d61c07edb4af0a$require$Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = $24d61c07edb4af0a$var$Sha512;

});



parcelRequire.register("9VTgz", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $73b44eaabf436661$require$Buffer = $cBldb.Buffer;

var $fIWMh = parcelRequire("fIWMh");
var $73b44eaabf436661$require$Transform = $fIWMh.Transform;

var $5oJF3 = parcelRequire("5oJF3");
var $73b44eaabf436661$require$StringDecoder = $5oJF3.StringDecoder;

var $fGyu9 = parcelRequire("fGyu9");
function $73b44eaabf436661$var$CipherBase(hashMode) {
    $73b44eaabf436661$require$Transform.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
$fGyu9($73b44eaabf436661$var$CipherBase, $73b44eaabf436661$require$Transform);
$73b44eaabf436661$var$CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === 'string') data = $73b44eaabf436661$require$Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
$73b44eaabf436661$var$CipherBase.prototype.setAutoPadding = function() {};
$73b44eaabf436661$var$CipherBase.prototype.getAuthTag = function() {
    throw new Error('trying to get auth tag in unsupported state');
};
$73b44eaabf436661$var$CipherBase.prototype.setAuthTag = function() {
    throw new Error('trying to set auth tag in unsupported state');
};
$73b44eaabf436661$var$CipherBase.prototype.setAAD = function() {
    throw new Error('trying to set aad in unsupported state');
};
$73b44eaabf436661$var$CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
$73b44eaabf436661$var$CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
$73b44eaabf436661$var$CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || $73b44eaabf436661$require$Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
$73b44eaabf436661$var$CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new $73b44eaabf436661$require$StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error('can\'t switch encodings');
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = $73b44eaabf436661$var$CipherBase;

});
parcelRequire.register("fIWMh", function(module, exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
module.exports = $b7288f1ac2c20c9a$var$Stream;

var $a0h4l = parcelRequire("a0h4l");
var $b7288f1ac2c20c9a$require$EE = $a0h4l.EventEmitter;

var $fGyu9 = parcelRequire("fGyu9");
$fGyu9($b7288f1ac2c20c9a$var$Stream, $b7288f1ac2c20c9a$require$EE);

$b7288f1ac2c20c9a$var$Stream.Readable = (parcelRequire("70JXy"));

$b7288f1ac2c20c9a$var$Stream.Writable = (parcelRequire("kQozz"));

$b7288f1ac2c20c9a$var$Stream.Duplex = (parcelRequire("a3gl0"));

$b7288f1ac2c20c9a$var$Stream.Transform = (parcelRequire("3SaH0"));

$b7288f1ac2c20c9a$var$Stream.PassThrough = (parcelRequire("1Nz0S"));

$b7288f1ac2c20c9a$var$Stream.finished = (parcelRequire("kwxiL"));

$b7288f1ac2c20c9a$var$Stream.pipeline = (parcelRequire("jcAAk"));
// Backwards-compat with node 0.4.x
$b7288f1ac2c20c9a$var$Stream.Stream = $b7288f1ac2c20c9a$var$Stream;
// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.
function $b7288f1ac2c20c9a$var$Stream() {
    $b7288f1ac2c20c9a$require$EE.call(this);
}
$b7288f1ac2c20c9a$var$Stream.prototype.pipe = function(dest, options) {
    var source = this;
    function ondata(chunk) {
        if (dest.writable) {
            if (false === dest.write(chunk) && source.pause) source.pause();
        }
    }
    source.on('data', ondata);
    function ondrain() {
        if (source.readable && source.resume) source.resume();
    }
    dest.on('drain', ondrain);
    // If the 'end' option is not supplied, dest.end() will be called when
    // source gets the 'end' or 'close' events.  Only dest.end() once.
    if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
    }
    var didOnEnd = false;
    function onend() {
        if (didOnEnd) return;
        didOnEnd = true;
        dest.end();
    }
    function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;
        if (typeof dest.destroy === 'function') dest.destroy();
    }
    // don't leave dangling pipes when there are errors.
    function onerror(er) {
        cleanup();
        if ($b7288f1ac2c20c9a$require$EE.listenerCount(this, 'error') === 0) throw er; // Unhandled stream error in pipe.
    }
    source.on('error', onerror);
    dest.on('error', onerror);
    // remove all the event listeners that were added.
    function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);
        source.removeListener('end', onend);
        source.removeListener('close', onclose);
        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);
        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);
        dest.removeListener('close', cleanup);
    }
    source.on('end', cleanup);
    source.on('close', cleanup);
    dest.on('close', cleanup);
    dest.emit('pipe', source);
    // Allow for unix-like usage: A.pipe(B).pipe(C)
    return dest;
};

});



parcelRequire.register("785Wy", function(module, exports) {
'use strict';

var $530de4008ff0d881$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $hGVnO = parcelRequire("hGVnO");

var $gGdn7 = parcelRequire("gGdn7");
/**
 * Pads a `String` to have an even length
 * @param {String} value
 * @return {String} output
 */ function $530de4008ff0d881$var$padToEven(value) {
    var a = value; // eslint-disable-line
    if (typeof a !== 'string') throw new Error('[ethjs-util] while padding to even, value must be string, is currently ' + typeof a + ', while padToEven.');
    if (a.length % 2) a = '0' + a;
    return a;
}
/**
 * Converts a `Number` into a hex `String`
 * @param {Number} i
 * @return {String}
 */ function $530de4008ff0d881$var$intToHex(i) {
    var hex = i.toString(16); // eslint-disable-line
    return '0x' + hex;
}
/**
 * Converts an `Number` to a `Buffer`
 * @param {Number} i
 * @return {Buffer}
 */ function $530de4008ff0d881$var$intToBuffer(i) {
    var hex = $530de4008ff0d881$var$intToHex(i);
    return new $530de4008ff0d881$require$Buffer($530de4008ff0d881$var$padToEven(hex.slice(2)), 'hex');
}
/**
 * Get the binary size of a string
 * @param {String} str
 * @return {Number}
 */ function $530de4008ff0d881$var$getBinarySize(str) {
    if (typeof str !== 'string') throw new Error('[ethjs-util] while getting binary size, method getBinarySize requires input \'str\' to be type String, got \'' + typeof str + '\'.');
    return $530de4008ff0d881$require$Buffer.byteLength(str, 'utf8');
}
/**
 * Returns TRUE if the first specified array contains all elements
 * from the second one. FALSE otherwise.
 *
 * @param {array} superset
 * @param {array} subset
 *
 * @returns {boolean}
 */ function $530de4008ff0d881$var$arrayContainsArray(superset, subset, some) {
    if (Array.isArray(superset) !== true) throw new Error('[ethjs-util] method arrayContainsArray requires input \'superset\' to be an array got type \'' + typeof superset + '\'');
    if (Array.isArray(subset) !== true) throw new Error('[ethjs-util] method arrayContainsArray requires input \'subset\' to be an array got type \'' + typeof subset + '\'');
    return subset[Boolean(some) && 'some' || 'every'](function(value) {
        return superset.indexOf(value) >= 0;
    });
}
/**
 * Should be called to get utf8 from it's hex representation
 *
 * @method toUtf8
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */ function $530de4008ff0d881$var$toUtf8(hex) {
    var bufferValue = new $530de4008ff0d881$require$Buffer($530de4008ff0d881$var$padToEven($gGdn7(hex).replace(/^0+|0+$/g, '')), 'hex');
    return bufferValue.toString('utf8');
}
/**
 * Should be called to get ascii from it's hex representation
 *
 * @method toAscii
 * @param {String} string in hex
 * @returns {String} ascii string representation of hex value
 */ function $530de4008ff0d881$var$toAscii(hex) {
    var str = ''; // eslint-disable-line
    var i = 0, l = hex.length; // eslint-disable-line
    if (hex.substring(0, 2) === '0x') i = 2;
    for(; i < l; i += 2){
        var code = parseInt(hex.substr(i, 2), 16);
        str += String.fromCharCode(code);
    }
    return str;
}
/**
 * Should be called to get hex representation (prefixed by 0x) of utf8 string
 *
 * @method fromUtf8
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */ function $530de4008ff0d881$var$fromUtf8(stringValue) {
    var str = new $530de4008ff0d881$require$Buffer(stringValue, 'utf8');
    return '0x' + $530de4008ff0d881$var$padToEven(str.toString('hex')).replace(/^0+|0+$/g, '');
}
/**
 * Should be called to get hex representation (prefixed by 0x) of ascii string
 *
 * @method fromAscii
 * @param {String} string
 * @param {Number} optional padding
 * @returns {String} hex representation of input string
 */ function $530de4008ff0d881$var$fromAscii(stringValue) {
    var hex = ''; // eslint-disable-line
    for(var i = 0; i < stringValue.length; i++){
        // eslint-disable-line
        var code = stringValue.charCodeAt(i);
        var n = code.toString(16);
        hex += n.length < 2 ? '0' + n : n;
    }
    return '0x' + hex;
}
/**
 * getKeys([{a: 1, b: 2}, {a: 3, b: 4}], 'a') => [1, 3]
 *
 * @method getKeys get specific key from inner object array of objects
 * @param {String} params
 * @param {String} key
 * @param {Boolean} allowEmpty
 * @returns {Array} output just a simple array of output keys
 */ function $530de4008ff0d881$var$getKeys(params, key, allowEmpty) {
    if (!Array.isArray(params)) throw new Error('[ethjs-util] method getKeys expecting type Array as \'params\' input, got \'' + typeof params + '\'');
    if (typeof key !== 'string') throw new Error('[ethjs-util] method getKeys expecting type String for input \'key\' got \'' + typeof key + '\'.');
    var result = []; // eslint-disable-line
    for(var i = 0; i < params.length; i++){
        // eslint-disable-line
        var value = params[i][key]; // eslint-disable-line
        if (allowEmpty && !value) value = '';
        else if (typeof value !== 'string') throw new Error('invalid abi');
        result.push(value);
    }
    return result;
}
/**
 * Is the string a hex string.
 *
 * @method check if string is hex string of specific length
 * @param {String} value
 * @param {Number} length
 * @returns {Boolean} output the string is a hex string
 */ function $530de4008ff0d881$var$isHexString(value, length) {
    if (typeof value !== 'string' || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;
    if (length && value.length !== 2 + 2 * length) return false;
    return true;
}
module.exports = {
    arrayContainsArray: $530de4008ff0d881$var$arrayContainsArray,
    intToBuffer: $530de4008ff0d881$var$intToBuffer,
    getBinarySize: $530de4008ff0d881$var$getBinarySize,
    isHexPrefixed: $hGVnO,
    stripHexPrefix: $gGdn7,
    padToEven: $530de4008ff0d881$var$padToEven,
    intToHex: $530de4008ff0d881$var$intToHex,
    fromAscii: $530de4008ff0d881$var$fromAscii,
    fromUtf8: $530de4008ff0d881$var$fromUtf8,
    toAscii: $530de4008ff0d881$var$toAscii,
    toUtf8: $530de4008ff0d881$var$toUtf8,
    getKeys: $530de4008ff0d881$var$getKeys,
    isHexString: $530de4008ff0d881$var$isHexString
};

});
parcelRequire.register("hGVnO", function(module, exports) {
/**
 * Returns a `Boolean` on whether or not the a `String` starts with '0x'
 * @param {String} str the string input value
 * @return {Boolean} a boolean if it is or is not hex prefixed
 * @throws if the str input is not a string
 */ module.exports = function isHexPrefixed(str) {
    if (typeof str !== 'string') throw new Error("[is-hex-prefixed] value must be type 'string', is currently type " + typeof str + ", while checking isHexPrefixed.");
    return str.slice(0, 2) === '0x';
};

});

parcelRequire.register("gGdn7", function(module, exports) {

var $hGVnO = parcelRequire("hGVnO");
/**
 * Removes '0x' from a given `String` is present
 * @param {String} str the string value
 * @return {String|Optional} a string by pass if necessary
 */ module.exports = function stripHexPrefix(str) {
    if (typeof str !== 'string') return str;
    return $hGVnO(str) ? str.slice(2) : str;
};

});



parcelRequire.register("drILK", function(module, exports) {

module.exports = (parcelRequire("1GvM7"));

});
parcelRequire.register("1GvM7", function(module, exports) {

var $13a25c8a303a0d30$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $iFqsp = parcelRequire("iFqsp");

var $2NCF6 = parcelRequire("2NCF6");
var $13a25c8a303a0d30$var$ABI = function() {};
// Convert from short to canonical names
// FIXME: optimise or make this nicer?
function $13a25c8a303a0d30$var$elementaryName(name) {
    if (name.startsWith('int[')) return 'int256' + name.slice(3);
    else if (name === 'int') return 'int256';
    else if (name.startsWith('uint[')) return 'uint256' + name.slice(4);
    else if (name === 'uint') return 'uint256';
    else if (name.startsWith('fixed[')) return 'fixed128x128' + name.slice(5);
    else if (name === 'fixed') return 'fixed128x128';
    else if (name.startsWith('ufixed[')) return 'ufixed128x128' + name.slice(6);
    else if (name === 'ufixed') return 'ufixed128x128';
    return name;
}
$13a25c8a303a0d30$var$ABI.eventID = function(name, types) {
    // FIXME: use node.js util.format?
    var sig = name + '(' + types.map($13a25c8a303a0d30$var$elementaryName).join(',') + ')';
    return $iFqsp.keccak256($13a25c8a303a0d30$require$Buffer.from(sig));
};
$13a25c8a303a0d30$var$ABI.methodID = function(name, types) {
    return $13a25c8a303a0d30$var$ABI.eventID(name, types).slice(0, 4);
};
// Parse N from type<N>
function $13a25c8a303a0d30$var$parseTypeN(type) {
    return parseInt(/^\D+(\d+)$/.exec(type)[1], 10);
}
// Parse N,M from type<N>x<M>
function $13a25c8a303a0d30$var$parseTypeNxM(type) {
    var tmp = /^\D+(\d+)x(\d+)$/.exec(type);
    return [
        parseInt(tmp[1], 10),
        parseInt(tmp[2], 10)
    ];
}
// Parse N in type[<N>] where "type" can itself be an array type.
function $13a25c8a303a0d30$var$parseTypeArray(type) {
    var tmp = type.match(/(.*)\[(.*?)\]$/);
    if (tmp) return tmp[2] === '' ? 'dynamic' : parseInt(tmp[2], 10);
    return null;
}
function $13a25c8a303a0d30$var$parseNumber(arg) {
    var type = typeof arg;
    if (type === 'string') {
        if ($iFqsp.isHexPrefixed(arg)) return new $2NCF6($iFqsp.stripHexPrefix(arg), 16);
        else return new $2NCF6(arg, 10);
    } else if (type === 'number') return new $2NCF6(arg);
    else if (arg.toArray) // assume this is a BN for the moment, replace with BN.isBN soon
    return arg;
    else throw new Error('Argument is not a number');
}
// someMethod(bytes,uint)
// someMethod(bytes,uint):(boolean)
function $13a25c8a303a0d30$var$parseSignature(sig) {
    var tmp = /^(\w+)\((.*)\)$/.exec(sig);
    if (tmp.length !== 3) throw new Error('Invalid method signature');
    var args = /^(.+)\):\((.+)$/.exec(tmp[2]);
    if (args !== null && args.length === 3) return {
        method: tmp[1],
        args: args[1].split(','),
        retargs: args[2].split(',')
    };
    else {
        var params = tmp[2].split(',');
        if (params.length === 1 && params[0] === '') // Special-case (possibly naive) fixup for functions that take no arguments.
        // TODO: special cases are always bad, but this makes the function return
        // match what the calling functions expect
        params = [];
        return {
            method: tmp[1],
            args: params
        };
    }
}
// Encodes a single item (can be dynamic array)
// @returns: Buffer
function $13a25c8a303a0d30$var$encodeSingle(type, arg) {
    var size, num, ret, i;
    if (type === 'address') return $13a25c8a303a0d30$var$encodeSingle('uint160', $13a25c8a303a0d30$var$parseNumber(arg));
    else if (type === 'bool') return $13a25c8a303a0d30$var$encodeSingle('uint8', arg ? 1 : 0);
    else if (type === 'string') return $13a25c8a303a0d30$var$encodeSingle('bytes', $13a25c8a303a0d30$require$Buffer.from(arg, 'utf8'));
    else if ($13a25c8a303a0d30$var$isArray(type)) {
        // this part handles fixed-length ([2]) and variable length ([]) arrays
        // NOTE: we catch here all calls to arrays, that simplifies the rest
        if (typeof arg.length === 'undefined') throw new Error('Not an array?');
        size = $13a25c8a303a0d30$var$parseTypeArray(type);
        if (size !== 'dynamic' && size !== 0 && arg.length > size) throw new Error('Elements exceed array size: ' + size);
        ret = [];
        type = type.slice(0, type.lastIndexOf('['));
        if (typeof arg === 'string') arg = JSON.parse(arg);
        for(i in arg)ret.push($13a25c8a303a0d30$var$encodeSingle(type, arg[i]));
        if (size === 'dynamic') {
            var length = $13a25c8a303a0d30$var$encodeSingle('uint256', arg.length);
            ret.unshift(length);
        }
        return $13a25c8a303a0d30$require$Buffer.concat(ret);
    } else if (type === 'bytes') {
        arg = $13a25c8a303a0d30$require$Buffer.from(arg);
        ret = $13a25c8a303a0d30$require$Buffer.concat([
            $13a25c8a303a0d30$var$encodeSingle('uint256', arg.length),
            arg
        ]);
        if (arg.length % 32 !== 0) ret = $13a25c8a303a0d30$require$Buffer.concat([
            ret,
            $iFqsp.zeros(32 - arg.length % 32)
        ]);
        return ret;
    } else if (type.startsWith('bytes')) {
        size = $13a25c8a303a0d30$var$parseTypeN(type);
        if (size < 1 || size > 32) throw new Error('Invalid bytes<N> width: ' + size);
        return $iFqsp.setLengthRight(arg, 32);
    } else if (type.startsWith('uint')) {
        size = $13a25c8a303a0d30$var$parseTypeN(type);
        if (size % 8 || size < 8 || size > 256) throw new Error('Invalid uint<N> width: ' + size);
        num = $13a25c8a303a0d30$var$parseNumber(arg);
        if (num.bitLength() > size) throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
        if (num < 0) throw new Error('Supplied uint is negative');
        return num.toArrayLike($13a25c8a303a0d30$require$Buffer, 'be', 32);
    } else if (type.startsWith('int')) {
        size = $13a25c8a303a0d30$var$parseTypeN(type);
        if (size % 8 || size < 8 || size > 256) throw new Error('Invalid int<N> width: ' + size);
        num = $13a25c8a303a0d30$var$parseNumber(arg);
        if (num.bitLength() > size) throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
        return num.toTwos(256).toArrayLike($13a25c8a303a0d30$require$Buffer, 'be', 32);
    } else if (type.startsWith('ufixed')) {
        size = $13a25c8a303a0d30$var$parseTypeNxM(type);
        num = $13a25c8a303a0d30$var$parseNumber(arg);
        if (num < 0) throw new Error('Supplied ufixed is negative');
        return $13a25c8a303a0d30$var$encodeSingle('uint256', num.mul(new $2NCF6(2).pow(new $2NCF6(size[1]))));
    } else if (type.startsWith('fixed')) {
        size = $13a25c8a303a0d30$var$parseTypeNxM(type);
        return $13a25c8a303a0d30$var$encodeSingle('int256', $13a25c8a303a0d30$var$parseNumber(arg).mul(new $2NCF6(2).pow(new $2NCF6(size[1]))));
    }
    throw new Error('Unsupported or invalid type: ' + type);
}
// Decodes a single item (can be dynamic array)
// @returns: array
// FIXME: this method will need a lot of attention at checking limits and validation
function $13a25c8a303a0d30$var$decodeSingle(parsedType, data, offset) {
    if (typeof parsedType === 'string') parsedType = $13a25c8a303a0d30$var$parseType(parsedType);
    var size, num, ret, i;
    if (parsedType.name === 'address') return $13a25c8a303a0d30$var$decodeSingle(parsedType.rawType, data, offset).toArrayLike($13a25c8a303a0d30$require$Buffer, 'be', 20).toString('hex');
    else if (parsedType.name === 'bool') return $13a25c8a303a0d30$var$decodeSingle(parsedType.rawType, data, offset).toString() === new $2NCF6(1).toString();
    else if (parsedType.name === 'string') {
        var bytes = $13a25c8a303a0d30$var$decodeSingle(parsedType.rawType, data, offset);
        return $13a25c8a303a0d30$require$Buffer.from(bytes, 'utf8').toString();
    } else if (parsedType.isArray) {
        // this part handles fixed-length arrays ([2]) and variable length ([]) arrays
        // NOTE: we catch here all calls to arrays, that simplifies the rest
        ret = [];
        size = parsedType.size;
        if (parsedType.size === 'dynamic') {
            offset = $13a25c8a303a0d30$var$decodeSingle('uint256', data, offset).toNumber();
            size = $13a25c8a303a0d30$var$decodeSingle('uint256', data, offset).toNumber();
            offset = offset + 32;
        }
        for(i = 0; i < size; i++){
            var decoded = $13a25c8a303a0d30$var$decodeSingle(parsedType.subArray, data, offset);
            ret.push(decoded);
            offset += parsedType.subArray.memoryUsage;
        }
        return ret;
    } else if (parsedType.name === 'bytes') {
        offset = $13a25c8a303a0d30$var$decodeSingle('uint256', data, offset).toNumber();
        size = $13a25c8a303a0d30$var$decodeSingle('uint256', data, offset).toNumber();
        return data.slice(offset + 32, offset + 32 + size);
    } else if (parsedType.name.startsWith('bytes')) return data.slice(offset, offset + parsedType.size);
    else if (parsedType.name.startsWith('uint')) {
        num = new $2NCF6(data.slice(offset, offset + 32), 16, 'be');
        if (num.bitLength() > parsedType.size) throw new Error('Decoded int exceeds width: ' + parsedType.size + ' vs ' + num.bitLength());
        return num;
    } else if (parsedType.name.startsWith('int')) {
        num = new $2NCF6(data.slice(offset, offset + 32), 16, 'be').fromTwos(256);
        if (num.bitLength() > parsedType.size) throw new Error('Decoded uint exceeds width: ' + parsedType.size + ' vs ' + num.bitLength());
        return num;
    } else if (parsedType.name.startsWith('ufixed')) {
        size = new $2NCF6(2).pow(new $2NCF6(parsedType.size[1]));
        num = $13a25c8a303a0d30$var$decodeSingle('uint256', data, offset);
        if (!num.mod(size).isZero()) throw new Error('Decimals not supported yet');
        return num.div(size);
    } else if (parsedType.name.startsWith('fixed')) {
        size = new $2NCF6(2).pow(new $2NCF6(parsedType.size[1]));
        num = $13a25c8a303a0d30$var$decodeSingle('int256', data, offset);
        if (!num.mod(size).isZero()) throw new Error('Decimals not supported yet');
        return num.div(size);
    }
    throw new Error('Unsupported or invalid type: ' + parsedType.name);
}
// Parse the given type
// @returns: {} containing the type itself, memory usage and (including size and subArray if applicable)
function $13a25c8a303a0d30$var$parseType(type) {
    var size;
    var ret;
    if ($13a25c8a303a0d30$var$isArray(type)) {
        size = $13a25c8a303a0d30$var$parseTypeArray(type);
        var subArray = type.slice(0, type.lastIndexOf('['));
        subArray = $13a25c8a303a0d30$var$parseType(subArray);
        ret = {
            isArray: true,
            name: type,
            size: size,
            memoryUsage: size === 'dynamic' ? 32 : subArray.memoryUsage * size,
            subArray: subArray
        };
        return ret;
    } else {
        var rawType;
        switch(type){
            case 'address':
                rawType = 'uint160';
                break;
            case 'bool':
                rawType = 'uint8';
                break;
            case 'string':
                rawType = 'bytes';
                break;
        }
        ret = {
            rawType: rawType,
            name: type,
            memoryUsage: 32
        };
        if (type.startsWith('bytes') && type !== 'bytes' || type.startsWith('uint') || type.startsWith('int')) ret.size = $13a25c8a303a0d30$var$parseTypeN(type);
        else if (type.startsWith('ufixed') || type.startsWith('fixed')) ret.size = $13a25c8a303a0d30$var$parseTypeNxM(type);
        if (type.startsWith('bytes') && type !== 'bytes' && (ret.size < 1 || ret.size > 32)) throw new Error('Invalid bytes<N> width: ' + ret.size);
        if ((type.startsWith('uint') || type.startsWith('int')) && (ret.size % 8 || ret.size < 8 || ret.size > 256)) throw new Error('Invalid int/uint<N> width: ' + ret.size);
        return ret;
    }
}
// Is a type dynamic?
function $13a25c8a303a0d30$var$isDynamic(type) {
    // FIXME: handle all types? I don't think anything is missing now
    return type === 'string' || type === 'bytes' || $13a25c8a303a0d30$var$parseTypeArray(type) === 'dynamic';
}
// Is a type an array?
function $13a25c8a303a0d30$var$isArray(type) {
    return type.lastIndexOf(']') === type.length - 1;
}
// Encode a method/event with arguments
// @types an array of string type names
// @args  an array of the appropriate values
$13a25c8a303a0d30$var$ABI.rawEncode = function(types, values) {
    var output = [];
    var data = [];
    var headLength = 0;
    types.forEach(function(type) {
        if ($13a25c8a303a0d30$var$isArray(type)) {
            var size = $13a25c8a303a0d30$var$parseTypeArray(type);
            if (size !== 'dynamic') headLength += 32 * size;
            else headLength += 32;
        } else headLength += 32;
    });
    for(var i = 0; i < types.length; i++){
        var type1 = $13a25c8a303a0d30$var$elementaryName(types[i]);
        var value = values[i];
        var cur = $13a25c8a303a0d30$var$encodeSingle(type1, value);
        // Use the head/tail method for storing dynamic data
        if ($13a25c8a303a0d30$var$isDynamic(type1)) {
            output.push($13a25c8a303a0d30$var$encodeSingle('uint256', headLength));
            data.push(cur);
            headLength += cur.length;
        } else output.push(cur);
    }
    return $13a25c8a303a0d30$require$Buffer.concat(output.concat(data));
};
$13a25c8a303a0d30$var$ABI.rawDecode = function(types, data) {
    var ret = [];
    data = $13a25c8a303a0d30$require$Buffer.from(data);
    var offset = 0;
    for(var i = 0; i < types.length; i++){
        var type = $13a25c8a303a0d30$var$elementaryName(types[i]);
        var parsed = $13a25c8a303a0d30$var$parseType(type, data, offset);
        var decoded = $13a25c8a303a0d30$var$decodeSingle(parsed, data, offset);
        offset += parsed.memoryUsage;
        ret.push(decoded);
    }
    return ret;
};
$13a25c8a303a0d30$var$ABI.simpleEncode = function(method) {
    var args = Array.prototype.slice.call(arguments).slice(1);
    var sig = $13a25c8a303a0d30$var$parseSignature(method);
    // FIXME: validate/convert arguments
    if (args.length !== sig.args.length) throw new Error('Argument count mismatch');
    return $13a25c8a303a0d30$require$Buffer.concat([
        $13a25c8a303a0d30$var$ABI.methodID(sig.method, sig.args),
        $13a25c8a303a0d30$var$ABI.rawEncode(sig.args, args)
    ]);
};
$13a25c8a303a0d30$var$ABI.simpleDecode = function(method, data) {
    var sig = $13a25c8a303a0d30$var$parseSignature(method);
    // FIXME: validate/convert arguments
    if (!sig.retargs) throw new Error('No return values in method');
    return $13a25c8a303a0d30$var$ABI.rawDecode(sig.retargs, data);
};
function $13a25c8a303a0d30$var$stringify(type, value) {
    if (type.startsWith('address') || type.startsWith('bytes')) return '0x' + value.toString('hex');
    else return value.toString();
}
$13a25c8a303a0d30$var$ABI.stringify = function(types, values) {
    var ret = [];
    for(var i in types){
        var type = types[i];
        var value = values[i];
        // if it is an array type, concat the items
        if (/^[^\[]+\[.*\]$/.test(type)) value = value.map(function(item) {
            return $13a25c8a303a0d30$var$stringify(type, item);
        }).join(', ');
        else value = $13a25c8a303a0d30$var$stringify(type, value);
        ret.push(value);
    }
    return ret;
};
$13a25c8a303a0d30$var$ABI.solidityHexValue = function(type, value, bitsize) {
    // pass in bitsize = null if use default bitsize
    var size, num;
    if ($13a25c8a303a0d30$var$isArray(type)) {
        var subType = type.replace(/\[.*?\]/, '');
        if (!$13a25c8a303a0d30$var$isArray(subType)) {
            var arraySize = $13a25c8a303a0d30$var$parseTypeArray(type);
            if (arraySize !== 'dynamic' && arraySize !== 0 && value.length > arraySize) throw new Error('Elements exceed array size: ' + arraySize);
        }
        var arrayValues = value.map(function(v) {
            return $13a25c8a303a0d30$var$ABI.solidityHexValue(subType, v, 256);
        });
        return $13a25c8a303a0d30$require$Buffer.concat(arrayValues);
    } else if (type === 'bytes') return value;
    else if (type === 'string') return $13a25c8a303a0d30$require$Buffer.from(value, 'utf8');
    else if (type === 'bool') {
        bitsize = bitsize || 8;
        var padding = Array(bitsize / 4).join('0');
        return $13a25c8a303a0d30$require$Buffer.from(value ? padding + '1' : padding + '0', 'hex');
    } else if (type === 'address') {
        var bytesize = 20;
        if (bitsize) bytesize = bitsize / 8;
        return $iFqsp.setLengthLeft(value, bytesize);
    } else if (type.startsWith('bytes')) {
        size = $13a25c8a303a0d30$var$parseTypeN(type);
        if (size < 1 || size > 32) throw new Error('Invalid bytes<N> width: ' + size);
        return $iFqsp.setLengthRight(value, size);
    } else if (type.startsWith('uint')) {
        size = $13a25c8a303a0d30$var$parseTypeN(type);
        if (size % 8 || size < 8 || size > 256) throw new Error('Invalid uint<N> width: ' + size);
        num = $13a25c8a303a0d30$var$parseNumber(value);
        if (num.bitLength() > size) throw new Error('Supplied uint exceeds width: ' + size + ' vs ' + num.bitLength());
        bitsize = bitsize || size;
        return num.toArrayLike($13a25c8a303a0d30$require$Buffer, 'be', bitsize / 8);
    } else if (type.startsWith('int')) {
        size = $13a25c8a303a0d30$var$parseTypeN(type);
        if (size % 8 || size < 8 || size > 256) throw new Error('Invalid int<N> width: ' + size);
        num = $13a25c8a303a0d30$var$parseNumber(value);
        if (num.bitLength() > size) throw new Error('Supplied int exceeds width: ' + size + ' vs ' + num.bitLength());
        bitsize = bitsize || size;
        return num.toTwos(size).toArrayLike($13a25c8a303a0d30$require$Buffer, 'be', bitsize / 8);
    } else // FIXME: support all other types
    throw new Error('Unsupported or invalid type: ' + type);
};
$13a25c8a303a0d30$var$ABI.solidityPack = function(types, values) {
    if (types.length !== values.length) throw new Error('Number of types are not matching the values');
    var ret = [];
    for(var i = 0; i < types.length; i++){
        var type = $13a25c8a303a0d30$var$elementaryName(types[i]);
        var value = values[i];
        ret.push($13a25c8a303a0d30$var$ABI.solidityHexValue(type, value, null));
    }
    return $13a25c8a303a0d30$require$Buffer.concat(ret);
};
$13a25c8a303a0d30$var$ABI.soliditySHA3 = function(types, values) {
    return $iFqsp.keccak256($13a25c8a303a0d30$var$ABI.solidityPack(types, values));
};
$13a25c8a303a0d30$var$ABI.soliditySHA256 = function(types, values) {
    return $iFqsp.sha256($13a25c8a303a0d30$var$ABI.solidityPack(types, values));
};
$13a25c8a303a0d30$var$ABI.solidityRIPEMD160 = function(types, values) {
    return $iFqsp.ripemd160($13a25c8a303a0d30$var$ABI.solidityPack(types, values), true);
};
// Serpent's users are familiar with this encoding
// - s: string
// - b: bytes
// - b<N>: bytes<N>
// - i: int256
// - a: int256[]
function $13a25c8a303a0d30$var$isNumeric(c) {
    // FIXME: is this correct? Seems to work
    return c >= '0' && c <= '9';
}
// For a "documentation" refer to https://github.com/ethereum/serpent/blob/develop/preprocess.cpp
$13a25c8a303a0d30$var$ABI.fromSerpent = function(sig) {
    var ret = [];
    for(var i = 0; i < sig.length; i++){
        var type = sig[i];
        if (type === 's') ret.push('bytes');
        else if (type === 'b') {
            var tmp = 'bytes';
            var j = i + 1;
            while(j < sig.length && $13a25c8a303a0d30$var$isNumeric(sig[j])){
                tmp += sig[j] - '0';
                j++;
            }
            i = j - 1;
            ret.push(tmp);
        } else if (type === 'i') ret.push('int256');
        else if (type === 'a') ret.push('int256[]');
        else throw new Error('Unsupported or invalid type: ' + type);
    }
    return ret;
};
$13a25c8a303a0d30$var$ABI.toSerpent = function(types) {
    var ret = [];
    for(var i = 0; i < types.length; i++){
        var type = types[i];
        if (type === 'bytes') ret.push('s');
        else if (type.startsWith('bytes')) ret.push('b' + $13a25c8a303a0d30$var$parseTypeN(type));
        else if (type === 'int256') ret.push('i');
        else if (type === 'int256[]') ret.push('a');
        else throw new Error('Unsupported or invalid type: ' + type);
    }
    return ret.join('');
};
module.exports = $13a25c8a303a0d30$var$ABI;

});
parcelRequire.register("iFqsp", function(module, exports) {
"use strict";
var $d97094334f0f64fd$var$__createBinding = module.exports && module.exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $d97094334f0f64fd$var$__exportStar = module.exports && module.exports.__exportStar || function(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) $d97094334f0f64fd$var$__createBinding(exports, m, p);
};
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.secp256k1 = module.exports.rlp = module.exports.BN = void 0;

var $dfIIc = parcelRequire("dfIIc");
module.exports.secp256k1 = $dfIIc;

var $785Wy = parcelRequire("785Wy");

var $2NCF6 = parcelRequire("2NCF6");
module.exports.BN = $2NCF6;

var $f9tZZ = parcelRequire("f9tZZ");
module.exports.rlp = $f9tZZ;
Object.assign(module.exports, $785Wy);

/**
 * Constants
 */ $d97094334f0f64fd$var$__exportStar((parcelRequire("gXqTC")), module.exports);

/**
 * Public-key cryptography (secp256k1) and addresses
 */ $d97094334f0f64fd$var$__exportStar((parcelRequire("gW1Qi")), module.exports);

/**
 * Hash functions
 */ $d97094334f0f64fd$var$__exportStar((parcelRequire("i08Vd")), module.exports);

/**
 * ECDSA signature
 */ $d97094334f0f64fd$var$__exportStar((parcelRequire("ekuPa")), module.exports);

/**
 * Utilities for manipulating Buffers, byte arrays, etc.
 */ $d97094334f0f64fd$var$__exportStar((parcelRequire("9uSVP")), module.exports);

/**
 * Function for definining properties on an object
 */ $d97094334f0f64fd$var$__exportStar((parcelRequire("jlqlo")), module.exports);

});
parcelRequire.register("dfIIc", function(module, exports) {
"use strict";

var $9a5f5bf336ce7966$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.ecdhUnsafe = module.exports.ecdh = module.exports.recover = module.exports.verify = module.exports.sign = module.exports.signatureImportLax = module.exports.signatureImport = module.exports.signatureExport = module.exports.signatureNormalize = module.exports.publicKeyCombine = module.exports.publicKeyTweakMul = module.exports.publicKeyTweakAdd = module.exports.publicKeyVerify = module.exports.publicKeyConvert = module.exports.publicKeyCreate = module.exports.privateKeyTweakMul = module.exports.privateKeyTweakAdd = module.exports.privateKeyModInverse = module.exports.privateKeyNegate = module.exports.privateKeyImport = module.exports.privateKeyExport = module.exports.privateKeyVerify = void 0;

var $l1CJ2 = parcelRequire("l1CJ2");

var $bMDYW = parcelRequire("bMDYW");

var $lTVSL = parcelRequire("lTVSL");
/**
 * Verify an ECDSA privateKey
 * @method privateKeyVerify
 * @param {Buffer} privateKey
 * @return {boolean}
 */ module.exports.privateKeyVerify = function(privateKey) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) return false;
    return $l1CJ2.privateKeyVerify(Uint8Array.from(privateKey));
};
/**
 * Export a privateKey in DER format
 * @method privateKeyExport
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {boolean}
 */ module.exports.privateKeyExport = function(privateKey, compressed) {
    // secp256k1 v4 version throws when privateKey length is not 32
    if (privateKey.length !== 32) throw new RangeError('private key length is invalid');
    var publicKey = $bMDYW.privateKeyExport(privateKey, compressed);
    return $lTVSL.privateKeyExport(privateKey, publicKey, compressed);
};
/**
 * Import a privateKey in DER format
 * @method privateKeyImport
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ module.exports.privateKeyImport = function(privateKey) {
    // privateKeyImport method is not part of secp256k1 v4 package
    // this implementation is based on v3
    privateKey = $lTVSL.privateKeyImport(privateKey);
    if (privateKey !== null && privateKey.length === 32 && module.exports.privateKeyVerify(privateKey)) return privateKey;
    throw new Error("couldn't import from DER format");
};
/**
 * Negate a privateKey by subtracting it from the order of the curve's base point
 * @method privateKeyNegate
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ module.exports.privateKeyNegate = function(privateKey) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.privateKeyNegate(Uint8Array.from(privateKey)));
};
/**
 * Compute the inverse of a privateKey (modulo the order of the curve's base point).
 * @method privateKeyModInverse
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ module.exports.privateKeyModInverse = function(privateKey) {
    if (privateKey.length !== 32) throw new Error('private key length is invalid');
    return $9a5f5bf336ce7966$require$Buffer.from($bMDYW.privateKeyModInverse(Uint8Array.from(privateKey)));
};
/**
 * Tweak a privateKey by adding tweak to it.
 * @method privateKeyTweakAdd
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */ module.exports.privateKeyTweakAdd = function(privateKey, tweak) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.privateKeyTweakAdd(Uint8Array.from(privateKey), tweak));
};
/**
 * Tweak a privateKey by multiplying it by a tweak.
 * @method privateKeyTweakMul
 * @param {Buffer} privateKey
 * @param {Buffer} tweak
 * @return {Buffer}
 */ module.exports.privateKeyTweakMul = function(privateKey, tweak) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.privateKeyTweakMul(Uint8Array.from(privateKey), Uint8Array.from(tweak)));
};
/**
 * Compute the public key for a privateKey.
 * @method publicKeyCreate
 * @param {Buffer} privateKey
 * @param {boolean} compressed
 * @return {Buffer}
 */ module.exports.publicKeyCreate = function(privateKey, compressed) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.publicKeyCreate(Uint8Array.from(privateKey), compressed));
};
/**
 * Convert a publicKey to compressed or uncompressed form.
 * @method publicKeyConvert
 * @param {Buffer} publicKey
 * @param {boolean} compressed
 * @return {Buffer}
 */ module.exports.publicKeyConvert = function(publicKey, compressed) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.publicKeyConvert(Uint8Array.from(publicKey), compressed));
};
/**
 * Verify an ECDSA publicKey.
 * @method publicKeyVerify
 * @param {Buffer} publicKey
 * @return {boolean}
 */ module.exports.publicKeyVerify = function(publicKey) {
    // secp256k1 v4 version throws when publicKey length is not 33 or 65
    if (publicKey.length !== 33 && publicKey.length !== 65) return false;
    return $l1CJ2.publicKeyVerify(Uint8Array.from(publicKey));
};
/**
 * Tweak a publicKey by adding tweak times the generator to it.
 * @method publicKeyTweakAdd
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */ module.exports.publicKeyTweakAdd = function(publicKey, tweak, compressed) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.publicKeyTweakAdd(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Tweak a publicKey by multiplying it by a tweak value
 * @method publicKeyTweakMul
 * @param {Buffer} publicKey
 * @param {Buffer} tweak
 * @param {boolean} compressed
 * @return {Buffer}
 */ module.exports.publicKeyTweakMul = function(publicKey, tweak, compressed) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.publicKeyTweakMul(Uint8Array.from(publicKey), Uint8Array.from(tweak), compressed));
};
/**
 * Add a given publicKeys together.
 * @method publicKeyCombine
 * @param {Array<Buffer>} publicKeys
 * @param {boolean} compressed
 * @return {Buffer}
 */ module.exports.publicKeyCombine = function(publicKeys, compressed) {
    var keys = [];
    publicKeys.forEach(function(publicKey) {
        keys.push(Uint8Array.from(publicKey));
    });
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.publicKeyCombine(keys, compressed));
};
/**
 * Convert a signature to a normalized lower-S form.
 * @method signatureNormalize
 * @param {Buffer} signature
 * @return {Buffer}
 */ module.exports.signatureNormalize = function(signature) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.signatureNormalize(Uint8Array.from(signature)));
};
/**
 * Serialize an ECDSA signature in DER format.
 * @method signatureExport
 * @param {Buffer} signature
 * @return {Buffer}
 */ module.exports.signatureExport = function(signature) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.signatureExport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImport
 * @param {Buffer} signature
 * @return {Buffer}
 */ module.exports.signatureImport = function(signature) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.signatureImport(Uint8Array.from(signature)));
};
/**
 * Parse a DER ECDSA signature (not follow by [BIP66](https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki)).
 * @method signatureImportLax
 * @param {Buffer} signature
 * @return {Buffer}
 */ module.exports.signatureImportLax = function(signature) {
    // signatureImportLax method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure that signature is greater than 0
    if (signature.length === 0) throw new RangeError('signature length is invalid');
    var sigObj = $lTVSL.signatureImportLax(signature);
    if (sigObj === null) throw new Error("couldn't parse DER signature");
    return $bMDYW.signatureImport(sigObj);
};
/**
 * Create an ECDSA signature. Always return low-S signature.
 * @method sign
 * @param {Buffer} message
 * @param {Buffer} privateKey
 * @param {Object} options
 * @return {Buffer}
 */ module.exports.sign = function(message1, privateKey1, options) {
    if (options === null) throw new TypeError('options should be an Object');
    var signOptions = undefined;
    if (options) {
        signOptions = {};
        if (options.data === null) // validate option.data length
        throw new TypeError('options.data should be a Buffer');
        if (options.data) {
            if (options.data.length != 32) throw new RangeError('options.data length is invalid');
            signOptions.data = new Uint8Array(options.data);
        }
        if (options.noncefn === null) throw new TypeError('options.noncefn should be a Function');
        if (options.noncefn) // convert option.noncefn function signature
        signOptions.noncefn = function(message, privateKey, algo, data, attempt) {
            var bufferAlgo = algo != null ? $9a5f5bf336ce7966$require$Buffer.from(algo) : null;
            var bufferData = data != null ? $9a5f5bf336ce7966$require$Buffer.from(data) : null;
            var buffer = $9a5f5bf336ce7966$require$Buffer.from('');
            if (options.noncefn) buffer = options.noncefn($9a5f5bf336ce7966$require$Buffer.from(message), $9a5f5bf336ce7966$require$Buffer.from(privateKey), bufferAlgo, bufferData, attempt);
            return new Uint8Array(buffer);
        };
    }
    var sig = $l1CJ2.ecdsaSign(Uint8Array.from(message1), Uint8Array.from(privateKey1), signOptions);
    return {
        signature: $9a5f5bf336ce7966$require$Buffer.from(sig.signature),
        recovery: sig.recid
    };
};
/**
 * Verify an ECDSA signature.
 * @method verify
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Buffer} publicKey
 * @return {boolean}
 */ module.exports.verify = function(message, signature, publicKey) {
    return $l1CJ2.ecdsaVerify(Uint8Array.from(signature), Uint8Array.from(message), publicKey);
};
/**
 * Recover an ECDSA public key from a signature.
 * @method recover
 * @param {Buffer} message
 * @param {Buffer} signature
 * @param {Number} recid
 * @param {boolean} compressed
 * @return {Buffer}
 */ module.exports.recover = function(message, signature, recid, compressed) {
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.ecdsaRecover(Uint8Array.from(signature), recid, Uint8Array.from(message), compressed));
};
/**
 * Compute an EC Diffie-Hellman secret and applied sha256 to compressed public key.
 * @method ecdh
 * @param {Buffer} publicKey
 * @param {Buffer} privateKey
 * @return {Buffer}
 */ module.exports.ecdh = function(publicKey, privateKey) {
    // note: secp256k1 v3 doesn't allow optional parameter
    return $9a5f5bf336ce7966$require$Buffer.from($l1CJ2.ecdh(Uint8Array.from(publicKey), Uint8Array.from(privateKey), {}));
};
module.exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
    // ecdhUnsafe method is not part of secp256k1 v4 package
    // this implementation is based on v3
    // ensure valid publicKey length
    if (publicKey.length !== 33 && publicKey.length !== 65) throw new RangeError('public key length is invalid');
    // ensure valid privateKey length
    if (privateKey.length !== 32) throw new RangeError('private key length is invalid');
    return $9a5f5bf336ce7966$require$Buffer.from($bMDYW.ecdhUnsafe(Uint8Array.from(publicKey), Uint8Array.from(privateKey), compressed));
};

});
parcelRequire.register("bMDYW", function(module, exports) {
"use strict";

var $894330f721316c27$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
Object.defineProperty(module.exports, "__esModule", {
    value: true
});

var $2NCF6 = parcelRequire("2NCF6");

var $hJ0wi = parcelRequire("hJ0wi");
var $894330f721316c27$require$EC = $hJ0wi.ec;
var $894330f721316c27$var$ec = new $894330f721316c27$require$EC('secp256k1');
var $894330f721316c27$var$ecparams = $894330f721316c27$var$ec.curve;
module.exports.privateKeyExport = function(privateKey, compressed) {
    if (compressed === void 0) compressed = true;
    var d = new $2NCF6(privateKey);
    if (d.ucmp($894330f721316c27$var$ecparams.n) >= 0) throw new Error("couldn't export to DER format");
    var point = $894330f721316c27$var$ec.g.mul(d);
    return $894330f721316c27$var$toPublicKey(point.getX(), point.getY(), compressed);
};
module.exports.privateKeyModInverse = function(privateKey) {
    var bn = new $2NCF6(privateKey);
    if (bn.ucmp($894330f721316c27$var$ecparams.n) >= 0 || bn.isZero()) throw new Error('private key range is invalid');
    return bn.invm($894330f721316c27$var$ecparams.n).toArrayLike($894330f721316c27$require$Buffer, 'be', 32);
};
module.exports.signatureImport = function(sigObj) {
    var r = new $2NCF6(sigObj.r);
    if (r.ucmp($894330f721316c27$var$ecparams.n) >= 0) r = new $2NCF6(0);
    var s = new $2NCF6(sigObj.s);
    if (s.ucmp($894330f721316c27$var$ecparams.n) >= 0) s = new $2NCF6(0);
    return $894330f721316c27$require$Buffer.concat([
        r.toArrayLike($894330f721316c27$require$Buffer, 'be', 32),
        s.toArrayLike($894330f721316c27$require$Buffer, 'be', 32)
    ]);
};
module.exports.ecdhUnsafe = function(publicKey, privateKey, compressed) {
    if (compressed === void 0) compressed = true;
    var point = $894330f721316c27$var$ec.keyFromPublic(publicKey);
    var scalar = new $2NCF6(privateKey);
    if (scalar.ucmp($894330f721316c27$var$ecparams.n) >= 0 || scalar.isZero()) throw new Error('scalar was invalid (zero or overflow)');
    var shared = point.pub.mul(scalar);
    return $894330f721316c27$var$toPublicKey(shared.getX(), shared.getY(), compressed);
};
var $894330f721316c27$var$toPublicKey = function(x, y, compressed) {
    var publicKey;
    if (compressed) {
        publicKey = $894330f721316c27$require$Buffer.alloc(33);
        publicKey[0] = y.isOdd() ? 3 : 2;
        x.toArrayLike($894330f721316c27$require$Buffer, 'be', 32).copy(publicKey, 1);
    } else {
        publicKey = $894330f721316c27$require$Buffer.alloc(65);
        publicKey[0] = 4;
        x.toArrayLike($894330f721316c27$require$Buffer, 'be', 32).copy(publicKey, 1);
        y.toArrayLike($894330f721316c27$require$Buffer, 'be', 32).copy(publicKey, 33);
    }
    return publicKey;
};

});
parcelRequire.register("2NCF6", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("lb6jJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("lTVSL", function(module, exports) {
"use strict";

var $ff1ba24152037253$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
// This file is imported from secp256k1 v3
// https://github.com/cryptocoinjs/secp256k1-node/blob/master/LICENSE
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
var $ff1ba24152037253$var$EC_PRIVKEY_EXPORT_DER_COMPRESSED = $ff1ba24152037253$require$Buffer.from([
    // begin
    48,
    129,
    211,
    2,
    1,
    1,
    4,
    32,
    // private key
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    // middle
    160,
    129,
    133,
    48,
    129,
    130,
    2,
    1,
    1,
    48,
    44,
    6,
    7,
    42,
    134,
    72,
    206,
    61,
    1,
    1,
    2,
    33,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    254,
    255,
    255,
    252,
    47,
    48,
    6,
    4,
    1,
    0,
    4,
    1,
    7,
    4,
    33,
    2,
    121,
    190,
    102,
    126,
    249,
    220,
    187,
    172,
    85,
    160,
    98,
    149,
    206,
    135,
    11,
    7,
    2,
    155,
    252,
    219,
    45,
    206,
    40,
    217,
    89,
    242,
    129,
    91,
    22,
    248,
    23,
    152,
    2,
    33,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    254,
    186,
    174,
    220,
    230,
    175,
    72,
    160,
    59,
    191,
    210,
    94,
    140,
    208,
    54,
    65,
    65,
    2,
    1,
    1,
    161,
    36,
    3,
    34,
    0,
    // public key
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, 
]);
var $ff1ba24152037253$var$EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED = $ff1ba24152037253$require$Buffer.from([
    // begin
    48,
    130,
    1,
    19,
    2,
    1,
    1,
    4,
    32,
    // private key
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    // middle
    160,
    129,
    165,
    48,
    129,
    162,
    2,
    1,
    1,
    48,
    44,
    6,
    7,
    42,
    134,
    72,
    206,
    61,
    1,
    1,
    2,
    33,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    254,
    255,
    255,
    252,
    47,
    48,
    6,
    4,
    1,
    0,
    4,
    1,
    7,
    4,
    65,
    4,
    121,
    190,
    102,
    126,
    249,
    220,
    187,
    172,
    85,
    160,
    98,
    149,
    206,
    135,
    11,
    7,
    2,
    155,
    252,
    219,
    45,
    206,
    40,
    217,
    89,
    242,
    129,
    91,
    22,
    248,
    23,
    152,
    72,
    58,
    218,
    119,
    38,
    163,
    196,
    101,
    93,
    164,
    251,
    252,
    14,
    17,
    8,
    168,
    253,
    23,
    180,
    72,
    166,
    133,
    84,
    25,
    156,
    71,
    208,
    143,
    251,
    16,
    212,
    184,
    2,
    33,
    0,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    254,
    186,
    174,
    220,
    230,
    175,
    72,
    160,
    59,
    191,
    210,
    94,
    140,
    208,
    54,
    65,
    65,
    2,
    1,
    1,
    161,
    68,
    3,
    66,
    0,
    // public key
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0, 
]);
module.exports.privateKeyExport = function(privateKey, publicKey, compressed) {
    if (compressed === void 0) compressed = true;
    var result = $ff1ba24152037253$require$Buffer.from(compressed ? $ff1ba24152037253$var$EC_PRIVKEY_EXPORT_DER_COMPRESSED : $ff1ba24152037253$var$EC_PRIVKEY_EXPORT_DER_UNCOMPRESSED);
    privateKey.copy(result, compressed ? 8 : 9);
    publicKey.copy(result, compressed ? 181 : 214);
    return result;
};
module.exports.privateKeyImport = function(privateKey) {
    var length = privateKey.length;
    // sequence header
    var index = 0;
    if (length < index + 1 || privateKey[index] !== 48) return null;
    index += 1;
    // sequence length constructor
    if (length < index + 1 || !(privateKey[index] & 128)) return null;
    var lenb = privateKey[index] & 127;
    index += 1;
    if (lenb < 1 || lenb > 2) return null;
    if (length < index + lenb) return null;
    // sequence length
    var len = privateKey[index + lenb - 1] | (lenb > 1 ? privateKey[index + lenb - 2] << 8 : 0);
    index += lenb;
    if (length < index + len) return null;
    // sequence element 0: version number (=1)
    if (length < index + 3 || privateKey[index] !== 2 || privateKey[index + 1] !== 1 || privateKey[index + 2] !== 1) return null;
    index += 3;
    // sequence element 1: octet string, up to 32 bytes
    if (length < index + 2 || privateKey[index] !== 4 || privateKey[index + 1] > 32 || length < index + 2 + privateKey[index + 1]) return null;
    return privateKey.slice(index + 2, index + 2 + privateKey[index + 1]);
};
module.exports.signatureImportLax = function(signature) {
    var r = $ff1ba24152037253$require$Buffer.alloc(32, 0);
    var s = $ff1ba24152037253$require$Buffer.alloc(32, 0);
    var length = signature.length;
    var index = 0;
    // sequence tag byte
    if (signature[index++] !== 48) return null;
    // sequence length byte
    var lenbyte = signature[index++];
    if (lenbyte & 128) {
        index += lenbyte - 128;
        if (index > length) return null;
    }
    // sequence tag byte for r
    if (signature[index++] !== 2) return null;
    // length for r
    var rlen = signature[index++];
    if (rlen & 128) {
        lenbyte = rlen - 128;
        if (index + lenbyte > length) return null;
        for(; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1);
        for(rlen = 0; lenbyte > 0; index += 1, lenbyte -= 1)rlen = (rlen << 8) + signature[index];
    }
    if (rlen > length - index) return null;
    var rindex = index;
    index += rlen;
    // sequence tag byte for s
    if (signature[index++] !== 2) return null;
    // length for s
    var slen = signature[index++];
    if (slen & 128) {
        lenbyte = slen - 128;
        if (index + lenbyte > length) return null;
        for(; lenbyte > 0 && signature[index] === 0; index += 1, lenbyte -= 1);
        for(slen = 0; lenbyte > 0; index += 1, lenbyte -= 1)slen = (slen << 8) + signature[index];
    }
    if (slen > length - index) return null;
    var sindex = index;
    index += slen;
    // ignore leading zeros in r
    for(; rlen > 0 && signature[rindex] === 0; rlen -= 1, rindex += 1);
    // copy r value
    if (rlen > 32) return null;
    var rvalue = signature.slice(rindex, rindex + rlen);
    rvalue.copy(r, 32 - rvalue.length);
    // ignore leading zeros in s
    for(; slen > 0 && signature[sindex] === 0; slen -= 1, sindex += 1);
    // copy s value
    if (slen > 32) return null;
    var svalue = signature.slice(sindex, sindex + slen);
    svalue.copy(s, 32 - svalue.length);
    return {
        r: r,
        s: s
    };
};

});


parcelRequire.register("gXqTC", function(module, exports) {
"use strict";

var $c587050bc551c958$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.KECCAK256_RLP = module.exports.KECCAK256_RLP_S = module.exports.KECCAK256_RLP_ARRAY = module.exports.KECCAK256_RLP_ARRAY_S = module.exports.KECCAK256_NULL = module.exports.KECCAK256_NULL_S = module.exports.TWO_POW256 = module.exports.MAX_INTEGER = void 0;

var $2NCF6 = parcelRequire("2NCF6");
/**
 * The max integer that this VM can handle
 */ module.exports.MAX_INTEGER = new $2NCF6('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16);
/**
 * 2^256
 */ module.exports.TWO_POW256 = new $2NCF6('10000000000000000000000000000000000000000000000000000000000000000', 16);
/**
 * Keccak-256 hash of null
 */ module.exports.KECCAK256_NULL_S = 'c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470';
/**
 * Keccak-256 hash of null
 */ module.exports.KECCAK256_NULL = $c587050bc551c958$require$Buffer.from(module.exports.KECCAK256_NULL_S, 'hex');
/**
 * Keccak-256 of an RLP of an empty array
 */ module.exports.KECCAK256_RLP_ARRAY_S = '1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347';
/**
 * Keccak-256 of an RLP of an empty array
 */ module.exports.KECCAK256_RLP_ARRAY = $c587050bc551c958$require$Buffer.from(module.exports.KECCAK256_RLP_ARRAY_S, 'hex');
/**
 * Keccak-256 hash of the RLP of null
 */ module.exports.KECCAK256_RLP_S = '56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421';
/**
 * Keccak-256 hash of the RLP of null
 */ module.exports.KECCAK256_RLP = $c587050bc551c958$require$Buffer.from(module.exports.KECCAK256_RLP_S, 'hex');

});

parcelRequire.register("gW1Qi", function(module, exports) {
"use strict";

var $c5437dfd624ca05c$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.importPublic = module.exports.privateToPublic = module.exports.privateToAddress = module.exports.publicToAddress = module.exports.pubToAddress = module.exports.isValidPublic = module.exports.isValidPrivate = module.exports.isPrecompiled = module.exports.generateAddress2 = module.exports.generateAddress = module.exports.isValidChecksumAddress = module.exports.toChecksumAddress = module.exports.isZeroAddress = module.exports.isValidAddress = module.exports.zeroAddress = void 0;

var $cAqPD = parcelRequire("cAqPD");

var $785Wy = parcelRequire("785Wy");

var $dfIIc = parcelRequire("dfIIc");

var $2NCF6 = parcelRequire("2NCF6");

var $9uSVP = parcelRequire("9uSVP");

var $i08Vd = parcelRequire("i08Vd");
/**
 * Returns a zero address.
 */ module.exports.zeroAddress = function() {
    var addressLength = 20;
    var addr = $9uSVP.zeros(addressLength);
    return $9uSVP.bufferToHex(addr);
};
/**
 * Checks if the address is a valid. Accepts checksummed addresses too.
 */ module.exports.isValidAddress = function(address) {
    return /^0x[0-9a-fA-F]{40}$/.test(address);
};
/**
 * Checks if a given address is a zero address.
 */ module.exports.isZeroAddress = function(address) {
    var zeroAddr = module.exports.zeroAddress();
    return zeroAddr === $9uSVP.addHexPrefix(address);
};
/**
 * Returns a checksummed address.
 *
 * If a eip1191ChainId is provided, the chainId will be included in the checksum calculation. This
 * has the effect of checksummed addresses for one chain having invalid checksums for others.
 * For more details, consult EIP-1191.
 *
 * WARNING: Checksums with and without the chainId will differ. As of 2019-06-26, the most commonly
 * used variation in Ethereum was without the chainId. This may change in the future.
 */ module.exports.toChecksumAddress = function(address, eip1191ChainId) {
    address = $785Wy.stripHexPrefix(address).toLowerCase();
    var prefix = eip1191ChainId !== undefined ? eip1191ChainId.toString() + '0x' : '';
    var hash = $i08Vd.keccak(prefix + address).toString('hex');
    var ret = '0x';
    for(var i = 0; i < address.length; i++)if (parseInt(hash[i], 16) >= 8) ret += address[i].toUpperCase();
    else ret += address[i];
    return ret;
};
/**
 * Checks if the address is a valid checksummed address.
 *
 * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.
 */ module.exports.isValidChecksumAddress = function(address, eip1191ChainId) {
    return module.exports.isValidAddress(address) && module.exports.toChecksumAddress(address, eip1191ChainId) === address;
};
/**
 * Generates an address of a newly created contract.
 * @param from The address which is creating this new address
 * @param nonce The nonce of the from account
 */ module.exports.generateAddress = function(from, nonce) {
    from = $9uSVP.toBuffer(from);
    var nonceBN = new $2NCF6(nonce);
    if (nonceBN.isZero()) // in RLP we want to encode null in the case of zero nonce
    // read the RLP documentation for an answer if you dare
    return $i08Vd.rlphash([
        from,
        null
    ]).slice(-20);
    // Only take the lower 160bits of the hash
    return $i08Vd.rlphash([
        from,
        $c5437dfd624ca05c$require$Buffer.from(nonceBN.toArray())
    ]).slice(-20);
};
/**
 * Generates an address for a contract created using CREATE2.
 * @param from The address which is creating this new address
 * @param salt A salt
 * @param initCode The init code of the contract being created
 */ module.exports.generateAddress2 = function(from, salt, initCode) {
    var fromBuf = $9uSVP.toBuffer(from);
    var saltBuf = $9uSVP.toBuffer(salt);
    var initCodeBuf = $9uSVP.toBuffer(initCode);
    $cAqPD(fromBuf.length === 20);
    $cAqPD(saltBuf.length === 32);
    var address = $i08Vd.keccak256($c5437dfd624ca05c$require$Buffer.concat([
        $c5437dfd624ca05c$require$Buffer.from('ff', 'hex'),
        fromBuf,
        saltBuf,
        $i08Vd.keccak256(initCodeBuf)
    ]));
    return address.slice(-20);
};
/**
 * Returns true if the supplied address belongs to a precompiled account (Byzantium).
 */ module.exports.isPrecompiled = function(address) {
    var a = $9uSVP.unpad(address);
    return a.length === 1 && a[0] >= 1 && a[0] <= 8;
};
/**
 * Checks if the private key satisfies the rules of the curve secp256k1.
 */ module.exports.isValidPrivate = function(privateKey) {
    return $dfIIc.privateKeyVerify(privateKey);
};
/**
 * Checks if the public key satisfies the rules of the curve secp256k1
 * and the requirements of Ethereum.
 * @param publicKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */ module.exports.isValidPublic = function(publicKey, sanitize) {
    if (sanitize === void 0) sanitize = false;
    if (publicKey.length === 64) // Convert to SEC1 for secp256k1
    return $dfIIc.publicKeyVerify($c5437dfd624ca05c$require$Buffer.concat([
        $c5437dfd624ca05c$require$Buffer.from([
            4
        ]),
        publicKey
    ]));
    if (!sanitize) return false;
    return $dfIIc.publicKeyVerify(publicKey);
};
/**
 * Returns the ethereum address of a given public key.
 * Accepts "Ethereum public keys" and SEC1 encoded keys.
 * @param pubKey The two points of an uncompressed key, unless sanitize is enabled
 * @param sanitize Accept public keys in other formats
 */ module.exports.pubToAddress = function(pubKey, sanitize) {
    if (sanitize === void 0) sanitize = false;
    pubKey = $9uSVP.toBuffer(pubKey);
    if (sanitize && pubKey.length !== 64) pubKey = $dfIIc.publicKeyConvert(pubKey, false).slice(1);
    $cAqPD(pubKey.length === 64);
    // Only take the lower 160bits of the hash
    return $i08Vd.keccak(pubKey).slice(-20);
};
module.exports.publicToAddress = module.exports.pubToAddress;
/**
 * Returns the ethereum address of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */ module.exports.privateToAddress = function(privateKey) {
    return module.exports.publicToAddress(module.exports.privateToPublic(privateKey));
};
/**
 * Returns the ethereum public key of a given private key.
 * @param privateKey A private key must be 256 bits wide
 */ module.exports.privateToPublic = function(privateKey) {
    privateKey = $9uSVP.toBuffer(privateKey);
    // skip the type flag and use the X, Y points
    return $dfIIc.publicKeyCreate(privateKey, false).slice(1);
};
/**
 * Converts a public key to the Ethereum format.
 */ module.exports.importPublic = function(publicKey) {
    publicKey = $9uSVP.toBuffer(publicKey);
    if (publicKey.length !== 64) publicKey = $dfIIc.publicKeyConvert(publicKey, false).slice(1);
    return publicKey;
};

});
parcelRequire.register("9uSVP", function(module, exports) {
"use strict";

var $6ea186b48af7519a$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.baToJSON = module.exports.addHexPrefix = module.exports.toUnsigned = module.exports.fromSigned = module.exports.bufferToHex = module.exports.bufferToInt = module.exports.toBuffer = module.exports.stripZeros = module.exports.unpad = module.exports.setLengthRight = module.exports.setLength = module.exports.setLengthLeft = module.exports.zeros = void 0;

var $785Wy = parcelRequire("785Wy");

var $2NCF6 = parcelRequire("2NCF6");
/**
 * Returns a buffer filled with 0s.
 * @param bytes the number of bytes the buffer should be
 */ module.exports.zeros = function(bytes) {
    return $6ea186b48af7519a$require$Buffer.allocUnsafe(bytes).fill(0);
};
/**
 * Left Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer|Array)
 * @param length the number of bytes the output should be
 * @param right whether to start padding form the left or right
 * @return (Buffer|Array)
 */ module.exports.setLengthLeft = function(msg, length, right) {
    if (right === void 0) right = false;
    var buf = module.exports.zeros(length);
    msg = module.exports.toBuffer(msg);
    if (right) {
        if (msg.length < length) {
            msg.copy(buf);
            return buf;
        }
        return msg.slice(0, length);
    } else {
        if (msg.length < length) {
            msg.copy(buf, length - msg.length);
            return buf;
        }
        return msg.slice(-length);
    }
};
module.exports.setLength = module.exports.setLengthLeft;
/**
 * Right Pads an `Array` or `Buffer` with leading zeros till it has `length` bytes.
 * Or it truncates the beginning if it exceeds.
 * @param msg the value to pad (Buffer|Array)
 * @param length the number of bytes the output should be
 * @return (Buffer|Array)
 */ module.exports.setLengthRight = function(msg, length) {
    return module.exports.setLength(msg, length, true);
};
/**
 * Trims leading zeros from a `Buffer` or an `Array`.
 * @param a (Buffer|Array|String)
 * @return (Buffer|Array|String)
 */ module.exports.unpad = function(a) {
    a = $785Wy.stripHexPrefix(a);
    var first = a[0];
    while(a.length > 0 && first.toString() === '0'){
        a = a.slice(1);
        first = a[0];
    }
    return a;
};
module.exports.stripZeros = module.exports.unpad;
/**
 * Attempts to turn a value into a `Buffer`. As input it supports `Buffer`, `String`, `Number`, null/undefined, `BN` and other objects with a `toArray()` method.
 * @param v the value
 */ module.exports.toBuffer = function(v) {
    if (!$6ea186b48af7519a$require$Buffer.isBuffer(v)) {
        if (Array.isArray(v)) v = $6ea186b48af7519a$require$Buffer.from(v);
        else if (typeof v === 'string') {
            if ($785Wy.isHexString(v)) v = $6ea186b48af7519a$require$Buffer.from($785Wy.padToEven($785Wy.stripHexPrefix(v)), 'hex');
            else throw new Error("Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: " + v);
        } else if (typeof v === 'number') v = $785Wy.intToBuffer(v);
        else if (v === null || v === undefined) v = $6ea186b48af7519a$require$Buffer.allocUnsafe(0);
        else if ($2NCF6.isBN(v)) v = v.toArrayLike($6ea186b48af7519a$require$Buffer);
        else if (v.toArray) // converts a BN to a Buffer
        v = $6ea186b48af7519a$require$Buffer.from(v.toArray());
        else throw new Error('invalid type');
    }
    return v;
};
/**
 * Converts a `Buffer` to a `Number`.
 * @param buf `Buffer` object to convert
 * @throws If the input number exceeds 53 bits.
 */ module.exports.bufferToInt = function(buf) {
    return new $2NCF6(module.exports.toBuffer(buf)).toNumber();
};
/**
 * Converts a `Buffer` into a `0x`-prefixed hex `String`.
 * @param buf `Buffer` object to convert
 */ module.exports.bufferToHex = function(buf) {
    buf = module.exports.toBuffer(buf);
    return '0x' + buf.toString('hex');
};
/**
 * Interprets a `Buffer` as a signed integer and returns a `BN`. Assumes 256-bit numbers.
 * @param num Signed integer value
 */ module.exports.fromSigned = function(num) {
    return new $2NCF6(num).fromTwos(256);
};
/**
 * Converts a `BN` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.
 * @param num
 */ module.exports.toUnsigned = function(num) {
    return $6ea186b48af7519a$require$Buffer.from(num.toTwos(256).toArray());
};
/**
 * Adds "0x" to a given `String` if it does not already start with "0x".
 */ module.exports.addHexPrefix = function(str) {
    if (typeof str !== 'string') return str;
    return $785Wy.isHexPrefixed(str) ? str : '0x' + str;
};
/**
 * Converts a `Buffer` or `Array` to JSON.
 * @param ba (Buffer|Array)
 * @return (Array|String|null)
 */ module.exports.baToJSON = function(ba) {
    if ($6ea186b48af7519a$require$Buffer.isBuffer(ba)) return "0x" + ba.toString('hex');
    else if (ba instanceof Array) {
        var array = [];
        for(var i = 0; i < ba.length; i++)array.push(module.exports.baToJSON(ba[i]));
        return array;
    }
};

});

parcelRequire.register("i08Vd", function(module, exports) {
"use strict";

var $d1af25c7b80f7fd9$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.rlphash = module.exports.ripemd160 = module.exports.sha256 = module.exports.keccak256 = module.exports.keccak = void 0;

var $fydUV = parcelRequire("fydUV");
var $d1af25c7b80f7fd9$var$keccak224 = $fydUV.keccak224, $d1af25c7b80f7fd9$var$keccak384 = $fydUV.keccak384, $d1af25c7b80f7fd9$var$k256 = $fydUV.keccak256, $d1af25c7b80f7fd9$var$keccak512 = $fydUV.keccak512;

var $cGz00 = parcelRequire("cGz00");

var $785Wy = parcelRequire("785Wy");

var $f9tZZ = parcelRequire("f9tZZ");

var $9uSVP = parcelRequire("9uSVP");
/**
 * Creates Keccak hash of the input
 * @param a The input data (Buffer|Array|String|Number) If the string is a 0x-prefixed hex value
 * it's interpreted as hexadecimal, otherwise as utf8.
 * @param bits The Keccak width
 */ module.exports.keccak = function(a, bits) {
    if (bits === void 0) bits = 256;
    if (typeof a === 'string' && !$785Wy.isHexString(a)) a = $d1af25c7b80f7fd9$require$Buffer.from(a, 'utf8');
    else a = $9uSVP.toBuffer(a);
    if (!bits) bits = 256;
    switch(bits){
        case 224:
            return $d1af25c7b80f7fd9$var$keccak224(a);
        case 256:
            return $d1af25c7b80f7fd9$var$k256(a);
        case 384:
            return $d1af25c7b80f7fd9$var$keccak384(a);
        case 512:
            return $d1af25c7b80f7fd9$var$keccak512(a);
        default:
            throw new Error("Invald algorithm: keccak" + bits);
    }
};
/**
 * Creates Keccak-256 hash of the input, alias for keccak(a, 256).
 * @param a The input data (Buffer|Array|String|Number)
 */ module.exports.keccak256 = function(a) {
    return module.exports.keccak(a);
};
/**
 * Creates SHA256 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 */ module.exports.sha256 = function(a) {
    a = $9uSVP.toBuffer(a);
    return $cGz00('sha256').update(a).digest();
};
/**
 * Creates RIPEMD160 hash of the input.
 * @param a The input data (Buffer|Array|String|Number)
 * @param padded Whether it should be padded to 256 bits or not
 */ module.exports.ripemd160 = function(a, padded) {
    a = $9uSVP.toBuffer(a);
    var hash = $cGz00('rmd160').update(a).digest();
    if (padded === true) return $9uSVP.setLength(hash, 32);
    else return hash;
};
/**
 * Creates SHA-3 hash of the RLP encoded version of the input.
 * @param a The input data
 */ module.exports.rlphash = function(a) {
    return module.exports.keccak($f9tZZ.encode(a));
};

});


parcelRequire.register("ekuPa", function(module, exports) {
"use strict";

var $a6ead804131c655a$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.hashPersonalMessage = module.exports.isValidSignature = module.exports.fromRpcSig = module.exports.toRpcSig = module.exports.ecrecover = module.exports.ecsign = void 0;

var $dfIIc = parcelRequire("dfIIc");

var $2NCF6 = parcelRequire("2NCF6");

var $9uSVP = parcelRequire("9uSVP");

var $i08Vd = parcelRequire("i08Vd");
/**
 * Returns the ECDSA signature of a message hash.
 */ module.exports.ecsign = function(msgHash, privateKey, chainId) {
    var sig = $dfIIc.sign(msgHash, privateKey);
    var recovery = sig.recovery;
    var ret = {
        r: sig.signature.slice(0, 32),
        s: sig.signature.slice(32, 64),
        v: chainId ? recovery + (chainId * 2 + 35) : recovery + 27
    };
    return ret;
};
/**
 * ECDSA public key recovery from signature.
 * @returns Recovered public key
 */ module.exports.ecrecover = function(msgHash, v, r, s, chainId) {
    var signature = $a6ead804131c655a$require$Buffer.concat([
        $9uSVP.setLength(r, 32),
        $9uSVP.setLength(s, 32)
    ], 64);
    var recovery = $a6ead804131c655a$var$calculateSigRecovery(v, chainId);
    if (!$a6ead804131c655a$var$isValidSigRecovery(recovery)) throw new Error('Invalid signature v value');
    var senderPubKey = $dfIIc.recover(msgHash, signature, recovery);
    return $dfIIc.publicKeyConvert(senderPubKey, false).slice(1);
};
/**
 * Convert signature parameters into the format of `eth_sign` RPC method.
 * @returns Signature
 */ module.exports.toRpcSig = function(v, r, s, chainId) {
    var recovery = $a6ead804131c655a$var$calculateSigRecovery(v, chainId);
    if (!$a6ead804131c655a$var$isValidSigRecovery(recovery)) throw new Error('Invalid signature v value');
    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin
    return $9uSVP.bufferToHex($a6ead804131c655a$require$Buffer.concat([
        $9uSVP.setLengthLeft(r, 32),
        $9uSVP.setLengthLeft(s, 32),
        $9uSVP.toBuffer(v)
    ]));
};
/**
 * Convert signature format of the `eth_sign` RPC method to signature parameters
 * NOTE: all because of a bug in geth: https://github.com/ethereum/go-ethereum/issues/2053
 */ module.exports.fromRpcSig = function(sig) {
    var buf = $9uSVP.toBuffer(sig);
    // NOTE: with potential introduction of chainId this might need to be updated
    if (buf.length !== 65) throw new Error('Invalid signature length');
    var v = buf[64];
    // support both versions of `eth_sign` responses
    if (v < 27) v += 27;
    return {
        v: v,
        r: buf.slice(0, 32),
        s: buf.slice(32, 64)
    };
};
/**
 * Validate a ECDSA signature.
 * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one
 */ module.exports.isValidSignature = function(v, r, s, homesteadOrLater, chainId) {
    if (homesteadOrLater === void 0) homesteadOrLater = true;
    var SECP256K1_N_DIV_2 = new $2NCF6('7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0', 16);
    var SECP256K1_N = new $2NCF6('fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141', 16);
    if (r.length !== 32 || s.length !== 32) return false;
    if (!$a6ead804131c655a$var$isValidSigRecovery($a6ead804131c655a$var$calculateSigRecovery(v, chainId))) return false;
    var rBN = new $2NCF6(r);
    var sBN = new $2NCF6(s);
    if (rBN.isZero() || rBN.gt(SECP256K1_N) || sBN.isZero() || sBN.gt(SECP256K1_N)) return false;
    if (homesteadOrLater && sBN.cmp(SECP256K1_N_DIV_2) === 1) return false;
    return true;
};
/**
 * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.
 * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`
 * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key
 * used to produce the signature.
 */ module.exports.hashPersonalMessage = function(message) {
    var prefix = $a6ead804131c655a$require$Buffer.from("\u0019Ethereum Signed Message:\n" + message.length.toString(), 'utf-8');
    return $i08Vd.keccak($a6ead804131c655a$require$Buffer.concat([
        prefix,
        message
    ]));
};
function $a6ead804131c655a$var$calculateSigRecovery(v, chainId) {
    return chainId ? v - (2 * chainId + 35) : v - 27;
}
function $a6ead804131c655a$var$isValidSigRecovery(recovery) {
    return recovery === 0 || recovery === 1;
}

});

parcelRequire.register("jlqlo", function(module, exports) {
"use strict";

var $03a264cddc4c2fdc$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
Object.defineProperty(module.exports, "__esModule", {
    value: true
});
module.exports.defineProperties = void 0;

var $cAqPD = parcelRequire("cAqPD");

var $785Wy = parcelRequire("785Wy");

var $f9tZZ = parcelRequire("f9tZZ");

var $9uSVP = parcelRequire("9uSVP");
/**
 * Defines properties on a `Object`. It make the assumption that underlying data is binary.
 * @param self the `Object` to define properties on
 * @param fields an array fields to define. Fields can contain:
 * * `name` - the name of the properties
 * * `length` - the number of bytes the field can have
 * * `allowLess` - if the field can be less than the length
 * * `allowEmpty`
 * @param data data to be validated against the definitions
 * @deprecated
 */ module.exports.defineProperties = function(self, fields, data) {
    self.raw = [];
    self._fields = [];
    // attach the `toJSON`
    self.toJSON = function(label) {
        if (label === void 0) label = false;
        if (label) {
            var obj_1 = {};
            self._fields.forEach(function(field) {
                obj_1[field] = "0x" + self[field].toString('hex');
            });
            return obj_1;
        }
        return $9uSVP.baToJSON(self.raw);
    };
    self.serialize = function serialize() {
        return $f9tZZ.encode(self.raw);
    };
    fields.forEach(function(field, i) {
        self._fields.push(field.name);
        function getter() {
            return self.raw[i];
        }
        function setter(v) {
            v = $9uSVP.toBuffer(v);
            if (v.toString('hex') === '00' && !field.allowZero) v = $03a264cddc4c2fdc$require$Buffer.allocUnsafe(0);
            if (field.allowLess && field.length) {
                v = $9uSVP.stripZeros(v);
                $cAqPD(field.length >= v.length, "The field " + field.name + " must not have more " + field.length + " bytes");
            } else if (!(field.allowZero && v.length === 0) && field.length) $cAqPD(field.length === v.length, "The field " + field.name + " must have byte length of " + field.length);
            self.raw[i] = v;
        }
        Object.defineProperty(self, field.name, {
            enumerable: true,
            configurable: true,
            get: getter,
            set: setter
        });
        if (field.default) self[field.name] = field.default;
        // attach alias
        if (field.alias) Object.defineProperty(self, field.alias, {
            enumerable: false,
            configurable: true,
            set: setter,
            get: getter
        });
    });
    // if the constuctor is passed data
    if (data) {
        if (typeof data === 'string') data = $03a264cddc4c2fdc$require$Buffer.from($785Wy.stripHexPrefix(data), 'hex');
        if ($03a264cddc4c2fdc$require$Buffer.isBuffer(data)) data = $f9tZZ.decode(data);
        if (Array.isArray(data)) {
            if (data.length > self._fields.length) throw new Error('wrong number of fields in data');
            // make sure all the items are buffers
            data.forEach(function(d, i) {
                self[self._fields[i]] = $9uSVP.toBuffer(d);
            });
        } else if (typeof data === 'object') {
            var keys_1 = Object.keys(data);
            fields.forEach(function(field) {
                if (keys_1.indexOf(field.name) !== -1) self[field.name] = data[field.name];
                if (keys_1.indexOf(field.alias) !== -1) self[field.alias] = data[field.alias];
            });
        } else throw new Error('invalid data');
    }
};

});




parcelRequire.register("eBbzZ", function(module, exports) {

(function(nacl) {
    // Ported in 2014 by Dmitry Chestnykh and Devi Mandiri.
    // Public domain.
    //
    // Implementation derived from TweetNaCl version 20140427.
    // See for details: http://tweetnacl.cr.yp.to/
    var gf = function(init) {
        var i, r = new Float64Array(16);
        if (init) for(i = 0; i < init.length; i++)r[i] = init[i];
        return r;
    };
    //  Pluggable, initialized in high-level API below.
    var randombytes = function() {
        throw new Error('no PRNG');
    };
    var _0 = new Uint8Array(16);
    var _9 = new Uint8Array(32);
    _9[0] = 9;
    var gf0 = gf(), gf1 = gf([
        1
    ]), _121665 = gf([
        56129,
        1
    ]), D = gf([
        30883,
        4953,
        19914,
        30187,
        55467,
        16705,
        2637,
        112,
        59544,
        30585,
        16505,
        36039,
        65139,
        11119,
        27886,
        20995
    ]), D2 = gf([
        61785,
        9906,
        39828,
        60374,
        45398,
        33411,
        5274,
        224,
        53552,
        61171,
        33010,
        6542,
        64743,
        22239,
        55772,
        9222
    ]), X = gf([
        54554,
        36645,
        11616,
        51542,
        42930,
        38181,
        51040,
        26924,
        56412,
        64982,
        57905,
        49316,
        21502,
        52590,
        14035,
        8553
    ]), Y = gf([
        26200,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214,
        26214
    ]), I = gf([
        41136,
        18958,
        6951,
        50414,
        58488,
        44335,
        6150,
        12099,
        55207,
        15867,
        153,
        11085,
        57099,
        20417,
        9344,
        11139
    ]);
    function ts64(x, i, h, l) {
        x[i] = h >> 24 & 255;
        x[i + 1] = h >> 16 & 255;
        x[i + 2] = h >> 8 & 255;
        x[i + 3] = h & 255;
        x[i + 4] = l >> 24 & 255;
        x[i + 5] = l >> 16 & 255;
        x[i + 6] = l >> 8 & 255;
        x[i + 7] = l & 255;
    }
    function vn(x, xi, y, yi, n) {
        var i, d = 0;
        for(i = 0; i < n; i++)d |= x[xi + i] ^ y[yi + i];
        return (1 & d - 1 >>> 8) - 1;
    }
    function crypto_verify_16(x, xi, y, yi) {
        return vn(x, xi, y, yi, 16);
    }
    function crypto_verify_32(x, xi, y, yi) {
        return vn(x, xi, y, yi, 32);
    }
    function core_salsa20(o, p, k, c) {
        var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for(var i = 0; i < 20; i += 2){
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 25;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 19;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 25;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 19;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 25;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 19;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 25;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 19;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 14;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 25;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 19;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 25;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 19;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 25;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 19;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 25;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 19;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 14;
        }
        x0 = x0 + j0 | 0;
        x1 = x1 + j1 | 0;
        x2 = x2 + j2 | 0;
        x3 = x3 + j3 | 0;
        x4 = x4 + j4 | 0;
        x5 = x5 + j5 | 0;
        x6 = x6 + j6 | 0;
        x7 = x7 + j7 | 0;
        x8 = x8 + j8 | 0;
        x9 = x9 + j9 | 0;
        x10 = x10 + j10 | 0;
        x11 = x11 + j11 | 0;
        x12 = x12 + j12 | 0;
        x13 = x13 + j13 | 0;
        x14 = x14 + j14 | 0;
        x15 = x15 + j15 | 0;
        o[0] = x0 >>> 0 & 255;
        o[1] = x0 >>> 8 & 255;
        o[2] = x0 >>> 16 & 255;
        o[3] = x0 >>> 24 & 255;
        o[4] = x1 >>> 0 & 255;
        o[5] = x1 >>> 8 & 255;
        o[6] = x1 >>> 16 & 255;
        o[7] = x1 >>> 24 & 255;
        o[8] = x2 >>> 0 & 255;
        o[9] = x2 >>> 8 & 255;
        o[10] = x2 >>> 16 & 255;
        o[11] = x2 >>> 24 & 255;
        o[12] = x3 >>> 0 & 255;
        o[13] = x3 >>> 8 & 255;
        o[14] = x3 >>> 16 & 255;
        o[15] = x3 >>> 24 & 255;
        o[16] = x4 >>> 0 & 255;
        o[17] = x4 >>> 8 & 255;
        o[18] = x4 >>> 16 & 255;
        o[19] = x4 >>> 24 & 255;
        o[20] = x5 >>> 0 & 255;
        o[21] = x5 >>> 8 & 255;
        o[22] = x5 >>> 16 & 255;
        o[23] = x5 >>> 24 & 255;
        o[24] = x6 >>> 0 & 255;
        o[25] = x6 >>> 8 & 255;
        o[26] = x6 >>> 16 & 255;
        o[27] = x6 >>> 24 & 255;
        o[28] = x7 >>> 0 & 255;
        o[29] = x7 >>> 8 & 255;
        o[30] = x7 >>> 16 & 255;
        o[31] = x7 >>> 24 & 255;
        o[32] = x8 >>> 0 & 255;
        o[33] = x8 >>> 8 & 255;
        o[34] = x8 >>> 16 & 255;
        o[35] = x8 >>> 24 & 255;
        o[36] = x9 >>> 0 & 255;
        o[37] = x9 >>> 8 & 255;
        o[38] = x9 >>> 16 & 255;
        o[39] = x9 >>> 24 & 255;
        o[40] = x10 >>> 0 & 255;
        o[41] = x10 >>> 8 & 255;
        o[42] = x10 >>> 16 & 255;
        o[43] = x10 >>> 24 & 255;
        o[44] = x11 >>> 0 & 255;
        o[45] = x11 >>> 8 & 255;
        o[46] = x11 >>> 16 & 255;
        o[47] = x11 >>> 24 & 255;
        o[48] = x12 >>> 0 & 255;
        o[49] = x12 >>> 8 & 255;
        o[50] = x12 >>> 16 & 255;
        o[51] = x12 >>> 24 & 255;
        o[52] = x13 >>> 0 & 255;
        o[53] = x13 >>> 8 & 255;
        o[54] = x13 >>> 16 & 255;
        o[55] = x13 >>> 24 & 255;
        o[56] = x14 >>> 0 & 255;
        o[57] = x14 >>> 8 & 255;
        o[58] = x14 >>> 16 & 255;
        o[59] = x14 >>> 24 & 255;
        o[60] = x15 >>> 0 & 255;
        o[61] = x15 >>> 8 & 255;
        o[62] = x15 >>> 16 & 255;
        o[63] = x15 >>> 24 & 255;
    }
    function core_hsalsa20(o, p, k, c) {
        var j0 = c[0] & 255 | (c[1] & 255) << 8 | (c[2] & 255) << 16 | (c[3] & 255) << 24, j1 = k[0] & 255 | (k[1] & 255) << 8 | (k[2] & 255) << 16 | (k[3] & 255) << 24, j2 = k[4] & 255 | (k[5] & 255) << 8 | (k[6] & 255) << 16 | (k[7] & 255) << 24, j3 = k[8] & 255 | (k[9] & 255) << 8 | (k[10] & 255) << 16 | (k[11] & 255) << 24, j4 = k[12] & 255 | (k[13] & 255) << 8 | (k[14] & 255) << 16 | (k[15] & 255) << 24, j5 = c[4] & 255 | (c[5] & 255) << 8 | (c[6] & 255) << 16 | (c[7] & 255) << 24, j6 = p[0] & 255 | (p[1] & 255) << 8 | (p[2] & 255) << 16 | (p[3] & 255) << 24, j7 = p[4] & 255 | (p[5] & 255) << 8 | (p[6] & 255) << 16 | (p[7] & 255) << 24, j8 = p[8] & 255 | (p[9] & 255) << 8 | (p[10] & 255) << 16 | (p[11] & 255) << 24, j9 = p[12] & 255 | (p[13] & 255) << 8 | (p[14] & 255) << 16 | (p[15] & 255) << 24, j10 = c[8] & 255 | (c[9] & 255) << 8 | (c[10] & 255) << 16 | (c[11] & 255) << 24, j11 = k[16] & 255 | (k[17] & 255) << 8 | (k[18] & 255) << 16 | (k[19] & 255) << 24, j12 = k[20] & 255 | (k[21] & 255) << 8 | (k[22] & 255) << 16 | (k[23] & 255) << 24, j13 = k[24] & 255 | (k[25] & 255) << 8 | (k[26] & 255) << 16 | (k[27] & 255) << 24, j14 = k[28] & 255 | (k[29] & 255) << 8 | (k[30] & 255) << 16 | (k[31] & 255) << 24, j15 = c[12] & 255 | (c[13] & 255) << 8 | (c[14] & 255) << 16 | (c[15] & 255) << 24;
        var x0 = j0, x1 = j1, x2 = j2, x3 = j3, x4 = j4, x5 = j5, x6 = j6, x7 = j7, x8 = j8, x9 = j9, x10 = j10, x11 = j11, x12 = j12, x13 = j13, x14 = j14, x15 = j15, u;
        for(var i = 0; i < 20; i += 2){
            u = x0 + x12 | 0;
            x4 ^= u << 7 | u >>> 25;
            u = x4 + x0 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x4 | 0;
            x12 ^= u << 13 | u >>> 19;
            u = x12 + x8 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x1 | 0;
            x9 ^= u << 7 | u >>> 25;
            u = x9 + x5 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x9 | 0;
            x1 ^= u << 13 | u >>> 19;
            u = x1 + x13 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x6 | 0;
            x14 ^= u << 7 | u >>> 25;
            u = x14 + x10 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x14 | 0;
            x6 ^= u << 13 | u >>> 19;
            u = x6 + x2 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x11 | 0;
            x3 ^= u << 7 | u >>> 25;
            u = x3 + x15 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x3 | 0;
            x11 ^= u << 13 | u >>> 19;
            u = x11 + x7 | 0;
            x15 ^= u << 18 | u >>> 14;
            u = x0 + x3 | 0;
            x1 ^= u << 7 | u >>> 25;
            u = x1 + x0 | 0;
            x2 ^= u << 9 | u >>> 23;
            u = x2 + x1 | 0;
            x3 ^= u << 13 | u >>> 19;
            u = x3 + x2 | 0;
            x0 ^= u << 18 | u >>> 14;
            u = x5 + x4 | 0;
            x6 ^= u << 7 | u >>> 25;
            u = x6 + x5 | 0;
            x7 ^= u << 9 | u >>> 23;
            u = x7 + x6 | 0;
            x4 ^= u << 13 | u >>> 19;
            u = x4 + x7 | 0;
            x5 ^= u << 18 | u >>> 14;
            u = x10 + x9 | 0;
            x11 ^= u << 7 | u >>> 25;
            u = x11 + x10 | 0;
            x8 ^= u << 9 | u >>> 23;
            u = x8 + x11 | 0;
            x9 ^= u << 13 | u >>> 19;
            u = x9 + x8 | 0;
            x10 ^= u << 18 | u >>> 14;
            u = x15 + x14 | 0;
            x12 ^= u << 7 | u >>> 25;
            u = x12 + x15 | 0;
            x13 ^= u << 9 | u >>> 23;
            u = x13 + x12 | 0;
            x14 ^= u << 13 | u >>> 19;
            u = x14 + x13 | 0;
            x15 ^= u << 18 | u >>> 14;
        }
        o[0] = x0 >>> 0 & 255;
        o[1] = x0 >>> 8 & 255;
        o[2] = x0 >>> 16 & 255;
        o[3] = x0 >>> 24 & 255;
        o[4] = x5 >>> 0 & 255;
        o[5] = x5 >>> 8 & 255;
        o[6] = x5 >>> 16 & 255;
        o[7] = x5 >>> 24 & 255;
        o[8] = x10 >>> 0 & 255;
        o[9] = x10 >>> 8 & 255;
        o[10] = x10 >>> 16 & 255;
        o[11] = x10 >>> 24 & 255;
        o[12] = x15 >>> 0 & 255;
        o[13] = x15 >>> 8 & 255;
        o[14] = x15 >>> 16 & 255;
        o[15] = x15 >>> 24 & 255;
        o[16] = x6 >>> 0 & 255;
        o[17] = x6 >>> 8 & 255;
        o[18] = x6 >>> 16 & 255;
        o[19] = x6 >>> 24 & 255;
        o[20] = x7 >>> 0 & 255;
        o[21] = x7 >>> 8 & 255;
        o[22] = x7 >>> 16 & 255;
        o[23] = x7 >>> 24 & 255;
        o[24] = x8 >>> 0 & 255;
        o[25] = x8 >>> 8 & 255;
        o[26] = x8 >>> 16 & 255;
        o[27] = x8 >>> 24 & 255;
        o[28] = x9 >>> 0 & 255;
        o[29] = x9 >>> 8 & 255;
        o[30] = x9 >>> 16 & 255;
        o[31] = x9 >>> 24 & 255;
    }
    function crypto_core_salsa20(out, inp, k, c) {
        core_salsa20(out, inp, k, c);
    }
    function crypto_core_hsalsa20(out, inp, k, c) {
        core_hsalsa20(out, inp, k, c);
    }
    var sigma = new Uint8Array([
        101,
        120,
        112,
        97,
        110,
        100,
        32,
        51,
        50,
        45,
        98,
        121,
        116,
        101,
        32,
        107
    ]);
    // "expand 32-byte k"
    function crypto_stream_salsa20_xor(c, cpos, m, mpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for(i = 0; i < 16; i++)z[i] = 0;
        for(i = 0; i < 8; i++)z[i] = n[i];
        while(b >= 64){
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < 64; i++)c[cpos + i] = m[mpos + i] ^ x[i];
            u = 1;
            for(i = 8; i < 16; i++){
                u = u + (z[i] & 255) | 0;
                z[i] = u & 255;
                u >>>= 8;
            }
            b -= 64;
            cpos += 64;
            mpos += 64;
        }
        if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < b; i++)c[cpos + i] = m[mpos + i] ^ x[i];
        }
        return 0;
    }
    function crypto_stream_salsa20(c, cpos, b, n, k) {
        var z = new Uint8Array(16), x = new Uint8Array(64);
        var u, i;
        for(i = 0; i < 16; i++)z[i] = 0;
        for(i = 0; i < 8; i++)z[i] = n[i];
        while(b >= 64){
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < 64; i++)c[cpos + i] = x[i];
            u = 1;
            for(i = 8; i < 16; i++){
                u = u + (z[i] & 255) | 0;
                z[i] = u & 255;
                u >>>= 8;
            }
            b -= 64;
            cpos += 64;
        }
        if (b > 0) {
            crypto_core_salsa20(x, z, k, sigma);
            for(i = 0; i < b; i++)c[cpos + i] = x[i];
        }
        return 0;
    }
    function crypto_stream(c, cpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for(var i = 0; i < 8; i++)sn[i] = n[i + 16];
        return crypto_stream_salsa20(c, cpos, d, sn, s);
    }
    function crypto_stream_xor(c, cpos, m, mpos, d, n, k) {
        var s = new Uint8Array(32);
        crypto_core_hsalsa20(s, n, k, sigma);
        var sn = new Uint8Array(8);
        for(var i = 0; i < 8; i++)sn[i] = n[i + 16];
        return crypto_stream_salsa20_xor(c, cpos, m, mpos, d, sn, s);
    }
    /*
* Port of Andrew Moon's Poly1305-donna-16. Public domain.
* https://github.com/floodyberry/poly1305-donna
*/ var poly1305 = function(key) {
        this.buffer = new Uint8Array(16);
        this.r = new Uint16Array(10);
        this.h = new Uint16Array(10);
        this.pad = new Uint16Array(8);
        this.leftover = 0;
        this.fin = 0;
        var t0, t1, t2, t3, t4, t5, t6, t7;
        t0 = key[0] & 255 | (key[1] & 255) << 8;
        this.r[0] = t0 & 8191;
        t1 = key[2] & 255 | (key[3] & 255) << 8;
        this.r[1] = (t0 >>> 13 | t1 << 3) & 8191;
        t2 = key[4] & 255 | (key[5] & 255) << 8;
        this.r[2] = (t1 >>> 10 | t2 << 6) & 7939;
        t3 = key[6] & 255 | (key[7] & 255) << 8;
        this.r[3] = (t2 >>> 7 | t3 << 9) & 8191;
        t4 = key[8] & 255 | (key[9] & 255) << 8;
        this.r[4] = (t3 >>> 4 | t4 << 12) & 255;
        this.r[5] = t4 >>> 1 & 8190;
        t5 = key[10] & 255 | (key[11] & 255) << 8;
        this.r[6] = (t4 >>> 14 | t5 << 2) & 8191;
        t6 = key[12] & 255 | (key[13] & 255) << 8;
        this.r[7] = (t5 >>> 11 | t6 << 5) & 8065;
        t7 = key[14] & 255 | (key[15] & 255) << 8;
        this.r[8] = (t6 >>> 8 | t7 << 8) & 8191;
        this.r[9] = t7 >>> 5 & 127;
        this.pad[0] = key[16] & 255 | (key[17] & 255) << 8;
        this.pad[1] = key[18] & 255 | (key[19] & 255) << 8;
        this.pad[2] = key[20] & 255 | (key[21] & 255) << 8;
        this.pad[3] = key[22] & 255 | (key[23] & 255) << 8;
        this.pad[4] = key[24] & 255 | (key[25] & 255) << 8;
        this.pad[5] = key[26] & 255 | (key[27] & 255) << 8;
        this.pad[6] = key[28] & 255 | (key[29] & 255) << 8;
        this.pad[7] = key[30] & 255 | (key[31] & 255) << 8;
    };
    poly1305.prototype.blocks = function(m, mpos, bytes) {
        var hibit = this.fin ? 0 : 2048;
        var t0, t1, t2, t3, t4, t5, t6, t7, c;
        var d0, d1, d2, d3, d4, d5, d6, d7, d8, d9;
        var h0 = this.h[0], h1 = this.h[1], h2 = this.h[2], h3 = this.h[3], h4 = this.h[4], h5 = this.h[5], h6 = this.h[6], h7 = this.h[7], h8 = this.h[8], h9 = this.h[9];
        var r0 = this.r[0], r1 = this.r[1], r2 = this.r[2], r3 = this.r[3], r4 = this.r[4], r5 = this.r[5], r6 = this.r[6], r7 = this.r[7], r8 = this.r[8], r9 = this.r[9];
        while(bytes >= 16){
            t0 = m[mpos + 0] & 255 | (m[mpos + 1] & 255) << 8;
            h0 += t0 & 8191;
            t1 = m[mpos + 2] & 255 | (m[mpos + 3] & 255) << 8;
            h1 += (t0 >>> 13 | t1 << 3) & 8191;
            t2 = m[mpos + 4] & 255 | (m[mpos + 5] & 255) << 8;
            h2 += (t1 >>> 10 | t2 << 6) & 8191;
            t3 = m[mpos + 6] & 255 | (m[mpos + 7] & 255) << 8;
            h3 += (t2 >>> 7 | t3 << 9) & 8191;
            t4 = m[mpos + 8] & 255 | (m[mpos + 9] & 255) << 8;
            h4 += (t3 >>> 4 | t4 << 12) & 8191;
            h5 += t4 >>> 1 & 8191;
            t5 = m[mpos + 10] & 255 | (m[mpos + 11] & 255) << 8;
            h6 += (t4 >>> 14 | t5 << 2) & 8191;
            t6 = m[mpos + 12] & 255 | (m[mpos + 13] & 255) << 8;
            h7 += (t5 >>> 11 | t6 << 5) & 8191;
            t7 = m[mpos + 14] & 255 | (m[mpos + 15] & 255) << 8;
            h8 += (t6 >>> 8 | t7 << 8) & 8191;
            h9 += t7 >>> 5 | hibit;
            c = 0;
            d0 = c;
            d0 += h0 * r0;
            d0 += h1 * (5 * r9);
            d0 += h2 * (5 * r8);
            d0 += h3 * (5 * r7);
            d0 += h4 * (5 * r6);
            c = d0 >>> 13;
            d0 &= 8191;
            d0 += h5 * (5 * r5);
            d0 += h6 * (5 * r4);
            d0 += h7 * (5 * r3);
            d0 += h8 * (5 * r2);
            d0 += h9 * (5 * r1);
            c += d0 >>> 13;
            d0 &= 8191;
            d1 = c;
            d1 += h0 * r1;
            d1 += h1 * r0;
            d1 += h2 * (5 * r9);
            d1 += h3 * (5 * r8);
            d1 += h4 * (5 * r7);
            c = d1 >>> 13;
            d1 &= 8191;
            d1 += h5 * (5 * r6);
            d1 += h6 * (5 * r5);
            d1 += h7 * (5 * r4);
            d1 += h8 * (5 * r3);
            d1 += h9 * (5 * r2);
            c += d1 >>> 13;
            d1 &= 8191;
            d2 = c;
            d2 += h0 * r2;
            d2 += h1 * r1;
            d2 += h2 * r0;
            d2 += h3 * (5 * r9);
            d2 += h4 * (5 * r8);
            c = d2 >>> 13;
            d2 &= 8191;
            d2 += h5 * (5 * r7);
            d2 += h6 * (5 * r6);
            d2 += h7 * (5 * r5);
            d2 += h8 * (5 * r4);
            d2 += h9 * (5 * r3);
            c += d2 >>> 13;
            d2 &= 8191;
            d3 = c;
            d3 += h0 * r3;
            d3 += h1 * r2;
            d3 += h2 * r1;
            d3 += h3 * r0;
            d3 += h4 * (5 * r9);
            c = d3 >>> 13;
            d3 &= 8191;
            d3 += h5 * (5 * r8);
            d3 += h6 * (5 * r7);
            d3 += h7 * (5 * r6);
            d3 += h8 * (5 * r5);
            d3 += h9 * (5 * r4);
            c += d3 >>> 13;
            d3 &= 8191;
            d4 = c;
            d4 += h0 * r4;
            d4 += h1 * r3;
            d4 += h2 * r2;
            d4 += h3 * r1;
            d4 += h4 * r0;
            c = d4 >>> 13;
            d4 &= 8191;
            d4 += h5 * (5 * r9);
            d4 += h6 * (5 * r8);
            d4 += h7 * (5 * r7);
            d4 += h8 * (5 * r6);
            d4 += h9 * (5 * r5);
            c += d4 >>> 13;
            d4 &= 8191;
            d5 = c;
            d5 += h0 * r5;
            d5 += h1 * r4;
            d5 += h2 * r3;
            d5 += h3 * r2;
            d5 += h4 * r1;
            c = d5 >>> 13;
            d5 &= 8191;
            d5 += h5 * r0;
            d5 += h6 * (5 * r9);
            d5 += h7 * (5 * r8);
            d5 += h8 * (5 * r7);
            d5 += h9 * (5 * r6);
            c += d5 >>> 13;
            d5 &= 8191;
            d6 = c;
            d6 += h0 * r6;
            d6 += h1 * r5;
            d6 += h2 * r4;
            d6 += h3 * r3;
            d6 += h4 * r2;
            c = d6 >>> 13;
            d6 &= 8191;
            d6 += h5 * r1;
            d6 += h6 * r0;
            d6 += h7 * (5 * r9);
            d6 += h8 * (5 * r8);
            d6 += h9 * (5 * r7);
            c += d6 >>> 13;
            d6 &= 8191;
            d7 = c;
            d7 += h0 * r7;
            d7 += h1 * r6;
            d7 += h2 * r5;
            d7 += h3 * r4;
            d7 += h4 * r3;
            c = d7 >>> 13;
            d7 &= 8191;
            d7 += h5 * r2;
            d7 += h6 * r1;
            d7 += h7 * r0;
            d7 += h8 * (5 * r9);
            d7 += h9 * (5 * r8);
            c += d7 >>> 13;
            d7 &= 8191;
            d8 = c;
            d8 += h0 * r8;
            d8 += h1 * r7;
            d8 += h2 * r6;
            d8 += h3 * r5;
            d8 += h4 * r4;
            c = d8 >>> 13;
            d8 &= 8191;
            d8 += h5 * r3;
            d8 += h6 * r2;
            d8 += h7 * r1;
            d8 += h8 * r0;
            d8 += h9 * (5 * r9);
            c += d8 >>> 13;
            d8 &= 8191;
            d9 = c;
            d9 += h0 * r9;
            d9 += h1 * r8;
            d9 += h2 * r7;
            d9 += h3 * r6;
            d9 += h4 * r5;
            c = d9 >>> 13;
            d9 &= 8191;
            d9 += h5 * r4;
            d9 += h6 * r3;
            d9 += h7 * r2;
            d9 += h8 * r1;
            d9 += h9 * r0;
            c += d9 >>> 13;
            d9 &= 8191;
            c = (c << 2) + c | 0;
            c = c + d0 | 0;
            d0 = c & 8191;
            c = c >>> 13;
            d1 += c;
            h0 = d0;
            h1 = d1;
            h2 = d2;
            h3 = d3;
            h4 = d4;
            h5 = d5;
            h6 = d6;
            h7 = d7;
            h8 = d8;
            h9 = d9;
            mpos += 16;
            bytes -= 16;
        }
        this.h[0] = h0;
        this.h[1] = h1;
        this.h[2] = h2;
        this.h[3] = h3;
        this.h[4] = h4;
        this.h[5] = h5;
        this.h[6] = h6;
        this.h[7] = h7;
        this.h[8] = h8;
        this.h[9] = h9;
    };
    poly1305.prototype.finish = function(mac, macpos) {
        var g = new Uint16Array(10);
        var c, mask, f, i;
        if (this.leftover) {
            i = this.leftover;
            this.buffer[i++] = 1;
            for(; i < 16; i++)this.buffer[i] = 0;
            this.fin = 1;
            this.blocks(this.buffer, 0, 16);
        }
        c = this.h[1] >>> 13;
        this.h[1] &= 8191;
        for(i = 2; i < 10; i++){
            this.h[i] += c;
            c = this.h[i] >>> 13;
            this.h[i] &= 8191;
        }
        this.h[0] += c * 5;
        c = this.h[0] >>> 13;
        this.h[0] &= 8191;
        this.h[1] += c;
        c = this.h[1] >>> 13;
        this.h[1] &= 8191;
        this.h[2] += c;
        g[0] = this.h[0] + 5;
        c = g[0] >>> 13;
        g[0] &= 8191;
        for(i = 1; i < 10; i++){
            g[i] = this.h[i] + c;
            c = g[i] >>> 13;
            g[i] &= 8191;
        }
        g[9] -= 8192;
        mask = (c ^ 1) - 1;
        for(i = 0; i < 10; i++)g[i] &= mask;
        mask = ~mask;
        for(i = 0; i < 10; i++)this.h[i] = this.h[i] & mask | g[i];
        this.h[0] = (this.h[0] | this.h[1] << 13) & 65535;
        this.h[1] = (this.h[1] >>> 3 | this.h[2] << 10) & 65535;
        this.h[2] = (this.h[2] >>> 6 | this.h[3] << 7) & 65535;
        this.h[3] = (this.h[3] >>> 9 | this.h[4] << 4) & 65535;
        this.h[4] = (this.h[4] >>> 12 | this.h[5] << 1 | this.h[6] << 14) & 65535;
        this.h[5] = (this.h[6] >>> 2 | this.h[7] << 11) & 65535;
        this.h[6] = (this.h[7] >>> 5 | this.h[8] << 8) & 65535;
        this.h[7] = (this.h[8] >>> 8 | this.h[9] << 5) & 65535;
        f = this.h[0] + this.pad[0];
        this.h[0] = f & 65535;
        for(i = 1; i < 8; i++){
            f = (this.h[i] + this.pad[i] | 0) + (f >>> 16) | 0;
            this.h[i] = f & 65535;
        }
        mac[macpos + 0] = this.h[0] >>> 0 & 255;
        mac[macpos + 1] = this.h[0] >>> 8 & 255;
        mac[macpos + 2] = this.h[1] >>> 0 & 255;
        mac[macpos + 3] = this.h[1] >>> 8 & 255;
        mac[macpos + 4] = this.h[2] >>> 0 & 255;
        mac[macpos + 5] = this.h[2] >>> 8 & 255;
        mac[macpos + 6] = this.h[3] >>> 0 & 255;
        mac[macpos + 7] = this.h[3] >>> 8 & 255;
        mac[macpos + 8] = this.h[4] >>> 0 & 255;
        mac[macpos + 9] = this.h[4] >>> 8 & 255;
        mac[macpos + 10] = this.h[5] >>> 0 & 255;
        mac[macpos + 11] = this.h[5] >>> 8 & 255;
        mac[macpos + 12] = this.h[6] >>> 0 & 255;
        mac[macpos + 13] = this.h[6] >>> 8 & 255;
        mac[macpos + 14] = this.h[7] >>> 0 & 255;
        mac[macpos + 15] = this.h[7] >>> 8 & 255;
    };
    poly1305.prototype.update = function(m, mpos, bytes) {
        var i, want;
        if (this.leftover) {
            want = 16 - this.leftover;
            if (want > bytes) want = bytes;
            for(i = 0; i < want; i++)this.buffer[this.leftover + i] = m[mpos + i];
            bytes -= want;
            mpos += want;
            this.leftover += want;
            if (this.leftover < 16) return;
            this.blocks(this.buffer, 0, 16);
            this.leftover = 0;
        }
        if (bytes >= 16) {
            want = bytes - bytes % 16;
            this.blocks(m, mpos, want);
            mpos += want;
            bytes -= want;
        }
        if (bytes) {
            for(i = 0; i < bytes; i++)this.buffer[this.leftover + i] = m[mpos + i];
            this.leftover += bytes;
        }
    };
    function crypto_onetimeauth(out, outpos, m, mpos, n, k) {
        var s = new poly1305(k);
        s.update(m, mpos, n);
        s.finish(out, outpos);
        return 0;
    }
    function crypto_onetimeauth_verify(h, hpos, m, mpos, n, k) {
        var x = new Uint8Array(16);
        crypto_onetimeauth(x, 0, m, mpos, n, k);
        return crypto_verify_16(h, hpos, x, 0);
    }
    function crypto_secretbox(c, m, d, n, k) {
        var i;
        if (d < 32) return -1;
        crypto_stream_xor(c, 0, m, 0, d, n, k);
        crypto_onetimeauth(c, 16, c, 32, d - 32, c);
        for(i = 0; i < 16; i++)c[i] = 0;
        return 0;
    }
    function crypto_secretbox_open(m, c, d, n, k) {
        var i;
        var x = new Uint8Array(32);
        if (d < 32) return -1;
        crypto_stream(x, 0, 32, n, k);
        if (crypto_onetimeauth_verify(c, 16, c, 32, d - 32, x) !== 0) return -1;
        crypto_stream_xor(m, 0, c, 0, d, n, k);
        for(i = 0; i < 32; i++)m[i] = 0;
        return 0;
    }
    function set25519(r, a) {
        var i;
        for(i = 0; i < 16; i++)r[i] = a[i] | 0;
    }
    function car25519(o) {
        var i, v, c = 1;
        for(i = 0; i < 16; i++){
            v = o[i] + c + 65535;
            c = Math.floor(v / 65536);
            o[i] = v - c * 65536;
        }
        o[0] += c - 1 + 37 * (c - 1);
    }
    function sel25519(p, q, b) {
        var t, c = ~(b - 1);
        for(var i = 0; i < 16; i++){
            t = c & (p[i] ^ q[i]);
            p[i] ^= t;
            q[i] ^= t;
        }
    }
    function pack25519(o, n) {
        var i, j, b;
        var m = gf(), t = gf();
        for(i = 0; i < 16; i++)t[i] = n[i];
        car25519(t);
        car25519(t);
        car25519(t);
        for(j = 0; j < 2; j++){
            m[0] = t[0] - 65517;
            for(i = 1; i < 15; i++){
                m[i] = t[i] - 65535 - (m[i - 1] >> 16 & 1);
                m[i - 1] &= 65535;
            }
            m[15] = t[15] - 32767 - (m[14] >> 16 & 1);
            b = m[15] >> 16 & 1;
            m[14] &= 65535;
            sel25519(t, m, 1 - b);
        }
        for(i = 0; i < 16; i++){
            o[2 * i] = t[i] & 255;
            o[2 * i + 1] = t[i] >> 8;
        }
    }
    function neq25519(a, b) {
        var c = new Uint8Array(32), d = new Uint8Array(32);
        pack25519(c, a);
        pack25519(d, b);
        return crypto_verify_32(c, 0, d, 0);
    }
    function par25519(a) {
        var d = new Uint8Array(32);
        pack25519(d, a);
        return d[0] & 1;
    }
    function unpack25519(o, n) {
        var i;
        for(i = 0; i < 16; i++)o[i] = n[2 * i] + (n[2 * i + 1] << 8);
        o[15] &= 32767;
    }
    function A(o, a, b) {
        for(var i = 0; i < 16; i++)o[i] = a[i] + b[i];
    }
    function Z(o, a, b) {
        for(var i = 0; i < 16; i++)o[i] = a[i] - b[i];
    }
    function M(o, a, b) {
        var v, c, t0 = 0, t1 = 0, t2 = 0, t3 = 0, t4 = 0, t5 = 0, t6 = 0, t7 = 0, t8 = 0, t9 = 0, t10 = 0, t11 = 0, t12 = 0, t13 = 0, t14 = 0, t15 = 0, t16 = 0, t17 = 0, t18 = 0, t19 = 0, t20 = 0, t21 = 0, t22 = 0, t23 = 0, t24 = 0, t25 = 0, t26 = 0, t27 = 0, t28 = 0, t29 = 0, t30 = 0, b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8], b9 = b[9], b10 = b[10], b11 = b[11], b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
        v = a[0];
        t0 += v * b0;
        t1 += v * b1;
        t2 += v * b2;
        t3 += v * b3;
        t4 += v * b4;
        t5 += v * b5;
        t6 += v * b6;
        t7 += v * b7;
        t8 += v * b8;
        t9 += v * b9;
        t10 += v * b10;
        t11 += v * b11;
        t12 += v * b12;
        t13 += v * b13;
        t14 += v * b14;
        t15 += v * b15;
        v = a[1];
        t1 += v * b0;
        t2 += v * b1;
        t3 += v * b2;
        t4 += v * b3;
        t5 += v * b4;
        t6 += v * b5;
        t7 += v * b6;
        t8 += v * b7;
        t9 += v * b8;
        t10 += v * b9;
        t11 += v * b10;
        t12 += v * b11;
        t13 += v * b12;
        t14 += v * b13;
        t15 += v * b14;
        t16 += v * b15;
        v = a[2];
        t2 += v * b0;
        t3 += v * b1;
        t4 += v * b2;
        t5 += v * b3;
        t6 += v * b4;
        t7 += v * b5;
        t8 += v * b6;
        t9 += v * b7;
        t10 += v * b8;
        t11 += v * b9;
        t12 += v * b10;
        t13 += v * b11;
        t14 += v * b12;
        t15 += v * b13;
        t16 += v * b14;
        t17 += v * b15;
        v = a[3];
        t3 += v * b0;
        t4 += v * b1;
        t5 += v * b2;
        t6 += v * b3;
        t7 += v * b4;
        t8 += v * b5;
        t9 += v * b6;
        t10 += v * b7;
        t11 += v * b8;
        t12 += v * b9;
        t13 += v * b10;
        t14 += v * b11;
        t15 += v * b12;
        t16 += v * b13;
        t17 += v * b14;
        t18 += v * b15;
        v = a[4];
        t4 += v * b0;
        t5 += v * b1;
        t6 += v * b2;
        t7 += v * b3;
        t8 += v * b4;
        t9 += v * b5;
        t10 += v * b6;
        t11 += v * b7;
        t12 += v * b8;
        t13 += v * b9;
        t14 += v * b10;
        t15 += v * b11;
        t16 += v * b12;
        t17 += v * b13;
        t18 += v * b14;
        t19 += v * b15;
        v = a[5];
        t5 += v * b0;
        t6 += v * b1;
        t7 += v * b2;
        t8 += v * b3;
        t9 += v * b4;
        t10 += v * b5;
        t11 += v * b6;
        t12 += v * b7;
        t13 += v * b8;
        t14 += v * b9;
        t15 += v * b10;
        t16 += v * b11;
        t17 += v * b12;
        t18 += v * b13;
        t19 += v * b14;
        t20 += v * b15;
        v = a[6];
        t6 += v * b0;
        t7 += v * b1;
        t8 += v * b2;
        t9 += v * b3;
        t10 += v * b4;
        t11 += v * b5;
        t12 += v * b6;
        t13 += v * b7;
        t14 += v * b8;
        t15 += v * b9;
        t16 += v * b10;
        t17 += v * b11;
        t18 += v * b12;
        t19 += v * b13;
        t20 += v * b14;
        t21 += v * b15;
        v = a[7];
        t7 += v * b0;
        t8 += v * b1;
        t9 += v * b2;
        t10 += v * b3;
        t11 += v * b4;
        t12 += v * b5;
        t13 += v * b6;
        t14 += v * b7;
        t15 += v * b8;
        t16 += v * b9;
        t17 += v * b10;
        t18 += v * b11;
        t19 += v * b12;
        t20 += v * b13;
        t21 += v * b14;
        t22 += v * b15;
        v = a[8];
        t8 += v * b0;
        t9 += v * b1;
        t10 += v * b2;
        t11 += v * b3;
        t12 += v * b4;
        t13 += v * b5;
        t14 += v * b6;
        t15 += v * b7;
        t16 += v * b8;
        t17 += v * b9;
        t18 += v * b10;
        t19 += v * b11;
        t20 += v * b12;
        t21 += v * b13;
        t22 += v * b14;
        t23 += v * b15;
        v = a[9];
        t9 += v * b0;
        t10 += v * b1;
        t11 += v * b2;
        t12 += v * b3;
        t13 += v * b4;
        t14 += v * b5;
        t15 += v * b6;
        t16 += v * b7;
        t17 += v * b8;
        t18 += v * b9;
        t19 += v * b10;
        t20 += v * b11;
        t21 += v * b12;
        t22 += v * b13;
        t23 += v * b14;
        t24 += v * b15;
        v = a[10];
        t10 += v * b0;
        t11 += v * b1;
        t12 += v * b2;
        t13 += v * b3;
        t14 += v * b4;
        t15 += v * b5;
        t16 += v * b6;
        t17 += v * b7;
        t18 += v * b8;
        t19 += v * b9;
        t20 += v * b10;
        t21 += v * b11;
        t22 += v * b12;
        t23 += v * b13;
        t24 += v * b14;
        t25 += v * b15;
        v = a[11];
        t11 += v * b0;
        t12 += v * b1;
        t13 += v * b2;
        t14 += v * b3;
        t15 += v * b4;
        t16 += v * b5;
        t17 += v * b6;
        t18 += v * b7;
        t19 += v * b8;
        t20 += v * b9;
        t21 += v * b10;
        t22 += v * b11;
        t23 += v * b12;
        t24 += v * b13;
        t25 += v * b14;
        t26 += v * b15;
        v = a[12];
        t12 += v * b0;
        t13 += v * b1;
        t14 += v * b2;
        t15 += v * b3;
        t16 += v * b4;
        t17 += v * b5;
        t18 += v * b6;
        t19 += v * b7;
        t20 += v * b8;
        t21 += v * b9;
        t22 += v * b10;
        t23 += v * b11;
        t24 += v * b12;
        t25 += v * b13;
        t26 += v * b14;
        t27 += v * b15;
        v = a[13];
        t13 += v * b0;
        t14 += v * b1;
        t15 += v * b2;
        t16 += v * b3;
        t17 += v * b4;
        t18 += v * b5;
        t19 += v * b6;
        t20 += v * b7;
        t21 += v * b8;
        t22 += v * b9;
        t23 += v * b10;
        t24 += v * b11;
        t25 += v * b12;
        t26 += v * b13;
        t27 += v * b14;
        t28 += v * b15;
        v = a[14];
        t14 += v * b0;
        t15 += v * b1;
        t16 += v * b2;
        t17 += v * b3;
        t18 += v * b4;
        t19 += v * b5;
        t20 += v * b6;
        t21 += v * b7;
        t22 += v * b8;
        t23 += v * b9;
        t24 += v * b10;
        t25 += v * b11;
        t26 += v * b12;
        t27 += v * b13;
        t28 += v * b14;
        t29 += v * b15;
        v = a[15];
        t15 += v * b0;
        t16 += v * b1;
        t17 += v * b2;
        t18 += v * b3;
        t19 += v * b4;
        t20 += v * b5;
        t21 += v * b6;
        t22 += v * b7;
        t23 += v * b8;
        t24 += v * b9;
        t25 += v * b10;
        t26 += v * b11;
        t27 += v * b12;
        t28 += v * b13;
        t29 += v * b14;
        t30 += v * b15;
        t0 += 38 * t16;
        t1 += 38 * t17;
        t2 += 38 * t18;
        t3 += 38 * t19;
        t4 += 38 * t20;
        t5 += 38 * t21;
        t6 += 38 * t22;
        t7 += 38 * t23;
        t8 += 38 * t24;
        t9 += 38 * t25;
        t10 += 38 * t26;
        t11 += 38 * t27;
        t12 += 38 * t28;
        t13 += 38 * t29;
        t14 += 38 * t30;
        // t15 left as is
        // first car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        // second car
        c = 1;
        v = t0 + c + 65535;
        c = Math.floor(v / 65536);
        t0 = v - c * 65536;
        v = t1 + c + 65535;
        c = Math.floor(v / 65536);
        t1 = v - c * 65536;
        v = t2 + c + 65535;
        c = Math.floor(v / 65536);
        t2 = v - c * 65536;
        v = t3 + c + 65535;
        c = Math.floor(v / 65536);
        t3 = v - c * 65536;
        v = t4 + c + 65535;
        c = Math.floor(v / 65536);
        t4 = v - c * 65536;
        v = t5 + c + 65535;
        c = Math.floor(v / 65536);
        t5 = v - c * 65536;
        v = t6 + c + 65535;
        c = Math.floor(v / 65536);
        t6 = v - c * 65536;
        v = t7 + c + 65535;
        c = Math.floor(v / 65536);
        t7 = v - c * 65536;
        v = t8 + c + 65535;
        c = Math.floor(v / 65536);
        t8 = v - c * 65536;
        v = t9 + c + 65535;
        c = Math.floor(v / 65536);
        t9 = v - c * 65536;
        v = t10 + c + 65535;
        c = Math.floor(v / 65536);
        t10 = v - c * 65536;
        v = t11 + c + 65535;
        c = Math.floor(v / 65536);
        t11 = v - c * 65536;
        v = t12 + c + 65535;
        c = Math.floor(v / 65536);
        t12 = v - c * 65536;
        v = t13 + c + 65535;
        c = Math.floor(v / 65536);
        t13 = v - c * 65536;
        v = t14 + c + 65535;
        c = Math.floor(v / 65536);
        t14 = v - c * 65536;
        v = t15 + c + 65535;
        c = Math.floor(v / 65536);
        t15 = v - c * 65536;
        t0 += c - 1 + 37 * (c - 1);
        o[0] = t0;
        o[1] = t1;
        o[2] = t2;
        o[3] = t3;
        o[4] = t4;
        o[5] = t5;
        o[6] = t6;
        o[7] = t7;
        o[8] = t8;
        o[9] = t9;
        o[10] = t10;
        o[11] = t11;
        o[12] = t12;
        o[13] = t13;
        o[14] = t14;
        o[15] = t15;
    }
    function S(o, a) {
        M(o, a, a);
    }
    function inv25519(o, i) {
        var c = gf();
        var a;
        for(a = 0; a < 16; a++)c[a] = i[a];
        for(a = 253; a >= 0; a--){
            S(c, c);
            if (a !== 2 && a !== 4) M(c, c, i);
        }
        for(a = 0; a < 16; a++)o[a] = c[a];
    }
    function pow2523(o, i) {
        var c = gf();
        var a;
        for(a = 0; a < 16; a++)c[a] = i[a];
        for(a = 250; a >= 0; a--){
            S(c, c);
            if (a !== 1) M(c, c, i);
        }
        for(a = 0; a < 16; a++)o[a] = c[a];
    }
    function crypto_scalarmult(q, n, p) {
        var z = new Uint8Array(32);
        var x = new Float64Array(80), r, i;
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf();
        for(i = 0; i < 31; i++)z[i] = n[i];
        z[31] = n[31] & 127 | 64;
        z[0] &= 248;
        unpack25519(x, p);
        for(i = 0; i < 16; i++){
            b[i] = x[i];
            d[i] = a[i] = c[i] = 0;
        }
        a[0] = d[0] = 1;
        for(i = 254; i >= 0; --i){
            r = z[i >>> 3] >>> (i & 7) & 1;
            sel25519(a, b, r);
            sel25519(c, d, r);
            A(e, a, c);
            Z(a, a, c);
            A(c, b, d);
            Z(b, b, d);
            S(d, e);
            S(f, a);
            M(a, c, a);
            M(c, b, e);
            A(e, a, c);
            Z(a, a, c);
            S(b, a);
            Z(c, d, f);
            M(a, c, _121665);
            A(a, a, d);
            M(c, c, a);
            M(a, d, f);
            M(d, b, x);
            S(b, e);
            sel25519(a, b, r);
            sel25519(c, d, r);
        }
        for(i = 0; i < 16; i++){
            x[i + 16] = a[i];
            x[i + 32] = c[i];
            x[i + 48] = b[i];
            x[i + 64] = d[i];
        }
        var x32 = x.subarray(32);
        var x16 = x.subarray(16);
        inv25519(x32, x32);
        M(x16, x16, x32);
        pack25519(q, x16);
        return 0;
    }
    function crypto_scalarmult_base(q, n) {
        return crypto_scalarmult(q, n, _9);
    }
    function crypto_box_keypair(y, x) {
        randombytes(x, 32);
        return crypto_scalarmult_base(y, x);
    }
    function crypto_box_beforenm(k, y, x) {
        var s = new Uint8Array(32);
        crypto_scalarmult(s, x, y);
        return crypto_core_hsalsa20(k, _0, s, sigma);
    }
    var crypto_box_afternm = crypto_secretbox;
    var crypto_box_open_afternm = crypto_secretbox_open;
    function crypto_box(c, m, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_afternm(c, m, d, n, k);
    }
    function crypto_box_open(m, c, d, n, y, x) {
        var k = new Uint8Array(32);
        crypto_box_beforenm(k, y, x);
        return crypto_box_open_afternm(m, c, d, n, k);
    }
    var K = [
        1116352408,
        3609767458,
        1899447441,
        602891725,
        3049323471,
        3964484399,
        3921009573,
        2173295548,
        961987163,
        4081628472,
        1508970993,
        3053834265,
        2453635748,
        2937671579,
        2870763221,
        3664609560,
        3624381080,
        2734883394,
        310598401,
        1164996542,
        607225278,
        1323610764,
        1426881987,
        3590304994,
        1925078388,
        4068182383,
        2162078206,
        991336113,
        2614888103,
        633803317,
        3248222580,
        3479774868,
        3835390401,
        2666613458,
        4022224774,
        944711139,
        264347078,
        2341262773,
        604807628,
        2007800933,
        770255983,
        1495990901,
        1249150122,
        1856431235,
        1555081692,
        3175218132,
        1996064986,
        2198950837,
        2554220882,
        3999719339,
        2821834349,
        766784016,
        2952996808,
        2566594879,
        3210313671,
        3203337956,
        3336571891,
        1034457026,
        3584528711,
        2466948901,
        113926993,
        3758326383,
        338241895,
        168717936,
        666307205,
        1188179964,
        773529912,
        1546045734,
        1294757372,
        1522805485,
        1396182291,
        2643833823,
        1695183700,
        2343527390,
        1986661051,
        1014477480,
        2177026350,
        1206759142,
        2456956037,
        344077627,
        2730485921,
        1290863460,
        2820302411,
        3158454273,
        3259730800,
        3505952657,
        3345764771,
        106217008,
        3516065817,
        3606008344,
        3600352804,
        1432725776,
        4094571909,
        1467031594,
        275423344,
        851169720,
        430227734,
        3100823752,
        506948616,
        1363258195,
        659060556,
        3750685593,
        883997877,
        3785050280,
        958139571,
        3318307427,
        1322822218,
        3812723403,
        1537002063,
        2003034995,
        1747873779,
        3602036899,
        1955562222,
        1575990012,
        2024104815,
        1125592928,
        2227730452,
        2716904306,
        2361852424,
        442776044,
        2428436474,
        593698344,
        2756734187,
        3733110249,
        3204031479,
        2999351573,
        3329325298,
        3815920427,
        3391569614,
        3928383900,
        3515267271,
        566280711,
        3940187606,
        3454069534,
        4118630271,
        4000239992,
        116418474,
        1914138554,
        174292421,
        2731055270,
        289380356,
        3203993006,
        460393269,
        320620315,
        685471733,
        587496836,
        852142971,
        1086792851,
        1017036298,
        365543100,
        1126000580,
        2618297676,
        1288033470,
        3409855158,
        1501505948,
        4234509866,
        1607167915,
        987167468,
        1816402316,
        1246189591
    ];
    function crypto_hashblocks_hl(hh, hl, m, n) {
        var wh = new Int32Array(16), wl = new Int32Array(16), bh0, bh1, bh2, bh3, bh4, bh5, bh6, bh7, bl0, bl1, bl2, bl3, bl4, bl5, bl6, bl7, th, tl, i, j, h, l, a, b, c, d;
        var ah0 = hh[0], ah1 = hh[1], ah2 = hh[2], ah3 = hh[3], ah4 = hh[4], ah5 = hh[5], ah6 = hh[6], ah7 = hh[7], al0 = hl[0], al1 = hl[1], al2 = hl[2], al3 = hl[3], al4 = hl[4], al5 = hl[5], al6 = hl[6], al7 = hl[7];
        var pos = 0;
        while(n >= 128){
            for(i = 0; i < 16; i++){
                j = 8 * i + pos;
                wh[i] = m[j + 0] << 24 | m[j + 1] << 16 | m[j + 2] << 8 | m[j + 3];
                wl[i] = m[j + 4] << 24 | m[j + 5] << 16 | m[j + 6] << 8 | m[j + 7];
            }
            for(i = 0; i < 80; i++){
                bh0 = ah0;
                bh1 = ah1;
                bh2 = ah2;
                bh3 = ah3;
                bh4 = ah4;
                bh5 = ah5;
                bh6 = ah6;
                bh7 = ah7;
                bl0 = al0;
                bl1 = al1;
                bl2 = al2;
                bl3 = al3;
                bl4 = al4;
                bl5 = al5;
                bl6 = al6;
                bl7 = al7;
                // add
                h = ah7;
                l = al7;
                a = l & 65535;
                b = l >>> 16;
                c = h & 65535;
                d = h >>> 16;
                // Sigma1
                h = (ah4 >>> 14 | al4 << 18) ^ (ah4 >>> 18 | al4 << 14) ^ (al4 >>> 9 | ah4 << 23);
                l = (al4 >>> 14 | ah4 << 18) ^ (al4 >>> 18 | ah4 << 14) ^ (ah4 >>> 9 | al4 << 23);
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                // Ch
                h = ah4 & ah5 ^ ~ah4 & ah6;
                l = al4 & al5 ^ ~al4 & al6;
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                // K
                h = K[i * 2];
                l = K[i * 2 + 1];
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                // w
                h = wh[i % 16];
                l = wl[i % 16];
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                th = c & 65535 | d << 16;
                tl = a & 65535 | b << 16;
                // add
                h = th;
                l = tl;
                a = l & 65535;
                b = l >>> 16;
                c = h & 65535;
                d = h >>> 16;
                // Sigma0
                h = (ah0 >>> 28 | al0 << 4) ^ (al0 >>> 2 | ah0 << 30) ^ (al0 >>> 7 | ah0 << 25);
                l = (al0 >>> 28 | ah0 << 4) ^ (ah0 >>> 2 | al0 << 30) ^ (ah0 >>> 7 | al0 << 25);
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                // Maj
                h = ah0 & ah1 ^ ah0 & ah2 ^ ah1 & ah2;
                l = al0 & al1 ^ al0 & al2 ^ al1 & al2;
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh7 = c & 65535 | d << 16;
                bl7 = a & 65535 | b << 16;
                // add
                h = bh3;
                l = bl3;
                a = l & 65535;
                b = l >>> 16;
                c = h & 65535;
                d = h >>> 16;
                h = th;
                l = tl;
                a += l & 65535;
                b += l >>> 16;
                c += h & 65535;
                d += h >>> 16;
                b += a >>> 16;
                c += b >>> 16;
                d += c >>> 16;
                bh3 = c & 65535 | d << 16;
                bl3 = a & 65535 | b << 16;
                ah1 = bh0;
                ah2 = bh1;
                ah3 = bh2;
                ah4 = bh3;
                ah5 = bh4;
                ah6 = bh5;
                ah7 = bh6;
                ah0 = bh7;
                al1 = bl0;
                al2 = bl1;
                al3 = bl2;
                al4 = bl3;
                al5 = bl4;
                al6 = bl5;
                al7 = bl6;
                al0 = bl7;
                if (i % 16 === 15) for(j = 0; j < 16; j++){
                    // add
                    h = wh[j];
                    l = wl[j];
                    a = l & 65535;
                    b = l >>> 16;
                    c = h & 65535;
                    d = h >>> 16;
                    h = wh[(j + 9) % 16];
                    l = wl[(j + 9) % 16];
                    a += l & 65535;
                    b += l >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    // sigma0
                    th = wh[(j + 1) % 16];
                    tl = wl[(j + 1) % 16];
                    h = (th >>> 1 | tl << 31) ^ (th >>> 8 | tl << 24) ^ th >>> 7;
                    l = (tl >>> 1 | th << 31) ^ (tl >>> 8 | th << 24) ^ (tl >>> 7 | th << 25);
                    a += l & 65535;
                    b += l >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    // sigma1
                    th = wh[(j + 14) % 16];
                    tl = wl[(j + 14) % 16];
                    h = (th >>> 19 | tl << 13) ^ (tl >>> 29 | th << 3) ^ th >>> 6;
                    l = (tl >>> 19 | th << 13) ^ (th >>> 29 | tl << 3) ^ (tl >>> 6 | th << 26);
                    a += l & 65535;
                    b += l >>> 16;
                    c += h & 65535;
                    d += h >>> 16;
                    b += a >>> 16;
                    c += b >>> 16;
                    d += c >>> 16;
                    wh[j] = c & 65535 | d << 16;
                    wl[j] = a & 65535 | b << 16;
                }
            }
            // add
            h = ah0;
            l = al0;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[0];
            l = hl[0];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[0] = ah0 = c & 65535 | d << 16;
            hl[0] = al0 = a & 65535 | b << 16;
            h = ah1;
            l = al1;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[1];
            l = hl[1];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[1] = ah1 = c & 65535 | d << 16;
            hl[1] = al1 = a & 65535 | b << 16;
            h = ah2;
            l = al2;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[2];
            l = hl[2];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[2] = ah2 = c & 65535 | d << 16;
            hl[2] = al2 = a & 65535 | b << 16;
            h = ah3;
            l = al3;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[3];
            l = hl[3];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[3] = ah3 = c & 65535 | d << 16;
            hl[3] = al3 = a & 65535 | b << 16;
            h = ah4;
            l = al4;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[4];
            l = hl[4];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[4] = ah4 = c & 65535 | d << 16;
            hl[4] = al4 = a & 65535 | b << 16;
            h = ah5;
            l = al5;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[5];
            l = hl[5];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[5] = ah5 = c & 65535 | d << 16;
            hl[5] = al5 = a & 65535 | b << 16;
            h = ah6;
            l = al6;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[6];
            l = hl[6];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[6] = ah6 = c & 65535 | d << 16;
            hl[6] = al6 = a & 65535 | b << 16;
            h = ah7;
            l = al7;
            a = l & 65535;
            b = l >>> 16;
            c = h & 65535;
            d = h >>> 16;
            h = hh[7];
            l = hl[7];
            a += l & 65535;
            b += l >>> 16;
            c += h & 65535;
            d += h >>> 16;
            b += a >>> 16;
            c += b >>> 16;
            d += c >>> 16;
            hh[7] = ah7 = c & 65535 | d << 16;
            hl[7] = al7 = a & 65535 | b << 16;
            pos += 128;
            n -= 128;
        }
        return n;
    }
    function crypto_hash(out, m, n) {
        var hh = new Int32Array(8), hl = new Int32Array(8), x = new Uint8Array(256), i, b = n;
        hh[0] = 1779033703;
        hh[1] = 3144134277;
        hh[2] = 1013904242;
        hh[3] = 2773480762;
        hh[4] = 1359893119;
        hh[5] = 2600822924;
        hh[6] = 528734635;
        hh[7] = 1541459225;
        hl[0] = 4089235720;
        hl[1] = 2227873595;
        hl[2] = 4271175723;
        hl[3] = 1595750129;
        hl[4] = 2917565137;
        hl[5] = 725511199;
        hl[6] = 4215389547;
        hl[7] = 327033209;
        crypto_hashblocks_hl(hh, hl, m, n);
        n %= 128;
        for(i = 0; i < n; i++)x[i] = m[b - n + i];
        x[n] = 128;
        n = 256 - 128 * (n < 112 ? 1 : 0);
        x[n - 9] = 0;
        ts64(x, n - 8, b / 536870912 | 0, b << 3);
        crypto_hashblocks_hl(hh, hl, x, n);
        for(i = 0; i < 8; i++)ts64(out, 8 * i, hh[i], hl[i]);
        return 0;
    }
    function add(p, q) {
        var a = gf(), b = gf(), c = gf(), d = gf(), e = gf(), f = gf(), g = gf(), h = gf(), t = gf();
        Z(a, p[1], p[0]);
        Z(t, q[1], q[0]);
        M(a, a, t);
        A(b, p[0], p[1]);
        A(t, q[0], q[1]);
        M(b, b, t);
        M(c, p[3], q[3]);
        M(c, c, D2);
        M(d, p[2], q[2]);
        A(d, d, d);
        Z(e, b, a);
        Z(f, d, c);
        A(g, d, c);
        A(h, b, a);
        M(p[0], e, f);
        M(p[1], h, g);
        M(p[2], g, f);
        M(p[3], e, h);
    }
    function cswap(p, q, b) {
        var i;
        for(i = 0; i < 4; i++)sel25519(p[i], q[i], b);
    }
    function pack(r, p) {
        var tx = gf(), ty = gf(), zi = gf();
        inv25519(zi, p[2]);
        M(tx, p[0], zi);
        M(ty, p[1], zi);
        pack25519(r, ty);
        r[31] ^= par25519(tx) << 7;
    }
    function scalarmult(p, q, s) {
        var b, i;
        set25519(p[0], gf0);
        set25519(p[1], gf1);
        set25519(p[2], gf1);
        set25519(p[3], gf0);
        for(i = 255; i >= 0; --i){
            b = s[i / 8 | 0] >> (i & 7) & 1;
            cswap(p, q, b);
            add(q, p);
            add(p, p);
            cswap(p, q, b);
        }
    }
    function scalarbase(p, s) {
        var q = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        set25519(q[0], X);
        set25519(q[1], Y);
        set25519(q[2], gf1);
        M(q[3], X, Y);
        scalarmult(p, q, s);
    }
    function crypto_sign_keypair(pk, sk, seeded) {
        var d = new Uint8Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        var i;
        if (!seeded) randombytes(sk, 32);
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        scalarbase(p, d);
        pack(pk, p);
        for(i = 0; i < 32; i++)sk[i + 32] = pk[i];
        return 0;
    }
    var L = new Float64Array([
        237,
        211,
        245,
        92,
        26,
        99,
        18,
        88,
        214,
        156,
        247,
        162,
        222,
        249,
        222,
        20,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        0,
        16
    ]);
    function modL(r, x) {
        var carry, i, j, k;
        for(i = 63; i >= 32; --i){
            carry = 0;
            for(j = i - 32, k = i - 12; j < k; ++j){
                x[j] += carry - 16 * x[i] * L[j - (i - 32)];
                carry = Math.floor((x[j] + 128) / 256);
                x[j] -= carry * 256;
            }
            x[j] += carry;
            x[i] = 0;
        }
        carry = 0;
        for(j = 0; j < 32; j++){
            x[j] += carry - (x[31] >> 4) * L[j];
            carry = x[j] >> 8;
            x[j] &= 255;
        }
        for(j = 0; j < 32; j++)x[j] -= carry * L[j];
        for(i = 0; i < 32; i++){
            x[i + 1] += x[i] >> 8;
            r[i] = x[i] & 255;
        }
    }
    function reduce(r) {
        var x = new Float64Array(64), i;
        for(i = 0; i < 64; i++)x[i] = r[i];
        for(i = 0; i < 64; i++)r[i] = 0;
        modL(r, x);
    }
    // Note: difference from C - smlen returned, not passed as argument.
    function crypto_sign(sm, m, n, sk) {
        var d = new Uint8Array(64), h = new Uint8Array(64), r = new Uint8Array(64);
        var i, j, x = new Float64Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        crypto_hash(d, sk, 32);
        d[0] &= 248;
        d[31] &= 127;
        d[31] |= 64;
        var smlen = n + 64;
        for(i = 0; i < n; i++)sm[64 + i] = m[i];
        for(i = 0; i < 32; i++)sm[32 + i] = d[32 + i];
        crypto_hash(r, sm.subarray(32), n + 32);
        reduce(r);
        scalarbase(p, r);
        pack(sm, p);
        for(i = 32; i < 64; i++)sm[i] = sk[i];
        crypto_hash(h, sm, n + 64);
        reduce(h);
        for(i = 0; i < 64; i++)x[i] = 0;
        for(i = 0; i < 32; i++)x[i] = r[i];
        for(i = 0; i < 32; i++)for(j = 0; j < 32; j++)x[i + j] += h[i] * d[j];
        modL(sm.subarray(32), x);
        return smlen;
    }
    function unpackneg(r, p) {
        var t = gf(), chk = gf(), num = gf(), den = gf(), den2 = gf(), den4 = gf(), den6 = gf();
        set25519(r[2], gf1);
        unpack25519(r[1], p);
        S(num, r[1]);
        M(den, num, D);
        Z(num, num, r[2]);
        A(den, r[2], den);
        S(den2, den);
        S(den4, den2);
        M(den6, den4, den2);
        M(t, den6, num);
        M(t, t, den);
        pow2523(t, t);
        M(t, t, num);
        M(t, t, den);
        M(t, t, den);
        M(r[0], t, den);
        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) M(r[0], r[0], I);
        S(chk, r[0]);
        M(chk, chk, den);
        if (neq25519(chk, num)) return -1;
        if (par25519(r[0]) === p[31] >> 7) Z(r[0], gf0, r[0]);
        M(r[3], r[0], r[1]);
        return 0;
    }
    function crypto_sign_open(m, sm, n, pk) {
        var i;
        var t = new Uint8Array(32), h = new Uint8Array(64);
        var p = [
            gf(),
            gf(),
            gf(),
            gf()
        ], q = [
            gf(),
            gf(),
            gf(),
            gf()
        ];
        if (n < 64) return -1;
        if (unpackneg(q, pk)) return -1;
        for(i = 0; i < n; i++)m[i] = sm[i];
        for(i = 0; i < 32; i++)m[i + 32] = pk[i];
        crypto_hash(h, m, n);
        reduce(h);
        scalarmult(p, q, h);
        scalarbase(q, sm.subarray(32));
        add(p, q);
        pack(t, p);
        n -= 64;
        if (crypto_verify_32(sm, 0, t, 0)) {
            for(i = 0; i < n; i++)m[i] = 0;
            return -1;
        }
        for(i = 0; i < n; i++)m[i] = sm[i + 64];
        return n;
    }
    var crypto_secretbox_KEYBYTES = 32, crypto_secretbox_NONCEBYTES = 24, crypto_secretbox_ZEROBYTES = 32, crypto_secretbox_BOXZEROBYTES = 16, crypto_scalarmult_BYTES = 32, crypto_scalarmult_SCALARBYTES = 32, crypto_box_PUBLICKEYBYTES = 32, crypto_box_SECRETKEYBYTES = 32, crypto_box_BEFORENMBYTES = 32, crypto_box_NONCEBYTES = crypto_secretbox_NONCEBYTES, crypto_box_ZEROBYTES = crypto_secretbox_ZEROBYTES, crypto_box_BOXZEROBYTES = crypto_secretbox_BOXZEROBYTES, crypto_sign_BYTES = 64, crypto_sign_PUBLICKEYBYTES = 32, crypto_sign_SECRETKEYBYTES = 64, crypto_sign_SEEDBYTES = 32, crypto_hash_BYTES = 64;
    nacl.lowlevel = {
        crypto_core_hsalsa20: crypto_core_hsalsa20,
        crypto_stream_xor: crypto_stream_xor,
        crypto_stream: crypto_stream,
        crypto_stream_salsa20_xor: crypto_stream_salsa20_xor,
        crypto_stream_salsa20: crypto_stream_salsa20,
        crypto_onetimeauth: crypto_onetimeauth,
        crypto_onetimeauth_verify: crypto_onetimeauth_verify,
        crypto_verify_16: crypto_verify_16,
        crypto_verify_32: crypto_verify_32,
        crypto_secretbox: crypto_secretbox,
        crypto_secretbox_open: crypto_secretbox_open,
        crypto_scalarmult: crypto_scalarmult,
        crypto_scalarmult_base: crypto_scalarmult_base,
        crypto_box_beforenm: crypto_box_beforenm,
        crypto_box_afternm: crypto_box_afternm,
        crypto_box: crypto_box,
        crypto_box_open: crypto_box_open,
        crypto_box_keypair: crypto_box_keypair,
        crypto_hash: crypto_hash,
        crypto_sign: crypto_sign,
        crypto_sign_keypair: crypto_sign_keypair,
        crypto_sign_open: crypto_sign_open,
        crypto_secretbox_KEYBYTES: crypto_secretbox_KEYBYTES,
        crypto_secretbox_NONCEBYTES: crypto_secretbox_NONCEBYTES,
        crypto_secretbox_ZEROBYTES: crypto_secretbox_ZEROBYTES,
        crypto_secretbox_BOXZEROBYTES: crypto_secretbox_BOXZEROBYTES,
        crypto_scalarmult_BYTES: crypto_scalarmult_BYTES,
        crypto_scalarmult_SCALARBYTES: crypto_scalarmult_SCALARBYTES,
        crypto_box_PUBLICKEYBYTES: crypto_box_PUBLICKEYBYTES,
        crypto_box_SECRETKEYBYTES: crypto_box_SECRETKEYBYTES,
        crypto_box_BEFORENMBYTES: crypto_box_BEFORENMBYTES,
        crypto_box_NONCEBYTES: crypto_box_NONCEBYTES,
        crypto_box_ZEROBYTES: crypto_box_ZEROBYTES,
        crypto_box_BOXZEROBYTES: crypto_box_BOXZEROBYTES,
        crypto_sign_BYTES: crypto_sign_BYTES,
        crypto_sign_PUBLICKEYBYTES: crypto_sign_PUBLICKEYBYTES,
        crypto_sign_SECRETKEYBYTES: crypto_sign_SECRETKEYBYTES,
        crypto_sign_SEEDBYTES: crypto_sign_SEEDBYTES,
        crypto_hash_BYTES: crypto_hash_BYTES,
        gf: gf,
        D: D,
        L: L,
        pack25519: pack25519,
        unpack25519: unpack25519,
        M: M,
        A: A,
        S: S,
        Z: Z,
        pow2523: pow2523,
        add: add,
        set25519: set25519,
        modL: modL,
        scalarmult: scalarmult,
        scalarbase: scalarbase
    };
    /* High-level API */ function checkLengths(k, n) {
        if (k.length !== crypto_secretbox_KEYBYTES) throw new Error('bad key size');
        if (n.length !== crypto_secretbox_NONCEBYTES) throw new Error('bad nonce size');
    }
    function checkBoxLengths(pk, sk) {
        if (pk.length !== crypto_box_PUBLICKEYBYTES) throw new Error('bad public key size');
        if (sk.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
    }
    function checkArrayTypes() {
        for(var i = 0; i < arguments.length; i++){
            if (!(arguments[i] instanceof Uint8Array)) throw new TypeError('unexpected type, use Uint8Array');
        }
    }
    function cleanup(arr) {
        for(var i = 0; i < arr.length; i++)arr[i] = 0;
    }
    nacl.randomBytes = function(n) {
        var b = new Uint8Array(n);
        randombytes(b, n);
        return b;
    };
    nacl.secretbox = function(msg, nonce, key) {
        checkArrayTypes(msg, nonce, key);
        checkLengths(key, nonce);
        var m = new Uint8Array(crypto_secretbox_ZEROBYTES + msg.length);
        var c = new Uint8Array(m.length);
        for(var i = 0; i < msg.length; i++)m[i + crypto_secretbox_ZEROBYTES] = msg[i];
        crypto_secretbox(c, m, m.length, nonce, key);
        return c.subarray(crypto_secretbox_BOXZEROBYTES);
    };
    nacl.secretbox.open = function(box, nonce, key) {
        checkArrayTypes(box, nonce, key);
        checkLengths(key, nonce);
        var c = new Uint8Array(crypto_secretbox_BOXZEROBYTES + box.length);
        var m = new Uint8Array(c.length);
        for(var i = 0; i < box.length; i++)c[i + crypto_secretbox_BOXZEROBYTES] = box[i];
        if (c.length < 32) return null;
        if (crypto_secretbox_open(m, c, c.length, nonce, key) !== 0) return null;
        return m.subarray(crypto_secretbox_ZEROBYTES);
    };
    nacl.secretbox.keyLength = crypto_secretbox_KEYBYTES;
    nacl.secretbox.nonceLength = crypto_secretbox_NONCEBYTES;
    nacl.secretbox.overheadLength = crypto_secretbox_BOXZEROBYTES;
    nacl.scalarMult = function(n, p) {
        checkArrayTypes(n, p);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
        if (p.length !== crypto_scalarmult_BYTES) throw new Error('bad p size');
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult(q, n, p);
        return q;
    };
    nacl.scalarMult.base = function(n) {
        checkArrayTypes(n);
        if (n.length !== crypto_scalarmult_SCALARBYTES) throw new Error('bad n size');
        var q = new Uint8Array(crypto_scalarmult_BYTES);
        crypto_scalarmult_base(q, n);
        return q;
    };
    nacl.scalarMult.scalarLength = crypto_scalarmult_SCALARBYTES;
    nacl.scalarMult.groupElementLength = crypto_scalarmult_BYTES;
    nacl.box = function(msg, nonce, publicKey, secretKey) {
        var k = nacl.box.before(publicKey, secretKey);
        return nacl.secretbox(msg, nonce, k);
    };
    nacl.box.before = function(publicKey, secretKey) {
        checkArrayTypes(publicKey, secretKey);
        checkBoxLengths(publicKey, secretKey);
        var k = new Uint8Array(crypto_box_BEFORENMBYTES);
        crypto_box_beforenm(k, publicKey, secretKey);
        return k;
    };
    nacl.box.after = nacl.secretbox;
    nacl.box.open = function(msg, nonce, publicKey, secretKey) {
        var k = nacl.box.before(publicKey, secretKey);
        return nacl.secretbox.open(msg, nonce, k);
    };
    nacl.box.open.after = nacl.secretbox.open;
    nacl.box.keyPair = function() {
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_box_SECRETKEYBYTES);
        crypto_box_keypair(pk, sk);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.box.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_box_SECRETKEYBYTES) throw new Error('bad secret key size');
        var pk = new Uint8Array(crypto_box_PUBLICKEYBYTES);
        crypto_scalarmult_base(pk, secretKey);
        return {
            publicKey: pk,
            secretKey: new Uint8Array(secretKey)
        };
    };
    nacl.box.publicKeyLength = crypto_box_PUBLICKEYBYTES;
    nacl.box.secretKeyLength = crypto_box_SECRETKEYBYTES;
    nacl.box.sharedKeyLength = crypto_box_BEFORENMBYTES;
    nacl.box.nonceLength = crypto_box_NONCEBYTES;
    nacl.box.overheadLength = nacl.secretbox.overheadLength;
    nacl.sign = function(msg, secretKey) {
        checkArrayTypes(msg, secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
        var signedMsg = new Uint8Array(crypto_sign_BYTES + msg.length);
        crypto_sign(signedMsg, msg, msg.length, secretKey);
        return signedMsg;
    };
    nacl.sign.open = function(signedMsg, publicKey) {
        checkArrayTypes(signedMsg, publicKey);
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
        var tmp = new Uint8Array(signedMsg.length);
        var mlen = crypto_sign_open(tmp, signedMsg, signedMsg.length, publicKey);
        if (mlen < 0) return null;
        var m = new Uint8Array(mlen);
        for(var i = 0; i < m.length; i++)m[i] = tmp[i];
        return m;
    };
    nacl.sign.detached = function(msg, secretKey) {
        var signedMsg = nacl.sign(msg, secretKey);
        var sig = new Uint8Array(crypto_sign_BYTES);
        for(var i = 0; i < sig.length; i++)sig[i] = signedMsg[i];
        return sig;
    };
    nacl.sign.detached.verify = function(msg, sig, publicKey) {
        checkArrayTypes(msg, sig, publicKey);
        if (sig.length !== crypto_sign_BYTES) throw new Error('bad signature size');
        if (publicKey.length !== crypto_sign_PUBLICKEYBYTES) throw new Error('bad public key size');
        var sm = new Uint8Array(crypto_sign_BYTES + msg.length);
        var m = new Uint8Array(crypto_sign_BYTES + msg.length);
        var i;
        for(i = 0; i < crypto_sign_BYTES; i++)sm[i] = sig[i];
        for(i = 0; i < msg.length; i++)sm[i + crypto_sign_BYTES] = msg[i];
        return crypto_sign_open(m, sm, sm.length, publicKey) >= 0;
    };
    nacl.sign.keyPair = function() {
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        crypto_sign_keypair(pk, sk);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.sign.keyPair.fromSecretKey = function(secretKey) {
        checkArrayTypes(secretKey);
        if (secretKey.length !== crypto_sign_SECRETKEYBYTES) throw new Error('bad secret key size');
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        for(var i = 0; i < pk.length; i++)pk[i] = secretKey[32 + i];
        return {
            publicKey: pk,
            secretKey: new Uint8Array(secretKey)
        };
    };
    nacl.sign.keyPair.fromSeed = function(seed) {
        checkArrayTypes(seed);
        if (seed.length !== crypto_sign_SEEDBYTES) throw new Error('bad seed size');
        var pk = new Uint8Array(crypto_sign_PUBLICKEYBYTES);
        var sk = new Uint8Array(crypto_sign_SECRETKEYBYTES);
        for(var i = 0; i < 32; i++)sk[i] = seed[i];
        crypto_sign_keypair(pk, sk, true);
        return {
            publicKey: pk,
            secretKey: sk
        };
    };
    nacl.sign.publicKeyLength = crypto_sign_PUBLICKEYBYTES;
    nacl.sign.secretKeyLength = crypto_sign_SECRETKEYBYTES;
    nacl.sign.seedLength = crypto_sign_SEEDBYTES;
    nacl.sign.signatureLength = crypto_sign_BYTES;
    nacl.hash = function(msg) {
        checkArrayTypes(msg);
        var h = new Uint8Array(crypto_hash_BYTES);
        crypto_hash(h, msg, msg.length);
        return h;
    };
    nacl.hash.hashLength = crypto_hash_BYTES;
    nacl.verify = function(x, y) {
        checkArrayTypes(x, y);
        // Zero length arguments are considered not equal.
        if (x.length === 0 || y.length === 0) return false;
        if (x.length !== y.length) return false;
        return vn(x, 0, y, 0, x.length) === 0 ? true : false;
    };
    nacl.setPRNG = function(fn) {
        randombytes = fn;
    };
    (function() {
        // Initialize PRNG if environment provides CSPRNG.
        // If not, methods calling randombytes will throw.
        var crypto = typeof self !== 'undefined' ? self.crypto || self.msCrypto : null;
        if (crypto && crypto.getRandomValues) {
            // Browsers.
            var QUOTA = 65536;
            nacl.setPRNG(function(x, n) {
                var i, v = new Uint8Array(n);
                for(i = 0; i < n; i += QUOTA)crypto.getRandomValues(v.subarray(i, i + Math.min(n - i, QUOTA)));
                for(i = 0; i < n; i++)x[i] = v[i];
                cleanup(v);
            });
        } else {
            // Node.js.
            crypto = (parcelRequire("lb6jJ"));
            if (crypto && crypto.randomBytes) nacl.setPRNG(function(x, n) {
                var i, v = crypto.randomBytes(n);
                for(i = 0; i < n; i++)x[i] = v[i];
                cleanup(v);
            });
        }
    })();
})(module.exports ? module.exports : self.nacl = self.nacl || {});

});

parcelRequire.register("ikzez", function(module, exports) {

var $lb6jJ = parcelRequire("lb6jJ");
var $d5856d04001a41c0$require$Buffer = $lb6jJ.Buffer;
// Written in 2014-2016 by Dmitry Chestnykh and Devi Mandiri.
// Public domain.
(function(root, f) {
    if (module.exports) module.exports = f();
    else if (root.nacl) root.nacl.util = f();
    else {
        root.nacl = {};
        root.nacl.util = f();
    }
})(module.exports, function() {
    'use strict';
    var util = {};
    function validateBase64(s) {
        if (!/^(?:[A-Za-z0-9+\/]{2}[A-Za-z0-9+\/]{2})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/.test(s)) throw new TypeError('invalid encoding');
    }
    util.decodeUTF8 = function(s) {
        if (typeof s !== 'string') throw new TypeError('expected string');
        var i, d = unescape(encodeURIComponent(s)), b = new Uint8Array(d.length);
        for(i = 0; i < d.length; i++)b[i] = d.charCodeAt(i);
        return b;
    };
    util.encodeUTF8 = function(arr) {
        var i, s = [];
        for(i = 0; i < arr.length; i++)s.push(String.fromCharCode(arr[i]));
        return decodeURIComponent(escape(s.join('')));
    };
    if (typeof atob === 'undefined') {
        // Node.js
        if (typeof $d5856d04001a41c0$require$Buffer.from !== 'undefined') {
            // Node v6 and later
            util.encodeBase64 = function(arr) {
                return $d5856d04001a41c0$require$Buffer.from(arr).toString('base64');
            };
            util.decodeBase64 = function(s) {
                validateBase64(s);
                return new Uint8Array(Array.prototype.slice.call($d5856d04001a41c0$require$Buffer.from(s, 'base64'), 0));
            };
        } else {
            // Node earlier than v6
            util.encodeBase64 = function(arr) {
                return new $d5856d04001a41c0$require$Buffer(arr).toString('base64');
            };
            util.decodeBase64 = function(s) {
                validateBase64(s);
                return new Uint8Array(Array.prototype.slice.call(new $d5856d04001a41c0$require$Buffer(s, 'base64'), 0));
            };
        }
    } else {
        // Browsers
        util.encodeBase64 = function(arr) {
            var i, s = [], len = arr.length;
            for(i = 0; i < len; i++)s.push(String.fromCharCode(arr[i]));
            return btoa(s.join(''));
        };
        util.decodeBase64 = function(s) {
            validateBase64(s);
            var i, d = atob(s), b = new Uint8Array(d.length);
            for(i = 0; i < d.length; i++)b[i] = d.charCodeAt(i);
            return b;
        };
    }
    return util;
});

});

parcelRequire.register("auv6H", function(module, exports) {

$parcel$export(module.exports, "randomBytes", () => $7a34d5eb9293608b$export$5f828d93ff035aa8, (v) => $7a34d5eb9293608b$export$5f828d93ff035aa8 = v);
$parcel$export(module.exports, "rng", () => $7a34d5eb9293608b$export$cd94982b18c6332c, (v) => $7a34d5eb9293608b$export$cd94982b18c6332c = v);
$parcel$export(module.exports, "pseudoRandomBytes", () => $7a34d5eb9293608b$export$1d518568e4f529b0, (v) => $7a34d5eb9293608b$export$1d518568e4f529b0 = v);
$parcel$export(module.exports, "prng", () => $7a34d5eb9293608b$export$5285b6d41c912b41, (v) => $7a34d5eb9293608b$export$5285b6d41c912b41 = v);
$parcel$export(module.exports, "createHash", () => $7a34d5eb9293608b$export$2fb37efbf6ae0c0e, (v) => $7a34d5eb9293608b$export$2fb37efbf6ae0c0e = v);
$parcel$export(module.exports, "Hash", () => $7a34d5eb9293608b$export$ab85ecd77ce6a5cd, (v) => $7a34d5eb9293608b$export$ab85ecd77ce6a5cd = v);
$parcel$export(module.exports, "createHmac", () => $7a34d5eb9293608b$export$da39cf97e1eb7c91, (v) => $7a34d5eb9293608b$export$da39cf97e1eb7c91 = v);
$parcel$export(module.exports, "Hmac", () => $7a34d5eb9293608b$export$52a9039d7177394f, (v) => $7a34d5eb9293608b$export$52a9039d7177394f = v);
$parcel$export(module.exports, "getHashes", () => $7a34d5eb9293608b$export$f7201db400317331, (v) => $7a34d5eb9293608b$export$f7201db400317331 = v);
$parcel$export(module.exports, "pbkdf2", () => $7a34d5eb9293608b$export$448fa22aedc9dbca, (v) => $7a34d5eb9293608b$export$448fa22aedc9dbca = v);
$parcel$export(module.exports, "pbkdf2Sync", () => $7a34d5eb9293608b$export$b80c7ba289c8fa56, (v) => $7a34d5eb9293608b$export$b80c7ba289c8fa56 = v);
$parcel$export(module.exports, "Cipher", () => $7a34d5eb9293608b$export$26e5786e8ac8e530, (v) => $7a34d5eb9293608b$export$26e5786e8ac8e530 = v);
$parcel$export(module.exports, "createCipher", () => $7a34d5eb9293608b$export$bdd223f16383713e, (v) => $7a34d5eb9293608b$export$bdd223f16383713e = v);
$parcel$export(module.exports, "Cipheriv", () => $7a34d5eb9293608b$export$20533d26f07f1ee0, (v) => $7a34d5eb9293608b$export$20533d26f07f1ee0 = v);
$parcel$export(module.exports, "createCipheriv", () => $7a34d5eb9293608b$export$2f64596b8cbf08b4, (v) => $7a34d5eb9293608b$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "Decipher", () => $7a34d5eb9293608b$export$2ce6d8d0e8b04e1a, (v) => $7a34d5eb9293608b$export$2ce6d8d0e8b04e1a = v);
$parcel$export(module.exports, "createDecipher", () => $7a34d5eb9293608b$export$12ada9414fbc594c, (v) => $7a34d5eb9293608b$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "Decipheriv", () => $7a34d5eb9293608b$export$f5e7e39d57cd9700, (v) => $7a34d5eb9293608b$export$f5e7e39d57cd9700 = v);
$parcel$export(module.exports, "createDecipheriv", () => $7a34d5eb9293608b$export$36b6d6ef312eab39, (v) => $7a34d5eb9293608b$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "getCiphers", () => $7a34d5eb9293608b$export$58a258485f1e49f6, (v) => $7a34d5eb9293608b$export$58a258485f1e49f6 = v);
$parcel$export(module.exports, "listCiphers", () => $7a34d5eb9293608b$export$dedd8dc3dc62b370, (v) => $7a34d5eb9293608b$export$dedd8dc3dc62b370 = v);
$parcel$export(module.exports, "DiffieHellmanGroup", () => $7a34d5eb9293608b$export$971862a2fcb1bb40, (v) => $7a34d5eb9293608b$export$971862a2fcb1bb40 = v);
$parcel$export(module.exports, "createDiffieHellmanGroup", () => $7a34d5eb9293608b$export$c6ff6a88acbeaf40, (v) => $7a34d5eb9293608b$export$c6ff6a88acbeaf40 = v);
$parcel$export(module.exports, "getDiffieHellman", () => $7a34d5eb9293608b$export$fdc27893e98845cc, (v) => $7a34d5eb9293608b$export$fdc27893e98845cc = v);
$parcel$export(module.exports, "createDiffieHellman", () => $7a34d5eb9293608b$export$6671fb9a1323bed, (v) => $7a34d5eb9293608b$export$6671fb9a1323bed = v);
$parcel$export(module.exports, "DiffieHellman", () => $7a34d5eb9293608b$export$d74daf141a551db, (v) => $7a34d5eb9293608b$export$d74daf141a551db = v);
$parcel$export(module.exports, "createSign", () => $7a34d5eb9293608b$export$45df7cae684751af, (v) => $7a34d5eb9293608b$export$45df7cae684751af = v);
$parcel$export(module.exports, "Sign", () => $7a34d5eb9293608b$export$1db683ad541682f6, (v) => $7a34d5eb9293608b$export$1db683ad541682f6 = v);
$parcel$export(module.exports, "createVerify", () => $7a34d5eb9293608b$export$6f65485f87568e37, (v) => $7a34d5eb9293608b$export$6f65485f87568e37 = v);
$parcel$export(module.exports, "Verify", () => $7a34d5eb9293608b$export$91a8e56769aeb334, (v) => $7a34d5eb9293608b$export$91a8e56769aeb334 = v);
$parcel$export(module.exports, "createECDH", () => $7a34d5eb9293608b$export$2d4117e99c2179e4, (v) => $7a34d5eb9293608b$export$2d4117e99c2179e4 = v);
$parcel$export(module.exports, "publicEncrypt", () => $7a34d5eb9293608b$export$512823e338ddb1b7, (v) => $7a34d5eb9293608b$export$512823e338ddb1b7 = v);
$parcel$export(module.exports, "privateEncrypt", () => $7a34d5eb9293608b$export$9d0e0c0c4a8d30f3, (v) => $7a34d5eb9293608b$export$9d0e0c0c4a8d30f3 = v);
$parcel$export(module.exports, "publicDecrypt", () => $7a34d5eb9293608b$export$b9d55ff329113abd, (v) => $7a34d5eb9293608b$export$b9d55ff329113abd = v);
$parcel$export(module.exports, "privateDecrypt", () => $7a34d5eb9293608b$export$7efb24e2fddf99b9, (v) => $7a34d5eb9293608b$export$7efb24e2fddf99b9 = v);
$parcel$export(module.exports, "randomFill", () => $7a34d5eb9293608b$export$bb1abf2ce84fc7e8, (v) => $7a34d5eb9293608b$export$bb1abf2ce84fc7e8 = v);
$parcel$export(module.exports, "randomFillSync", () => $7a34d5eb9293608b$export$2f7171e78e524d5e, (v) => $7a34d5eb9293608b$export$2f7171e78e524d5e = v);
$parcel$export(module.exports, "createCredentials", () => $7a34d5eb9293608b$export$e1d879b482f37d98, (v) => $7a34d5eb9293608b$export$e1d879b482f37d98 = v);
$parcel$export(module.exports, "constants", () => $7a34d5eb9293608b$export$1a988e7317c65621, (v) => $7a34d5eb9293608b$export$1a988e7317c65621 = v);
var $7a34d5eb9293608b$export$5f828d93ff035aa8;
var $7a34d5eb9293608b$export$cd94982b18c6332c;
var $7a34d5eb9293608b$export$1d518568e4f529b0;
var $7a34d5eb9293608b$export$5285b6d41c912b41;
var $7a34d5eb9293608b$export$2fb37efbf6ae0c0e;
var $7a34d5eb9293608b$export$ab85ecd77ce6a5cd;
var $7a34d5eb9293608b$export$da39cf97e1eb7c91;
var $7a34d5eb9293608b$export$52a9039d7177394f;
var $7a34d5eb9293608b$export$f7201db400317331;
var $7a34d5eb9293608b$export$448fa22aedc9dbca;
var $7a34d5eb9293608b$export$b80c7ba289c8fa56;
var $7a34d5eb9293608b$export$26e5786e8ac8e530;
var $7a34d5eb9293608b$export$bdd223f16383713e;
var $7a34d5eb9293608b$export$20533d26f07f1ee0;
var $7a34d5eb9293608b$export$2f64596b8cbf08b4;
var $7a34d5eb9293608b$export$2ce6d8d0e8b04e1a;
var $7a34d5eb9293608b$export$12ada9414fbc594c;
var $7a34d5eb9293608b$export$f5e7e39d57cd9700;
var $7a34d5eb9293608b$export$36b6d6ef312eab39;
var $7a34d5eb9293608b$export$58a258485f1e49f6;
var $7a34d5eb9293608b$export$dedd8dc3dc62b370;
var $7a34d5eb9293608b$export$971862a2fcb1bb40;
var $7a34d5eb9293608b$export$c6ff6a88acbeaf40;
var $7a34d5eb9293608b$export$fdc27893e98845cc;
var $7a34d5eb9293608b$export$6671fb9a1323bed;
var $7a34d5eb9293608b$export$d74daf141a551db;
var $7a34d5eb9293608b$export$45df7cae684751af;
var $7a34d5eb9293608b$export$1db683ad541682f6;
var $7a34d5eb9293608b$export$6f65485f87568e37;
var $7a34d5eb9293608b$export$91a8e56769aeb334;
var $7a34d5eb9293608b$export$2d4117e99c2179e4;
var $7a34d5eb9293608b$export$512823e338ddb1b7;
var $7a34d5eb9293608b$export$9d0e0c0c4a8d30f3;
var $7a34d5eb9293608b$export$b9d55ff329113abd;
var $7a34d5eb9293608b$export$7efb24e2fddf99b9;
var $7a34d5eb9293608b$export$bb1abf2ce84fc7e8;
var $7a34d5eb9293608b$export$2f7171e78e524d5e;
var $7a34d5eb9293608b$export$e1d879b482f37d98;
var $7a34d5eb9293608b$export$1a988e7317c65621;
'use strict';

$7a34d5eb9293608b$export$5f828d93ff035aa8 = $7a34d5eb9293608b$export$cd94982b18c6332c = $7a34d5eb9293608b$export$1d518568e4f529b0 = $7a34d5eb9293608b$export$5285b6d41c912b41 = (parcelRequire("hWy1J"));

$7a34d5eb9293608b$export$2fb37efbf6ae0c0e = $7a34d5eb9293608b$export$ab85ecd77ce6a5cd = (parcelRequire("cGz00"));

$7a34d5eb9293608b$export$da39cf97e1eb7c91 = $7a34d5eb9293608b$export$52a9039d7177394f = (parcelRequire("lxJro"));

var $htcvI = parcelRequire("htcvI");
var $7a34d5eb9293608b$var$algoKeys = Object.keys($htcvI);
var $7a34d5eb9293608b$var$hashes = [
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    'md5',
    'rmd160'
].concat($7a34d5eb9293608b$var$algoKeys);
$7a34d5eb9293608b$export$f7201db400317331 = function() {
    return $7a34d5eb9293608b$var$hashes;
};

var $6qQyy = parcelRequire("6qQyy");
$7a34d5eb9293608b$export$448fa22aedc9dbca = $6qQyy.pbkdf2;
$7a34d5eb9293608b$export$b80c7ba289c8fa56 = $6qQyy.pbkdf2Sync;

var $2WWWT = parcelRequire("2WWWT");
$7a34d5eb9293608b$export$26e5786e8ac8e530 = $2WWWT.Cipher;
$7a34d5eb9293608b$export$bdd223f16383713e = $2WWWT.createCipher;
$7a34d5eb9293608b$export$20533d26f07f1ee0 = $2WWWT.Cipheriv;
$7a34d5eb9293608b$export$2f64596b8cbf08b4 = $2WWWT.createCipheriv;
$7a34d5eb9293608b$export$2ce6d8d0e8b04e1a = $2WWWT.Decipher;
$7a34d5eb9293608b$export$12ada9414fbc594c = $2WWWT.createDecipher;
$7a34d5eb9293608b$export$f5e7e39d57cd9700 = $2WWWT.Decipheriv;
$7a34d5eb9293608b$export$36b6d6ef312eab39 = $2WWWT.createDecipheriv;
$7a34d5eb9293608b$export$58a258485f1e49f6 = $2WWWT.getCiphers;
$7a34d5eb9293608b$export$dedd8dc3dc62b370 = $2WWWT.listCiphers;

var $5XzMx = parcelRequire("5XzMx");
$7a34d5eb9293608b$export$971862a2fcb1bb40 = $5XzMx.DiffieHellmanGroup;
$7a34d5eb9293608b$export$c6ff6a88acbeaf40 = $5XzMx.createDiffieHellmanGroup;
$7a34d5eb9293608b$export$fdc27893e98845cc = $5XzMx.getDiffieHellman;
$7a34d5eb9293608b$export$6671fb9a1323bed = $5XzMx.createDiffieHellman;
$7a34d5eb9293608b$export$d74daf141a551db = $5XzMx.DiffieHellman;

var $2WIkX = parcelRequire("2WIkX");
$7a34d5eb9293608b$export$45df7cae684751af = $2WIkX.createSign;
$7a34d5eb9293608b$export$1db683ad541682f6 = $2WIkX.Sign;
$7a34d5eb9293608b$export$6f65485f87568e37 = $2WIkX.createVerify;
$7a34d5eb9293608b$export$91a8e56769aeb334 = $2WIkX.Verify;

$7a34d5eb9293608b$export$2d4117e99c2179e4 = (parcelRequire("jtLmz"));

var $ari1D = parcelRequire("ari1D");
$7a34d5eb9293608b$export$512823e338ddb1b7 = $ari1D.publicEncrypt;
$7a34d5eb9293608b$export$9d0e0c0c4a8d30f3 = $ari1D.privateEncrypt;
$7a34d5eb9293608b$export$b9d55ff329113abd = $ari1D.publicDecrypt;
$7a34d5eb9293608b$export$7efb24e2fddf99b9 = $ari1D.privateDecrypt;

var $kX4Jy = parcelRequire("kX4Jy");
$7a34d5eb9293608b$export$bb1abf2ce84fc7e8 = $kX4Jy.randomFill;
$7a34d5eb9293608b$export$2f7171e78e524d5e = $kX4Jy.randomFillSync;
$7a34d5eb9293608b$export$e1d879b482f37d98 = function() {
    throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
};
$7a34d5eb9293608b$export$1a988e7317c65621 = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
};

});
parcelRequire.register("lxJro", function(module, exports) {
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $jVXBQ = parcelRequire("jVXBQ");

var $9VTgz = parcelRequire("9VTgz");

var $cBldb = parcelRequire("cBldb");
var $faefeda2b2015182$require$Buffer = $cBldb.Buffer;

var $21tn1 = parcelRequire("21tn1");

var $4gUXg = parcelRequire("4gUXg");

var $fBdwr = parcelRequire("fBdwr");
var $faefeda2b2015182$var$ZEROS = $faefeda2b2015182$require$Buffer.alloc(128);
function $faefeda2b2015182$var$Hmac(alg, key) {
    $9VTgz.call(this, 'digest');
    if (typeof key === 'string') key = $faefeda2b2015182$require$Buffer.from(key);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new $4gUXg() : $fBdwr(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = $faefeda2b2015182$require$Buffer.concat([
        key,
        $faefeda2b2015182$var$ZEROS
    ], blocksize);
    var ipad = this._ipad = $faefeda2b2015182$require$Buffer.allocUnsafe(blocksize);
    var opad = this._opad = $faefeda2b2015182$require$Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = alg === 'rmd160' ? new $4gUXg() : $fBdwr(alg);
    this._hash.update(ipad);
}
$fGyu9($faefeda2b2015182$var$Hmac, $9VTgz);
$faefeda2b2015182$var$Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
$faefeda2b2015182$var$Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new $4gUXg() : $fBdwr(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') return new $faefeda2b2015182$var$Hmac('rmd160', key);
    if (alg === 'md5') return new $jVXBQ($21tn1, key);
    return new $faefeda2b2015182$var$Hmac(alg, key);
};

});
parcelRequire.register("jVXBQ", function(module, exports) {
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $cBldb = parcelRequire("cBldb");
var $e831945bd702a1cd$require$Buffer = $cBldb.Buffer;

var $9VTgz = parcelRequire("9VTgz");
var $e831945bd702a1cd$var$ZEROS = $e831945bd702a1cd$require$Buffer.alloc(128);
var $e831945bd702a1cd$var$blocksize = 64;
function $e831945bd702a1cd$var$Hmac(alg, key) {
    $9VTgz.call(this, 'digest');
    if (typeof key === 'string') key = $e831945bd702a1cd$require$Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > $e831945bd702a1cd$var$blocksize) key = alg(key);
    else if (key.length < $e831945bd702a1cd$var$blocksize) key = $e831945bd702a1cd$require$Buffer.concat([
        key,
        $e831945bd702a1cd$var$ZEROS
    ], $e831945bd702a1cd$var$blocksize);
    var ipad = this._ipad = $e831945bd702a1cd$require$Buffer.allocUnsafe($e831945bd702a1cd$var$blocksize);
    var opad = this._opad = $e831945bd702a1cd$require$Buffer.allocUnsafe($e831945bd702a1cd$var$blocksize);
    for(var i = 0; i < $e831945bd702a1cd$var$blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = [
        ipad
    ];
}
$fGyu9($e831945bd702a1cd$var$Hmac, $9VTgz);
$e831945bd702a1cd$var$Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
$e831945bd702a1cd$var$Hmac.prototype._final = function() {
    var h = this._alg($e831945bd702a1cd$require$Buffer.concat(this._hash));
    return this._alg($e831945bd702a1cd$require$Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = $e831945bd702a1cd$var$Hmac;

});

parcelRequire.register("21tn1", function(module, exports) {

var $Snhio = parcelRequire("Snhio");
module.exports = function(buffer) {
    return new $Snhio().update(buffer).digest();
};

});


parcelRequire.register("htcvI", function(module, exports) {

module.exports = (parcelRequire("ivekz"));

});
parcelRequire.register("ivekz", function(module, exports) {
module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

});


parcelRequire.register("6qQyy", function(module, exports) {

$parcel$export(module.exports, "pbkdf2", () => $4aedf0600bb74606$export$448fa22aedc9dbca, (v) => $4aedf0600bb74606$export$448fa22aedc9dbca = v);
$parcel$export(module.exports, "pbkdf2Sync", () => $4aedf0600bb74606$export$b80c7ba289c8fa56, (v) => $4aedf0600bb74606$export$b80c7ba289c8fa56 = v);
var $4aedf0600bb74606$export$448fa22aedc9dbca;
var $4aedf0600bb74606$export$b80c7ba289c8fa56;

$4aedf0600bb74606$export$448fa22aedc9dbca = (parcelRequire("kh5Ob"));

$4aedf0600bb74606$export$b80c7ba289c8fa56 = (parcelRequire("hc85m"));

});
parcelRequire.register("kh5Ob", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $ec29e6997ec67d3e$require$Buffer = $cBldb.Buffer;

var $1t4BY = parcelRequire("1t4BY");

var $bJkv7 = parcelRequire("bJkv7");

var $hc85m = parcelRequire("hc85m");

var $fqwRF = parcelRequire("fqwRF");
var $ec29e6997ec67d3e$var$ZERO_BUF;
var $ec29e6997ec67d3e$var$subtle = $parcel$global.crypto && $parcel$global.crypto.subtle;
var $ec29e6997ec67d3e$var$toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
};
var $ec29e6997ec67d3e$var$checks = [];
function $ec29e6997ec67d3e$var$checkNative(algo) {
    if ($parcel$global.process && !$parcel$global.process.browser) return Promise.resolve(false);
    if (!$ec29e6997ec67d3e$var$subtle || !$ec29e6997ec67d3e$var$subtle.importKey || !$ec29e6997ec67d3e$var$subtle.deriveBits) return Promise.resolve(false);
    if ($ec29e6997ec67d3e$var$checks[algo] !== undefined) return $ec29e6997ec67d3e$var$checks[algo];
    $ec29e6997ec67d3e$var$ZERO_BUF = $ec29e6997ec67d3e$var$ZERO_BUF || $ec29e6997ec67d3e$require$Buffer.alloc(8);
    var prom = $ec29e6997ec67d3e$var$browserPbkdf2($ec29e6997ec67d3e$var$ZERO_BUF, $ec29e6997ec67d3e$var$ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    $ec29e6997ec67d3e$var$checks[algo] = prom;
    return prom;
}
var $ec29e6997ec67d3e$var$nextTick;
function $ec29e6997ec67d3e$var$getNextTick() {
    if ($ec29e6997ec67d3e$var$nextTick) return $ec29e6997ec67d3e$var$nextTick;
    if ($parcel$global.process && $parcel$global.process.nextTick) $ec29e6997ec67d3e$var$nextTick = $parcel$global.process.nextTick;
    else if ($parcel$global.queueMicrotask) $ec29e6997ec67d3e$var$nextTick = $parcel$global.queueMicrotask;
    else if ($parcel$global.setImmediate) $ec29e6997ec67d3e$var$nextTick = $parcel$global.setImmediate;
    else $ec29e6997ec67d3e$var$nextTick = $parcel$global.setTimeout;
    return $ec29e6997ec67d3e$var$nextTick;
}
function $ec29e6997ec67d3e$var$browserPbkdf2(password, salt, iterations, length, algo) {
    return $ec29e6997ec67d3e$var$subtle.importKey('raw', password, {
        name: 'PBKDF2'
    }, false, [
        'deriveBits'
    ]).then(function(key) {
        return $ec29e6997ec67d3e$var$subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return $ec29e6997ec67d3e$require$Buffer.from(res);
    });
}
function $ec29e6997ec67d3e$var$resolvePromise(promise, callback) {
    promise.then(function(out) {
        $ec29e6997ec67d3e$var$getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        $ec29e6997ec67d3e$var$getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
    }
    digest = digest || 'sha1';
    var algo = $ec29e6997ec67d3e$var$toBrowser[digest.toLowerCase()];
    if (!algo || typeof $parcel$global.Promise !== 'function') {
        $ec29e6997ec67d3e$var$getNextTick()(function() {
            var out;
            try {
                out = $hc85m(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    $1t4BY(iterations, keylen);
    password = $fqwRF(password, $bJkv7, 'Password');
    salt = $fqwRF(salt, $bJkv7, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    $ec29e6997ec67d3e$var$resolvePromise($ec29e6997ec67d3e$var$checkNative(algo).then(function(resp) {
        if (resp) return $ec29e6997ec67d3e$var$browserPbkdf2(password, salt, iterations, keylen, algo);
        return $hc85m(password, salt, iterations, keylen, digest);
    }), callback);
};

});
parcelRequire.register("1t4BY", function(module, exports) {
var $111c13a0cd7d7ab6$var$MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== 'number') throw new TypeError('Iterations not a number');
    if (iterations < 0) throw new TypeError('Bad iterations');
    if (typeof keylen !== 'number') throw new TypeError('Key length not a number');
    if (keylen < 0 || keylen > $111c13a0cd7d7ab6$var$MAX_ALLOC || keylen !== keylen) throw new TypeError('Bad key length');
};

});

parcelRequire.register("bJkv7", function(module, exports) {

var $FkHbz = parcelRequire("FkHbz");
var $88a3ccba0d09849e$var$defaultEncoding;
/* istanbul ignore next */ if ($parcel$global.process && $parcel$global.process.browser) $88a3ccba0d09849e$var$defaultEncoding = 'utf-8';
else if ($parcel$global.process && $parcel$global.process.version) {
    var $88a3ccba0d09849e$var$pVersionMajor = parseInt($FkHbz.version.split('.')[0].slice(1), 10);
    $88a3ccba0d09849e$var$defaultEncoding = $88a3ccba0d09849e$var$pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else $88a3ccba0d09849e$var$defaultEncoding = 'utf-8';
module.exports = $88a3ccba0d09849e$var$defaultEncoding;

});

parcelRequire.register("hc85m", function(module, exports) {

var $21tn1 = parcelRequire("21tn1");

var $4gUXg = parcelRequire("4gUXg");

var $fBdwr = parcelRequire("fBdwr");

var $cBldb = parcelRequire("cBldb");
var $c849d4498d68063f$require$Buffer = $cBldb.Buffer;

var $1t4BY = parcelRequire("1t4BY");

var $bJkv7 = parcelRequire("bJkv7");

var $fqwRF = parcelRequire("fqwRF");
var $c849d4498d68063f$var$ZEROS = $c849d4498d68063f$require$Buffer.alloc(128);
var $c849d4498d68063f$var$sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function $c849d4498d68063f$var$Hmac(alg, key, saltLen) {
    var hash = $c849d4498d68063f$var$getDigest(alg);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = $c849d4498d68063f$require$Buffer.concat([
        key,
        $c849d4498d68063f$var$ZEROS
    ], blocksize);
    var ipad = $c849d4498d68063f$require$Buffer.allocUnsafe(blocksize + $c849d4498d68063f$var$sizes[alg]);
    var opad = $c849d4498d68063f$require$Buffer.allocUnsafe(blocksize + $c849d4498d68063f$var$sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    var ipad1 = $c849d4498d68063f$require$Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = $c849d4498d68063f$var$sizes[alg];
}
$c849d4498d68063f$var$Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function $c849d4498d68063f$var$getDigest(alg) {
    function shaFunc(data) {
        return $fBdwr(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new $4gUXg().update(data).digest();
    }
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
    if (alg === 'md5') return $21tn1;
    return shaFunc;
}
function $c849d4498d68063f$var$pbkdf2(password, salt, iterations, keylen, digest) {
    $1t4BY(iterations, keylen);
    password = $fqwRF(password, $bJkv7, 'Password');
    salt = $fqwRF(salt, $bJkv7, 'Salt');
    digest = digest || 'sha1';
    var hmac = new $c849d4498d68063f$var$Hmac(digest, password, salt.length);
    var DK = $c849d4498d68063f$require$Buffer.allocUnsafe(keylen);
    var block1 = $c849d4498d68063f$require$Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = $c849d4498d68063f$var$sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = $c849d4498d68063f$var$pbkdf2;

});
parcelRequire.register("fqwRF", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $b3b2c6f911718587$require$Buffer = $cBldb.Buffer;
module.exports = function(thing, encoding, name) {
    if ($b3b2c6f911718587$require$Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === 'string') return $b3b2c6f911718587$require$Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return $b3b2c6f911718587$require$Buffer.from(thing.buffer);
    else throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
};

});




parcelRequire.register("2WWWT", function(module, exports) {

$parcel$export(module.exports, "createCipher", () => $225eb997231d4e34$export$bdd223f16383713e, (v) => $225eb997231d4e34$export$bdd223f16383713e = v);
$parcel$export(module.exports, "Cipher", () => $225eb997231d4e34$export$26e5786e8ac8e530, (v) => $225eb997231d4e34$export$26e5786e8ac8e530 = v);
$parcel$export(module.exports, "createCipheriv", () => $225eb997231d4e34$export$2f64596b8cbf08b4, (v) => $225eb997231d4e34$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "Cipheriv", () => $225eb997231d4e34$export$20533d26f07f1ee0, (v) => $225eb997231d4e34$export$20533d26f07f1ee0 = v);
$parcel$export(module.exports, "createDecipher", () => $225eb997231d4e34$export$12ada9414fbc594c, (v) => $225eb997231d4e34$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "Decipher", () => $225eb997231d4e34$export$2ce6d8d0e8b04e1a, (v) => $225eb997231d4e34$export$2ce6d8d0e8b04e1a = v);
$parcel$export(module.exports, "createDecipheriv", () => $225eb997231d4e34$export$36b6d6ef312eab39, (v) => $225eb997231d4e34$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "Decipheriv", () => $225eb997231d4e34$export$f5e7e39d57cd9700, (v) => $225eb997231d4e34$export$f5e7e39d57cd9700 = v);
$parcel$export(module.exports, "listCiphers", () => $225eb997231d4e34$export$dedd8dc3dc62b370, (v) => $225eb997231d4e34$export$dedd8dc3dc62b370 = v);
$parcel$export(module.exports, "getCiphers", () => $225eb997231d4e34$export$58a258485f1e49f6, (v) => $225eb997231d4e34$export$58a258485f1e49f6 = v);
var $225eb997231d4e34$export$bdd223f16383713e;
var $225eb997231d4e34$export$26e5786e8ac8e530;
var $225eb997231d4e34$export$2f64596b8cbf08b4;
var $225eb997231d4e34$export$20533d26f07f1ee0;
var $225eb997231d4e34$export$12ada9414fbc594c;
var $225eb997231d4e34$export$2ce6d8d0e8b04e1a;
var $225eb997231d4e34$export$36b6d6ef312eab39;
var $225eb997231d4e34$export$f5e7e39d57cd9700;
var $225eb997231d4e34$export$dedd8dc3dc62b370;
var $225eb997231d4e34$export$58a258485f1e49f6;

var $2K1RN = parcelRequire("2K1RN");

var $8MsG9 = parcelRequire("8MsG9");

var $9h0VP = parcelRequire("9h0VP");

var $6flwu = parcelRequire("6flwu");

var $302s8 = parcelRequire("302s8");
function $225eb997231d4e34$var$createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($9h0VP[suite]) {
        keyLen = $9h0VP[suite].key;
        ivLen = $9h0VP[suite].iv;
    } else if ($6flwu[suite]) {
        keyLen = $6flwu[suite].key * 8;
        ivLen = $6flwu[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = $302s8(password, false, keyLen, ivLen);
    return $225eb997231d4e34$var$createCipheriv(suite, keys.key, keys.iv);
}
function $225eb997231d4e34$var$createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if ($9h0VP[suite]) {
        keyLen = $9h0VP[suite].key;
        ivLen = $9h0VP[suite].iv;
    } else if ($6flwu[suite]) {
        keyLen = $6flwu[suite].key * 8;
        ivLen = $6flwu[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = $302s8(password, false, keyLen, ivLen);
    return $225eb997231d4e34$var$createDecipheriv(suite, keys.key, keys.iv);
}
function $225eb997231d4e34$var$createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($9h0VP[suite]) return $8MsG9.createCipheriv(suite, key, iv);
    if ($6flwu[suite]) return new $2K1RN({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError('invalid suite type');
}
function $225eb997231d4e34$var$createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if ($9h0VP[suite]) return $8MsG9.createDecipheriv(suite, key, iv);
    if ($6flwu[suite]) return new $2K1RN({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError('invalid suite type');
}
function $225eb997231d4e34$var$getCiphers() {
    return Object.keys($6flwu).concat($8MsG9.getCiphers());
}
$225eb997231d4e34$export$bdd223f16383713e = $225eb997231d4e34$export$26e5786e8ac8e530 = $225eb997231d4e34$var$createCipher;
$225eb997231d4e34$export$2f64596b8cbf08b4 = $225eb997231d4e34$export$20533d26f07f1ee0 = $225eb997231d4e34$var$createCipheriv;
$225eb997231d4e34$export$12ada9414fbc594c = $225eb997231d4e34$export$2ce6d8d0e8b04e1a = $225eb997231d4e34$var$createDecipher;
$225eb997231d4e34$export$36b6d6ef312eab39 = $225eb997231d4e34$export$f5e7e39d57cd9700 = $225eb997231d4e34$var$createDecipheriv;
$225eb997231d4e34$export$dedd8dc3dc62b370 = $225eb997231d4e34$export$58a258485f1e49f6 = $225eb997231d4e34$var$getCiphers;

});
parcelRequire.register("2K1RN", function(module, exports) {

var $9VTgz = parcelRequire("9VTgz");

var $3mpg3 = parcelRequire("3mpg3");

var $fGyu9 = parcelRequire("fGyu9");

var $cBldb = parcelRequire("cBldb");
var $1ff153519fea596f$require$Buffer = $cBldb.Buffer;
var $1ff153519fea596f$var$modes = {
    'des-ede3-cbc': $3mpg3.CBC.instantiate($3mpg3.EDE),
    'des-ede3': $3mpg3.EDE,
    'des-ede-cbc': $3mpg3.CBC.instantiate($3mpg3.EDE),
    'des-ede': $3mpg3.EDE,
    'des-cbc': $3mpg3.CBC.instantiate($3mpg3.DES),
    'des-ecb': $3mpg3.DES
};
$1ff153519fea596f$var$modes.des = $1ff153519fea596f$var$modes['des-cbc'];
$1ff153519fea596f$var$modes.des3 = $1ff153519fea596f$var$modes['des-ede3-cbc'];
module.exports = $1ff153519fea596f$var$DES;
$fGyu9($1ff153519fea596f$var$DES, $9VTgz);
function $1ff153519fea596f$var$DES(opts) {
    $9VTgz.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = $1ff153519fea596f$var$modes[modeName];
    var type;
    if (opts.decrypt) type = 'decrypt';
    else type = 'encrypt';
    var key = opts.key;
    if (!$1ff153519fea596f$require$Buffer.isBuffer(key)) key = $1ff153519fea596f$require$Buffer.from(key);
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') key = $1ff153519fea596f$require$Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!$1ff153519fea596f$require$Buffer.isBuffer(iv)) iv = $1ff153519fea596f$require$Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
$1ff153519fea596f$var$DES.prototype._update = function(data) {
    return $1ff153519fea596f$require$Buffer.from(this._des.update(data));
};
$1ff153519fea596f$var$DES.prototype._final = function() {
    return $1ff153519fea596f$require$Buffer.from(this._des.final());
};

});
parcelRequire.register("3mpg3", function(module, exports) {

$parcel$export(module.exports, "DES", () => $272704d9a198083e$export$cc8859615686b300, (v) => $272704d9a198083e$export$cc8859615686b300 = v);
$parcel$export(module.exports, "CBC", () => $272704d9a198083e$export$8ad3f227af08fcc5, (v) => $272704d9a198083e$export$8ad3f227af08fcc5 = v);
$parcel$export(module.exports, "EDE", () => $272704d9a198083e$export$947646e34766044f, (v) => $272704d9a198083e$export$947646e34766044f = v);
var $272704d9a198083e$export$eab97d15b1788b8d;
var $272704d9a198083e$export$26e5786e8ac8e530;
var $272704d9a198083e$export$cc8859615686b300;
var $272704d9a198083e$export$8ad3f227af08fcc5;
var $272704d9a198083e$export$947646e34766044f;
'use strict';

$272704d9a198083e$export$eab97d15b1788b8d = (parcelRequire("khSWZ"));

$272704d9a198083e$export$26e5786e8ac8e530 = (parcelRequire("xY0qL"));

$272704d9a198083e$export$cc8859615686b300 = (parcelRequire("kiXP1"));

$272704d9a198083e$export$8ad3f227af08fcc5 = (parcelRequire("8FJrC"));

$272704d9a198083e$export$947646e34766044f = (parcelRequire("atVQR"));

});
parcelRequire.register("khSWZ", function(module, exports) {

$parcel$export(module.exports, "readUInt32BE", () => $ec500532c32013d1$export$cfaef8ed399428b0, (v) => $ec500532c32013d1$export$cfaef8ed399428b0 = v);
$parcel$export(module.exports, "writeUInt32BE", () => $ec500532c32013d1$export$a80c7deaea7cbd80, (v) => $ec500532c32013d1$export$a80c7deaea7cbd80 = v);
$parcel$export(module.exports, "ip", () => $ec500532c32013d1$export$ed7577ae6e1cd0ef, (v) => $ec500532c32013d1$export$ed7577ae6e1cd0ef = v);
$parcel$export(module.exports, "rip", () => $ec500532c32013d1$export$5dcbef3aa594f567, (v) => $ec500532c32013d1$export$5dcbef3aa594f567 = v);
$parcel$export(module.exports, "pc1", () => $ec500532c32013d1$export$5bc8001ca71ed9c5, (v) => $ec500532c32013d1$export$5bc8001ca71ed9c5 = v);
$parcel$export(module.exports, "r28shl", () => $ec500532c32013d1$export$3e714e2c5d5d8cb2, (v) => $ec500532c32013d1$export$3e714e2c5d5d8cb2 = v);
$parcel$export(module.exports, "pc2", () => $ec500532c32013d1$export$94c3e544fd062b7f, (v) => $ec500532c32013d1$export$94c3e544fd062b7f = v);
$parcel$export(module.exports, "expand", () => $ec500532c32013d1$export$9f77e0932fb78f72, (v) => $ec500532c32013d1$export$9f77e0932fb78f72 = v);
$parcel$export(module.exports, "substitute", () => $ec500532c32013d1$export$d865ce2836f5927f, (v) => $ec500532c32013d1$export$d865ce2836f5927f = v);
$parcel$export(module.exports, "permute", () => $ec500532c32013d1$export$95e62ad65da8b7d2, (v) => $ec500532c32013d1$export$95e62ad65da8b7d2 = v);
$parcel$export(module.exports, "padSplit", () => $ec500532c32013d1$export$209139ff098c441a, (v) => $ec500532c32013d1$export$209139ff098c441a = v);
var $ec500532c32013d1$export$cfaef8ed399428b0;
var $ec500532c32013d1$export$a80c7deaea7cbd80;
var $ec500532c32013d1$export$ed7577ae6e1cd0ef;
var $ec500532c32013d1$export$5dcbef3aa594f567;
var $ec500532c32013d1$export$5bc8001ca71ed9c5;
var $ec500532c32013d1$export$3e714e2c5d5d8cb2;
var $ec500532c32013d1$export$94c3e544fd062b7f;
var $ec500532c32013d1$export$9f77e0932fb78f72;
var $ec500532c32013d1$export$d865ce2836f5927f;
var $ec500532c32013d1$export$95e62ad65da8b7d2;
var $ec500532c32013d1$export$209139ff098c441a;
'use strict';
$ec500532c32013d1$export$cfaef8ed399428b0 = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
$ec500532c32013d1$export$a80c7deaea7cbd80 = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 255;
    bytes[2 + off] = value >>> 8 & 255;
    bytes[3 + off] = value & 255;
};
$ec500532c32013d1$export$ed7577ae6e1cd0ef = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$ec500532c32013d1$export$5dcbef3aa594f567 = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$ec500532c32013d1$export$5bc8001ca71ed9c5 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$ec500532c32013d1$export$3e714e2c5d5d8cb2 = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
};
var $ec500532c32013d1$var$pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
$ec500532c32013d1$export$94c3e544fd062b7f = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = $ec500532c32013d1$var$pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> $ec500532c32013d1$var$pc2table[i] & 1;
    }
    for(var i = len; i < $ec500532c32013d1$var$pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> $ec500532c32013d1$var$pc2table[i] & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
$ec500532c32013d1$export$9f77e0932fb78f72 = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 63;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 63;
        outR <<= 6;
    }
    outR |= (r & 31) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var $ec500532c32013d1$var$sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
$ec500532c32013d1$export$d865ce2836f5927f = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 63;
        var sb = $ec500532c32013d1$var$sTable[i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 63;
        var sb = $ec500532c32013d1$var$sTable[256 + i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var $ec500532c32013d1$var$permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
$ec500532c32013d1$export$95e62ad65da8b7d2 = function permute(num) {
    var out = 0;
    for(var i = 0; i < $ec500532c32013d1$var$permuteTable.length; i++){
        out <<= 1;
        out |= num >>> $ec500532c32013d1$var$permuteTable[i] & 1;
    }
    return out >>> 0;
};
$ec500532c32013d1$export$209139ff098c441a = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = '0' + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(' ');
};

});

parcelRequire.register("xY0qL", function(module, exports) {
'use strict';

var $adLNa = parcelRequire("adLNa");
function $0661a11d03aaf5d5$var$Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
}
module.exports = $0661a11d03aaf5d5$var$Cipher;
$0661a11d03aaf5d5$var$Cipher.prototype._init = function _init() {
// Might be overrided
};
$0661a11d03aaf5d5$var$Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === 'decrypt') return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
$0661a11d03aaf5d5$var$Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
$0661a11d03aaf5d5$var$Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
$0661a11d03aaf5d5$var$Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
$0661a11d03aaf5d5$var$Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
$0661a11d03aaf5d5$var$Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === 'encrypt') last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
$0661a11d03aaf5d5$var$Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
$0661a11d03aaf5d5$var$Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
$0661a11d03aaf5d5$var$Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
$0661a11d03aaf5d5$var$Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    $adLNa.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

});

parcelRequire.register("kiXP1", function(module, exports) {
'use strict';

var $adLNa = parcelRequire("adLNa");

var $fGyu9 = parcelRequire("fGyu9");

var $khSWZ = parcelRequire("khSWZ");

var $xY0qL = parcelRequire("xY0qL");
function $03d094338d68728d$var$DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function $03d094338d68728d$var$DES(options) {
    $xY0qL.call(this, options);
    var state = new $03d094338d68728d$var$DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
$fGyu9($03d094338d68728d$var$DES, $xY0qL);
module.exports = $03d094338d68728d$var$DES;
$03d094338d68728d$var$DES.create = function create(options) {
    return new $03d094338d68728d$var$DES(options);
};
var $03d094338d68728d$var$shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
$03d094338d68728d$var$DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    $adLNa.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = $khSWZ.readUInt32BE(key, 0);
    var kR = $khSWZ.readUInt32BE(key, 4);
    $khSWZ.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = $03d094338d68728d$var$shiftTable[i >>> 1];
        kL = $khSWZ.r28shl(kL, shift);
        kR = $khSWZ.r28shl(kR, shift);
        $khSWZ.pc2(kL, kR, state.keys, i);
    }
};
$03d094338d68728d$var$DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = $khSWZ.readUInt32BE(inp, inOff);
    var r = $khSWZ.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    $khSWZ.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    $khSWZ.writeUInt32BE(out, l, outOff);
    $khSWZ.writeUInt32BE(out, r, outOff + 4);
};
$03d094338d68728d$var$DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
$03d094338d68728d$var$DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)$adLNa.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
$03d094338d68728d$var$DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $khSWZ.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $khSWZ.substitute(keyL, keyR);
        var f = $khSWZ.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    $khSWZ.rip(r, l, out, off);
};
$03d094338d68728d$var$DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        $khSWZ.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = $khSWZ.substitute(keyL, keyR);
        var f = $khSWZ.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    $khSWZ.rip(l, r, out, off);
};

});

parcelRequire.register("8FJrC", function(module, exports) {

$parcel$export(module.exports, "instantiate", () => $65056767d811d08c$export$f9bb8d20ccc7477a, (v) => $65056767d811d08c$export$f9bb8d20ccc7477a = v);
var $65056767d811d08c$export$f9bb8d20ccc7477a;
'use strict';

var $adLNa = parcelRequire("adLNa");

var $fGyu9 = parcelRequire("fGyu9");
var $65056767d811d08c$var$proto = {};
function $65056767d811d08c$var$CBCState(iv) {
    $adLNa.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function $65056767d811d08c$var$instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    $fGyu9(CBC, Base);
    var keys = Object.keys($65056767d811d08c$var$proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = $65056767d811d08c$var$proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
$65056767d811d08c$export$f9bb8d20ccc7477a = $65056767d811d08c$var$instantiate;
$65056767d811d08c$var$proto._cbcInit = function _cbcInit() {
    var state = new $65056767d811d08c$var$CBCState(this.options.iv);
    this._cbcState = state;
};
$65056767d811d08c$var$proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

});

parcelRequire.register("atVQR", function(module, exports) {
'use strict';

var $adLNa = parcelRequire("adLNa");

var $fGyu9 = parcelRequire("fGyu9");

var $xY0qL = parcelRequire("xY0qL");

var $kiXP1 = parcelRequire("kiXP1");
function $7a197cf036451381$var$EDEState(type, key) {
    $adLNa.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') this.ciphers = [
        $kiXP1.create({
            type: 'encrypt',
            key: k1
        }),
        $kiXP1.create({
            type: 'decrypt',
            key: k2
        }),
        $kiXP1.create({
            type: 'encrypt',
            key: k3
        })
    ];
    else this.ciphers = [
        $kiXP1.create({
            type: 'decrypt',
            key: k3
        }),
        $kiXP1.create({
            type: 'encrypt',
            key: k2
        }),
        $kiXP1.create({
            type: 'decrypt',
            key: k1
        })
    ];
}
function $7a197cf036451381$var$EDE(options) {
    $xY0qL.call(this, options);
    var state = new $7a197cf036451381$var$EDEState(this.type, this.options.key);
    this._edeState = state;
}
$fGyu9($7a197cf036451381$var$EDE, $xY0qL);
module.exports = $7a197cf036451381$var$EDE;
$7a197cf036451381$var$EDE.create = function create(options) {
    return new $7a197cf036451381$var$EDE(options);
};
$7a197cf036451381$var$EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
$7a197cf036451381$var$EDE.prototype._pad = $kiXP1.prototype._pad;
$7a197cf036451381$var$EDE.prototype._unpad = $kiXP1.prototype._unpad;

});



parcelRequire.register("8MsG9", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", () => $66490d77826ca482$export$2f64596b8cbf08b4, (v) => $66490d77826ca482$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "createDecipheriv", () => $66490d77826ca482$export$36b6d6ef312eab39, (v) => $66490d77826ca482$export$36b6d6ef312eab39 = v);
$parcel$export(module.exports, "getCiphers", () => $66490d77826ca482$export$58a258485f1e49f6, (v) => $66490d77826ca482$export$58a258485f1e49f6 = v);
var $66490d77826ca482$export$bdd223f16383713e;
var $66490d77826ca482$export$26e5786e8ac8e530;
var $66490d77826ca482$export$2f64596b8cbf08b4;
var $66490d77826ca482$export$20533d26f07f1ee0;
var $66490d77826ca482$export$12ada9414fbc594c;
var $66490d77826ca482$export$2ce6d8d0e8b04e1a;
var $66490d77826ca482$export$36b6d6ef312eab39;
var $66490d77826ca482$export$f5e7e39d57cd9700;
var $66490d77826ca482$export$dedd8dc3dc62b370;
var $66490d77826ca482$export$58a258485f1e49f6;

var $1j7Vw = parcelRequire("1j7Vw");

var $h3RP8 = parcelRequire("h3RP8");

var $eBIJJ = parcelRequire("eBIJJ");
function $66490d77826ca482$var$getCiphers() {
    return Object.keys($eBIJJ);
}
$66490d77826ca482$export$bdd223f16383713e = $66490d77826ca482$export$26e5786e8ac8e530 = $1j7Vw.createCipher;
$66490d77826ca482$export$2f64596b8cbf08b4 = $66490d77826ca482$export$20533d26f07f1ee0 = $1j7Vw.createCipheriv;
$66490d77826ca482$export$12ada9414fbc594c = $66490d77826ca482$export$2ce6d8d0e8b04e1a = $h3RP8.createDecipher;
$66490d77826ca482$export$36b6d6ef312eab39 = $66490d77826ca482$export$f5e7e39d57cd9700 = $h3RP8.createDecipheriv;
$66490d77826ca482$export$dedd8dc3dc62b370 = $66490d77826ca482$export$58a258485f1e49f6 = $66490d77826ca482$var$getCiphers;

});
parcelRequire.register("1j7Vw", function(module, exports) {

$parcel$export(module.exports, "createCipheriv", () => $0f3db6e578b7c2b3$export$2f64596b8cbf08b4, (v) => $0f3db6e578b7c2b3$export$2f64596b8cbf08b4 = v);
$parcel$export(module.exports, "createCipher", () => $0f3db6e578b7c2b3$export$bdd223f16383713e, (v) => $0f3db6e578b7c2b3$export$bdd223f16383713e = v);
var $0f3db6e578b7c2b3$export$2f64596b8cbf08b4;
var $0f3db6e578b7c2b3$export$bdd223f16383713e;

var $9h0VP = parcelRequire("9h0VP");

var $BXZ5A = parcelRequire("BXZ5A");

var $cBldb = parcelRequire("cBldb");
var $0f3db6e578b7c2b3$require$Buffer = $cBldb.Buffer;

var $kH1jT = parcelRequire("kH1jT");

var $9VTgz = parcelRequire("9VTgz");

var $arMHy = parcelRequire("arMHy");

var $302s8 = parcelRequire("302s8");

var $fGyu9 = parcelRequire("fGyu9");
function $0f3db6e578b7c2b3$var$Cipher(mode, key, iv) {
    $9VTgz.call(this);
    this._cache = new $0f3db6e578b7c2b3$var$Splitter();
    this._cipher = new $arMHy.AES(key);
    this._prev = $0f3db6e578b7c2b3$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$fGyu9($0f3db6e578b7c2b3$var$Cipher, $9VTgz);
$0f3db6e578b7c2b3$var$Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return $0f3db6e578b7c2b3$require$Buffer.concat(out);
};
var $0f3db6e578b7c2b3$var$PADDING = $0f3db6e578b7c2b3$require$Buffer.alloc(16, 16);
$0f3db6e578b7c2b3$var$Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals($0f3db6e578b7c2b3$var$PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
    }
};
$0f3db6e578b7c2b3$var$Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $0f3db6e578b7c2b3$var$Splitter() {
    this.cache = $0f3db6e578b7c2b3$require$Buffer.allocUnsafe(0);
}
$0f3db6e578b7c2b3$var$Splitter.prototype.add = function(data) {
    this.cache = $0f3db6e578b7c2b3$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$0f3db6e578b7c2b3$var$Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$0f3db6e578b7c2b3$var$Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = $0f3db6e578b7c2b3$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)padBuff.writeUInt8(len, i);
    return $0f3db6e578b7c2b3$require$Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function $0f3db6e578b7c2b3$var$createCipheriv(suite, password, iv) {
    var config = $9h0VP[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof password === 'string') password = $0f3db6e578b7c2b3$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (typeof iv === 'string') iv = $0f3db6e578b7c2b3$require$Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (config.type === 'stream') return new $kH1jT(config.module, password, iv);
    else if (config.type === 'auth') return new $BXZ5A(config.module, password, iv);
    return new $0f3db6e578b7c2b3$var$Cipher(config.module, password, iv);
}
function $0f3db6e578b7c2b3$var$createCipher(suite, password) {
    var config = $9h0VP[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = $302s8(password, false, config.key, config.iv);
    return $0f3db6e578b7c2b3$var$createCipheriv(suite, keys.key, keys.iv);
}
$0f3db6e578b7c2b3$export$2f64596b8cbf08b4 = $0f3db6e578b7c2b3$var$createCipheriv;
$0f3db6e578b7c2b3$export$bdd223f16383713e = $0f3db6e578b7c2b3$var$createCipher;

});
parcelRequire.register("9h0VP", function(module, exports) {








var $6c066ca1a41e3185$var$modeModules = {
    ECB: (parcelRequire("2Hwxp")),
    CBC: (parcelRequire("iPMMB")),
    CFB: (parcelRequire("5qU54")),
    CFB8: (parcelRequire("eDOHT")),
    CFB1: (parcelRequire("1uR8e")),
    OFB: (parcelRequire("3RbbN")),
    CTR: (parcelRequire("3w62n")),
    GCM: (parcelRequire("3w62n"))
};

var $eBIJJ = parcelRequire("eBIJJ");
for(var $6c066ca1a41e3185$var$key in $eBIJJ)$eBIJJ[$6c066ca1a41e3185$var$key].module = $6c066ca1a41e3185$var$modeModules[$eBIJJ[$6c066ca1a41e3185$var$key].mode];
module.exports = $eBIJJ;

});
parcelRequire.register("2Hwxp", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $1f78d63ed6c837b9$export$5b0f6292f11d1d18, (v) => $1f78d63ed6c837b9$export$5b0f6292f11d1d18 = v);
$parcel$export(module.exports, "decrypt", () => $1f78d63ed6c837b9$export$e85a0c9a1067c5d3, (v) => $1f78d63ed6c837b9$export$e85a0c9a1067c5d3 = v);
var $1f78d63ed6c837b9$export$5b0f6292f11d1d18;
var $1f78d63ed6c837b9$export$e85a0c9a1067c5d3;
$1f78d63ed6c837b9$export$5b0f6292f11d1d18 = function(self, block) {
    return self._cipher.encryptBlock(block);
};
$1f78d63ed6c837b9$export$e85a0c9a1067c5d3 = function(self, block) {
    return self._cipher.decryptBlock(block);
};

});

parcelRequire.register("iPMMB", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $db62d4b588e7b976$export$5b0f6292f11d1d18, (v) => $db62d4b588e7b976$export$5b0f6292f11d1d18 = v);
$parcel$export(module.exports, "decrypt", () => $db62d4b588e7b976$export$e85a0c9a1067c5d3, (v) => $db62d4b588e7b976$export$e85a0c9a1067c5d3 = v);
var $db62d4b588e7b976$export$5b0f6292f11d1d18;
var $db62d4b588e7b976$export$e85a0c9a1067c5d3;

var $ag1fr = parcelRequire("ag1fr");
$db62d4b588e7b976$export$5b0f6292f11d1d18 = function(self, block) {
    var data = $ag1fr(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
$db62d4b588e7b976$export$e85a0c9a1067c5d3 = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return $ag1fr(out, pad);
};

});
parcelRequire.register("ag1fr", function(module, exports) {

var $777c5dd419396ecf$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new $777c5dd419396ecf$require$Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

});


parcelRequire.register("5qU54", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $3f4ae1e8f824eff3$export$5b0f6292f11d1d18, (v) => $3f4ae1e8f824eff3$export$5b0f6292f11d1d18 = v);
var $3f4ae1e8f824eff3$export$5b0f6292f11d1d18;

var $cBldb = parcelRequire("cBldb");
var $3f4ae1e8f824eff3$require$Buffer = $cBldb.Buffer;

var $ag1fr = parcelRequire("ag1fr");
function $3f4ae1e8f824eff3$var$encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = $ag1fr(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = $3f4ae1e8f824eff3$require$Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
$3f4ae1e8f824eff3$export$5b0f6292f11d1d18 = function(self, data, decrypt) {
    var out = $3f4ae1e8f824eff3$require$Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = $3f4ae1e8f824eff3$require$Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = $3f4ae1e8f824eff3$require$Buffer.concat([
                out,
                $3f4ae1e8f824eff3$var$encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = $3f4ae1e8f824eff3$require$Buffer.concat([
                out,
                $3f4ae1e8f824eff3$var$encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

});

parcelRequire.register("eDOHT", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $02c031b806bf235b$export$5b0f6292f11d1d18, (v) => $02c031b806bf235b$export$5b0f6292f11d1d18 = v);
var $02c031b806bf235b$export$5b0f6292f11d1d18;

var $cBldb = parcelRequire("cBldb");
var $02c031b806bf235b$require$Buffer = $cBldb.Buffer;
function $02c031b806bf235b$var$encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = $02c031b806bf235b$require$Buffer.concat([
        self._prev.slice(1),
        $02c031b806bf235b$require$Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
$02c031b806bf235b$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $02c031b806bf235b$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $02c031b806bf235b$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("1uR8e", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $1171ceac03e3feb2$export$5b0f6292f11d1d18, (v) => $1171ceac03e3feb2$export$5b0f6292f11d1d18 = v);
var $1171ceac03e3feb2$export$5b0f6292f11d1d18;

var $cBldb = parcelRequire("cBldb");
var $1171ceac03e3feb2$require$Buffer = $cBldb.Buffer;
function $1171ceac03e3feb2$var$encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while(++i < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i % 8;
        self._prev = $1171ceac03e3feb2$var$shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function $1171ceac03e3feb2$var$shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = $1171ceac03e3feb2$require$Buffer.allocUnsafe(buffer.length);
    buffer = $1171ceac03e3feb2$require$Buffer.concat([
        buffer,
        $1171ceac03e3feb2$require$Buffer.from([
            value
        ])
    ]);
    while(++i < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
$1171ceac03e3feb2$export$5b0f6292f11d1d18 = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = $1171ceac03e3feb2$require$Buffer.allocUnsafe(len);
    var i = -1;
    while(++i < len)out[i] = $1171ceac03e3feb2$var$encryptByte(self, chunk[i], decrypt);
    return out;
};

});

parcelRequire.register("3RbbN", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $2cef004c31123287$export$5b0f6292f11d1d18, (v) => $2cef004c31123287$export$5b0f6292f11d1d18 = v);
var $2cef004c31123287$export$5b0f6292f11d1d18;

var $2cef004c31123287$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $ag1fr = parcelRequire("ag1fr");
function $2cef004c31123287$var$getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
$2cef004c31123287$export$5b0f6292f11d1d18 = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = $2cef004c31123287$require$Buffer.concat([
        self._cache,
        $2cef004c31123287$var$getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $ag1fr(chunk, pad);
};

});

parcelRequire.register("3w62n", function(module, exports) {

$parcel$export(module.exports, "encrypt", () => $28f90b21872bbdd9$export$5b0f6292f11d1d18, (v) => $28f90b21872bbdd9$export$5b0f6292f11d1d18 = v);
var $28f90b21872bbdd9$export$5b0f6292f11d1d18;

var $ag1fr = parcelRequire("ag1fr");

var $cBldb = parcelRequire("cBldb");
var $28f90b21872bbdd9$require$Buffer = $cBldb.Buffer;

var $hBNRH = parcelRequire("hBNRH");
function $28f90b21872bbdd9$var$getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    $hBNRH(self._prev);
    return out;
}
var $28f90b21872bbdd9$var$blockSize = 16;
$28f90b21872bbdd9$export$5b0f6292f11d1d18 = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / $28f90b21872bbdd9$var$blockSize);
    var start = self._cache.length;
    self._cache = $28f90b21872bbdd9$require$Buffer.concat([
        self._cache,
        $28f90b21872bbdd9$require$Buffer.allocUnsafe(chunkNum * $28f90b21872bbdd9$var$blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = $28f90b21872bbdd9$var$getBlock(self);
        var offset = start + i * $28f90b21872bbdd9$var$blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return $ag1fr(chunk, pad);
};

});
parcelRequire.register("hBNRH", function(module, exports) {
function $cd1c9285cceff31d$var$incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = $cd1c9285cceff31d$var$incr32;

});


parcelRequire.register("eBIJJ", function(module, exports) {
module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

});


parcelRequire.register("BXZ5A", function(module, exports) {

var $arMHy = parcelRequire("arMHy");

var $cBldb = parcelRequire("cBldb");
var $0721fc732fa848b6$require$Buffer = $cBldb.Buffer;

var $9VTgz = parcelRequire("9VTgz");

var $fGyu9 = parcelRequire("fGyu9");

var $ahYIk = parcelRequire("ahYIk");

var $ag1fr = parcelRequire("ag1fr");

var $hBNRH = parcelRequire("hBNRH");
function $0721fc732fa848b6$var$xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function $0721fc732fa848b6$var$calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = $0721fc732fa848b6$require$Buffer.concat([
            iv,
            $0721fc732fa848b6$require$Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return $0721fc732fa848b6$require$Buffer.concat([
            iv,
            $0721fc732fa848b6$require$Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new $ahYIk(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update($0721fc732fa848b6$require$Buffer.alloc(toPad, 0));
    }
    ghash.update($0721fc732fa848b6$require$Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = $0721fc732fa848b6$require$Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = $0721fc732fa848b6$require$Buffer.from(self._finID);
    $hBNRH(out);
    return out;
}
function $0721fc732fa848b6$var$StreamCipher(mode, key, iv, decrypt) {
    $9VTgz.call(this);
    var h = $0721fc732fa848b6$require$Buffer.alloc(4, 0);
    this._cipher = new $arMHy.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new $ahYIk(ck);
    iv = $0721fc732fa848b6$var$calcIv(this, iv, ck);
    this._prev = $0721fc732fa848b6$require$Buffer.from(iv);
    this._cache = $0721fc732fa848b6$require$Buffer.allocUnsafe(0);
    this._secCache = $0721fc732fa848b6$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
$fGyu9($0721fc732fa848b6$var$StreamCipher, $9VTgz);
$0721fc732fa848b6$var$StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = $0721fc732fa848b6$require$Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
$0721fc732fa848b6$var$StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
    var tag = $ag1fr(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && $0721fc732fa848b6$var$xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
    this._authTag = tag;
    this._cipher.scrub();
};
$0721fc732fa848b6$var$StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !$0721fc732fa848b6$require$Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
    return this._authTag;
};
$0721fc732fa848b6$var$StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
    this._authTag = tag;
};
$0721fc732fa848b6$var$StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state');
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = $0721fc732fa848b6$var$StreamCipher;

});
parcelRequire.register("arMHy", function(module, exports) {

$parcel$export(module.exports, "AES", () => $79b234141197f674$export$b80fbe1c3a2b92b5, (v) => $79b234141197f674$export$b80fbe1c3a2b92b5 = v);
var $79b234141197f674$export$b80fbe1c3a2b92b5;

var $cBldb = parcelRequire("cBldb");
var $79b234141197f674$require$Buffer = $cBldb.Buffer;
function $79b234141197f674$var$asUInt32Array(buf) {
    if (!$79b234141197f674$require$Buffer.isBuffer(buf)) buf = $79b234141197f674$require$Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function $79b234141197f674$var$scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function $79b234141197f674$var$cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var $79b234141197f674$var$RCON = [
    0,
    1,
    2,
    4,
    8,
    16,
    32,
    64,
    128,
    27,
    54
];
var $79b234141197f674$var$G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 283;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function $79b234141197f674$var$AES(key) {
    this._key = $79b234141197f674$var$asUInt32Array(key);
    this._reset();
}
$79b234141197f674$var$AES.blockSize = 16;
$79b234141197f674$var$AES.keySize = 32;
$79b234141197f674$var$AES.prototype.blockSize = $79b234141197f674$var$AES.blockSize;
$79b234141197f674$var$AES.prototype.keySize = $79b234141197f674$var$AES.keySize;
$79b234141197f674$var$AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = $79b234141197f674$var$G.SBOX[t >>> 24] << 24 | $79b234141197f674$var$G.SBOX[t >>> 16 & 255] << 16 | $79b234141197f674$var$G.SBOX[t >>> 8 & 255] << 8 | $79b234141197f674$var$G.SBOX[t & 255];
            t ^= $79b234141197f674$var$RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = $79b234141197f674$var$G.SBOX[t >>> 24] << 24 | $79b234141197f674$var$G.SBOX[t >>> 16 & 255] << 16 | $79b234141197f674$var$G.SBOX[t >>> 8 & 255] << 8 | $79b234141197f674$var$G.SBOX[t & 255];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = $79b234141197f674$var$G.INV_SUB_MIX[0][$79b234141197f674$var$G.SBOX[tt >>> 24]] ^ $79b234141197f674$var$G.INV_SUB_MIX[1][$79b234141197f674$var$G.SBOX[tt >>> 16 & 255]] ^ $79b234141197f674$var$G.INV_SUB_MIX[2][$79b234141197f674$var$G.SBOX[tt >>> 8 & 255]] ^ $79b234141197f674$var$G.INV_SUB_MIX[3][$79b234141197f674$var$G.SBOX[tt & 255]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
$79b234141197f674$var$AES.prototype.encryptBlockRaw = function(M) {
    M = $79b234141197f674$var$asUInt32Array(M);
    return $79b234141197f674$var$cryptBlock(M, this._keySchedule, $79b234141197f674$var$G.SUB_MIX, $79b234141197f674$var$G.SBOX, this._nRounds);
};
$79b234141197f674$var$AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = $79b234141197f674$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
$79b234141197f674$var$AES.prototype.decryptBlock = function(M) {
    M = $79b234141197f674$var$asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = $79b234141197f674$var$cryptBlock(M, this._invKeySchedule, $79b234141197f674$var$G.INV_SUB_MIX, $79b234141197f674$var$G.INV_SBOX, this._nRounds);
    var buf = $79b234141197f674$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
$79b234141197f674$var$AES.prototype.scrub = function() {
    $79b234141197f674$var$scrubVec(this._keySchedule);
    $79b234141197f674$var$scrubVec(this._invKeySchedule);
    $79b234141197f674$var$scrubVec(this._key);
};
$79b234141197f674$export$b80fbe1c3a2b92b5 = $79b234141197f674$var$AES;

});

parcelRequire.register("ahYIk", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $77da96732eb56693$require$Buffer = $cBldb.Buffer;
var $77da96732eb56693$var$ZEROES = $77da96732eb56693$require$Buffer.alloc(16, 0);
function $77da96732eb56693$var$toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function $77da96732eb56693$var$fromArray(out) {
    var buf = $77da96732eb56693$require$Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function $77da96732eb56693$var$GHASH(key) {
    this.h = key;
    this.state = $77da96732eb56693$require$Buffer.alloc(16, 0);
    this.cache = $77da96732eb56693$require$Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
$77da96732eb56693$var$GHASH.prototype.ghash = function(block) {
    var i = -1;
    while(++i < block.length)this.state[i] ^= block[i];
    this._multiply();
};
$77da96732eb56693$var$GHASH.prototype._multiply = function() {
    var Vi = $77da96732eb56693$var$toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while(++i < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = $77da96732eb56693$var$fromArray(Zi);
};
$77da96732eb56693$var$GHASH.prototype.update = function(buf) {
    this.cache = $77da96732eb56693$require$Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
$77da96732eb56693$var$GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash($77da96732eb56693$require$Buffer.concat([
        this.cache,
        $77da96732eb56693$var$ZEROES
    ], 16));
    this.ghash($77da96732eb56693$var$fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = $77da96732eb56693$var$GHASH;

});


parcelRequire.register("kH1jT", function(module, exports) {

var $arMHy = parcelRequire("arMHy");

var $cBldb = parcelRequire("cBldb");
var $f108d8e7de7a2885$require$Buffer = $cBldb.Buffer;

var $9VTgz = parcelRequire("9VTgz");

var $fGyu9 = parcelRequire("fGyu9");
function $f108d8e7de7a2885$var$StreamCipher(mode, key, iv, decrypt) {
    $9VTgz.call(this);
    this._cipher = new $arMHy.AES(key);
    this._prev = $f108d8e7de7a2885$require$Buffer.from(iv);
    this._cache = $f108d8e7de7a2885$require$Buffer.allocUnsafe(0);
    this._secCache = $f108d8e7de7a2885$require$Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
$fGyu9($f108d8e7de7a2885$var$StreamCipher, $9VTgz);
$f108d8e7de7a2885$var$StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
$f108d8e7de7a2885$var$StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = $f108d8e7de7a2885$var$StreamCipher;

});

parcelRequire.register("302s8", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $22f3463f8754418e$require$Buffer = $cBldb.Buffer;

var $Snhio = parcelRequire("Snhio");
/* eslint-disable camelcase */ function $22f3463f8754418e$var$EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!$22f3463f8754418e$require$Buffer.isBuffer(password)) password = $22f3463f8754418e$require$Buffer.from(password, 'binary');
    if (salt) {
        if (!$22f3463f8754418e$require$Buffer.isBuffer(salt)) salt = $22f3463f8754418e$require$Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
    }
    var keyLen = keyBits / 8;
    var key = $22f3463f8754418e$require$Buffer.alloc(keyLen);
    var iv = $22f3463f8754418e$require$Buffer.alloc(ivLen || 0);
    var tmp = $22f3463f8754418e$require$Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new $Snhio();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = $22f3463f8754418e$var$EVP_BytesToKey;

});


parcelRequire.register("h3RP8", function(module, exports) {

$parcel$export(module.exports, "createDecipher", () => $c6bc77bc582a14ae$export$12ada9414fbc594c, (v) => $c6bc77bc582a14ae$export$12ada9414fbc594c = v);
$parcel$export(module.exports, "createDecipheriv", () => $c6bc77bc582a14ae$export$36b6d6ef312eab39, (v) => $c6bc77bc582a14ae$export$36b6d6ef312eab39 = v);
var $c6bc77bc582a14ae$export$12ada9414fbc594c;
var $c6bc77bc582a14ae$export$36b6d6ef312eab39;

var $BXZ5A = parcelRequire("BXZ5A");

var $cBldb = parcelRequire("cBldb");
var $c6bc77bc582a14ae$require$Buffer = $cBldb.Buffer;

var $9h0VP = parcelRequire("9h0VP");

var $kH1jT = parcelRequire("kH1jT");

var $9VTgz = parcelRequire("9VTgz");

var $arMHy = parcelRequire("arMHy");

var $302s8 = parcelRequire("302s8");

var $fGyu9 = parcelRequire("fGyu9");
function $c6bc77bc582a14ae$var$Decipher(mode, key, iv) {
    $9VTgz.call(this);
    this._cache = new $c6bc77bc582a14ae$var$Splitter();
    this._last = void 0;
    this._cipher = new $arMHy.AES(key);
    this._prev = $c6bc77bc582a14ae$require$Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
$fGyu9($c6bc77bc582a14ae$var$Decipher, $9VTgz);
$c6bc77bc582a14ae$var$Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return $c6bc77bc582a14ae$require$Buffer.concat(out);
};
$c6bc77bc582a14ae$var$Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return $c6bc77bc582a14ae$var$unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error('data not multiple of block length');
};
$c6bc77bc582a14ae$var$Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function $c6bc77bc582a14ae$var$Splitter() {
    this.cache = $c6bc77bc582a14ae$require$Buffer.allocUnsafe(0);
}
$c6bc77bc582a14ae$var$Splitter.prototype.add = function(data) {
    this.cache = $c6bc77bc582a14ae$require$Buffer.concat([
        this.cache,
        data
    ]);
};
$c6bc77bc582a14ae$var$Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
$c6bc77bc582a14ae$var$Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function $c6bc77bc582a14ae$var$unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error('unable to decrypt data');
    var i = -1;
    while(++i < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error('unable to decrypt data');
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function $c6bc77bc582a14ae$var$createDecipheriv(suite, password, iv) {
    var config = $9h0VP[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof iv === 'string') iv = $c6bc77bc582a14ae$require$Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (typeof password === 'string') password = $c6bc77bc582a14ae$require$Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (config.type === 'stream') return new $kH1jT(config.module, password, iv, true);
    else if (config.type === 'auth') return new $BXZ5A(config.module, password, iv, true);
    return new $c6bc77bc582a14ae$var$Decipher(config.module, password, iv);
}
function $c6bc77bc582a14ae$var$createDecipher(suite, password) {
    var config = $9h0VP[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = $302s8(password, false, config.key, config.iv);
    return $c6bc77bc582a14ae$var$createDecipheriv(suite, keys.key, keys.iv);
}
$c6bc77bc582a14ae$export$12ada9414fbc594c = $c6bc77bc582a14ae$var$createDecipher;
$c6bc77bc582a14ae$export$36b6d6ef312eab39 = $c6bc77bc582a14ae$var$createDecipheriv;

});


parcelRequire.register("6flwu", function(module, exports) {

$parcel$export(module.exports, "des-ecb", () => $48c4d6d181cd5212$export$116f8a5cee447347, (v) => $48c4d6d181cd5212$export$116f8a5cee447347 = v);
$parcel$export(module.exports, "des-cbc", () => $48c4d6d181cd5212$export$7483c4066bfb7ae9, (v) => $48c4d6d181cd5212$export$7483c4066bfb7ae9 = v);
$parcel$export(module.exports, "des", () => $48c4d6d181cd5212$export$e7a565d2e588bb06, (v) => $48c4d6d181cd5212$export$e7a565d2e588bb06 = v);
$parcel$export(module.exports, "des-ede3-cbc", () => $48c4d6d181cd5212$export$aaa2f54a426f3eb8, (v) => $48c4d6d181cd5212$export$aaa2f54a426f3eb8 = v);
$parcel$export(module.exports, "des3", () => $48c4d6d181cd5212$export$eba20568dde4ada, (v) => $48c4d6d181cd5212$export$eba20568dde4ada = v);
$parcel$export(module.exports, "des-ede3", () => $48c4d6d181cd5212$export$d3b5e5996938f5ae, (v) => $48c4d6d181cd5212$export$d3b5e5996938f5ae = v);
$parcel$export(module.exports, "des-ede-cbc", () => $48c4d6d181cd5212$export$57c08356130bc99b, (v) => $48c4d6d181cd5212$export$57c08356130bc99b = v);
$parcel$export(module.exports, "des-ede", () => $48c4d6d181cd5212$export$c7169791d5c1e65d, (v) => $48c4d6d181cd5212$export$c7169791d5c1e65d = v);
var $48c4d6d181cd5212$export$116f8a5cee447347;
var $48c4d6d181cd5212$export$7483c4066bfb7ae9;
var $48c4d6d181cd5212$export$e7a565d2e588bb06;
var $48c4d6d181cd5212$export$aaa2f54a426f3eb8;
var $48c4d6d181cd5212$export$eba20568dde4ada;
var $48c4d6d181cd5212$export$d3b5e5996938f5ae;
var $48c4d6d181cd5212$export$57c08356130bc99b;
var $48c4d6d181cd5212$export$c7169791d5c1e65d;
$48c4d6d181cd5212$export$116f8a5cee447347 = {
    key: 8,
    iv: 0
};
$48c4d6d181cd5212$export$7483c4066bfb7ae9 = $48c4d6d181cd5212$export$e7a565d2e588bb06 = {
    key: 8,
    iv: 8
};
$48c4d6d181cd5212$export$aaa2f54a426f3eb8 = $48c4d6d181cd5212$export$eba20568dde4ada = {
    key: 24,
    iv: 8
};
$48c4d6d181cd5212$export$d3b5e5996938f5ae = {
    key: 24,
    iv: 0
};
$48c4d6d181cd5212$export$57c08356130bc99b = {
    key: 16,
    iv: 8
};
$48c4d6d181cd5212$export$c7169791d5c1e65d = {
    key: 16,
    iv: 0
};

});


parcelRequire.register("5XzMx", function(module, exports) {

$parcel$export(module.exports, "DiffieHellmanGroup", () => $456e37f6c4e9daf3$export$971862a2fcb1bb40, (v) => $456e37f6c4e9daf3$export$971862a2fcb1bb40 = v);
$parcel$export(module.exports, "createDiffieHellmanGroup", () => $456e37f6c4e9daf3$export$c6ff6a88acbeaf40, (v) => $456e37f6c4e9daf3$export$c6ff6a88acbeaf40 = v);
$parcel$export(module.exports, "getDiffieHellman", () => $456e37f6c4e9daf3$export$fdc27893e98845cc, (v) => $456e37f6c4e9daf3$export$fdc27893e98845cc = v);
$parcel$export(module.exports, "createDiffieHellman", () => $456e37f6c4e9daf3$export$6671fb9a1323bed, (v) => $456e37f6c4e9daf3$export$6671fb9a1323bed = v);
$parcel$export(module.exports, "DiffieHellman", () => $456e37f6c4e9daf3$export$d74daf141a551db, (v) => $456e37f6c4e9daf3$export$d74daf141a551db = v);
var $456e37f6c4e9daf3$export$971862a2fcb1bb40;
var $456e37f6c4e9daf3$export$c6ff6a88acbeaf40;
var $456e37f6c4e9daf3$export$fdc27893e98845cc;
var $456e37f6c4e9daf3$export$6671fb9a1323bed;
var $456e37f6c4e9daf3$export$d74daf141a551db;

var $456e37f6c4e9daf3$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $kHsoD = parcelRequire("kHsoD");

var $fzkBW = parcelRequire("fzkBW");

var $VOHiJ = parcelRequire("VOHiJ");
function $456e37f6c4e9daf3$var$getDiffieHellman(mod) {
    var prime = new $456e37f6c4e9daf3$require$Buffer($fzkBW[mod].prime, 'hex');
    var gen = new $456e37f6c4e9daf3$require$Buffer($fzkBW[mod].gen, 'hex');
    return new $VOHiJ(prime, gen);
}
var $456e37f6c4e9daf3$var$ENCODINGS = {
    'binary': true,
    'hex': true,
    'base64': true
};
function $456e37f6c4e9daf3$var$createDiffieHellman(prime, enc, generator, genc) {
    if ($456e37f6c4e9daf3$require$Buffer.isBuffer(enc) || $456e37f6c4e9daf3$var$ENCODINGS[enc] === undefined) return $456e37f6c4e9daf3$var$createDiffieHellman(prime, 'binary', enc, generator);
    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new $456e37f6c4e9daf3$require$Buffer([
        2
    ]);
    if (!$456e37f6c4e9daf3$require$Buffer.isBuffer(generator)) generator = new $456e37f6c4e9daf3$require$Buffer(generator, genc);
    if (typeof prime === 'number') return new $VOHiJ($kHsoD(prime, generator), generator, true);
    if (!$456e37f6c4e9daf3$require$Buffer.isBuffer(prime)) prime = new $456e37f6c4e9daf3$require$Buffer(prime, enc);
    return new $VOHiJ(prime, generator, true);
}
$456e37f6c4e9daf3$export$971862a2fcb1bb40 = $456e37f6c4e9daf3$export$c6ff6a88acbeaf40 = $456e37f6c4e9daf3$export$fdc27893e98845cc = $456e37f6c4e9daf3$var$getDiffieHellman;
$456e37f6c4e9daf3$export$6671fb9a1323bed = $456e37f6c4e9daf3$export$d74daf141a551db = $456e37f6c4e9daf3$var$createDiffieHellman;

});
parcelRequire.register("kHsoD", function(module, exports) {

var $hWy1J = parcelRequire("hWy1J");
module.exports = $f11dd9b5fb533a87$var$findPrime;
$f11dd9b5fb533a87$var$findPrime.simpleSieve = $f11dd9b5fb533a87$var$simpleSieve;
$f11dd9b5fb533a87$var$findPrime.fermatTest = $f11dd9b5fb533a87$var$fermatTest;

var $9i2Ru = parcelRequire("9i2Ru");
var $f11dd9b5fb533a87$var$TWENTYFOUR = new $9i2Ru(24);

var $dHYTe = parcelRequire("dHYTe");
var $f11dd9b5fb533a87$var$millerRabin = new $dHYTe();
var $f11dd9b5fb533a87$var$ONE = new $9i2Ru(1);
var $f11dd9b5fb533a87$var$TWO = new $9i2Ru(2);
var $f11dd9b5fb533a87$var$FIVE = new $9i2Ru(5);
var $f11dd9b5fb533a87$var$SIXTEEN = new $9i2Ru(16);
var $f11dd9b5fb533a87$var$EIGHT = new $9i2Ru(8);
var $f11dd9b5fb533a87$var$TEN = new $9i2Ru(10);
var $f11dd9b5fb533a87$var$THREE = new $9i2Ru(3);
var $f11dd9b5fb533a87$var$SEVEN = new $9i2Ru(7);
var $f11dd9b5fb533a87$var$ELEVEN = new $9i2Ru(11);
var $f11dd9b5fb533a87$var$FOUR = new $9i2Ru(4);
var $f11dd9b5fb533a87$var$TWELVE = new $9i2Ru(12);
var $f11dd9b5fb533a87$var$primes = null;
function $f11dd9b5fb533a87$var$_getPrimes() {
    if ($f11dd9b5fb533a87$var$primes !== null) return $f11dd9b5fb533a87$var$primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    $f11dd9b5fb533a87$var$primes = res;
    return res;
}
function $f11dd9b5fb533a87$var$simpleSieve(p) {
    var primes = $f11dd9b5fb533a87$var$_getPrimes();
    for(var i = 0; i < primes.length; i++)if (p.modn(primes[i]) === 0) {
        if (p.cmpn(primes[i]) === 0) return true;
        else return false;
    }
    return true;
}
function $f11dd9b5fb533a87$var$fermatTest(p) {
    var red = $9i2Ru.mont(p);
    return $f11dd9b5fb533a87$var$TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function $f11dd9b5fb533a87$var$findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new $9i2Ru([
            140,
            123
        ]);
        else return new $9i2Ru([
            140,
            39
        ]);
    }
    gen = new $9i2Ru(gen);
    var num, n2;
    while(true){
        num = new $9i2Ru($hWy1J(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd($f11dd9b5fb533a87$var$ONE);
        if (!num.testn(1)) num.iadd($f11dd9b5fb533a87$var$TWO);
        if (!gen.cmp($f11dd9b5fb533a87$var$TWO)) while(num.mod($f11dd9b5fb533a87$var$TWENTYFOUR).cmp($f11dd9b5fb533a87$var$ELEVEN))num.iadd($f11dd9b5fb533a87$var$FOUR);
        else if (!gen.cmp($f11dd9b5fb533a87$var$FIVE)) while(num.mod($f11dd9b5fb533a87$var$TEN).cmp($f11dd9b5fb533a87$var$THREE))num.iadd($f11dd9b5fb533a87$var$FOUR);
        n2 = num.shrn(1);
        if ($f11dd9b5fb533a87$var$simpleSieve(n2) && $f11dd9b5fb533a87$var$simpleSieve(num) && $f11dd9b5fb533a87$var$fermatTest(n2) && $f11dd9b5fb533a87$var$fermatTest(num) && $f11dd9b5fb533a87$var$millerRabin.test(n2) && $f11dd9b5fb533a87$var$millerRabin.test(num)) return num;
    }
}

});
parcelRequire.register("dHYTe", function(module, exports) {

var $9i2Ru = parcelRequire("9i2Ru");

var $2d653 = parcelRequire("2d653");
function $9fae85f85e5c38c1$var$MillerRabin(rand) {
    this.rand = rand || new $2d653.Rand();
}
module.exports = $9fae85f85e5c38c1$var$MillerRabin;
$9fae85f85e5c38c1$var$MillerRabin.create = function create(rand) {
    return new $9fae85f85e5c38c1$var$MillerRabin(rand);
};
$9fae85f85e5c38c1$var$MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new $9i2Ru(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0)
    return a;
};
$9fae85f85e5c38c1$var$MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
$9fae85f85e5c38c1$var$MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = $9i2Ru.mont(n);
    var rone = new $9i2Ru(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new $9i2Ru(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
$9fae85f85e5c38c1$var$MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = $9i2Ru.mont(n);
    var rone = new $9i2Ru(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new $9i2Ru(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

});


parcelRequire.register("fzkBW", function(module, exports) {
module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

});

parcelRequire.register("VOHiJ", function(module, exports) {

var $0adca66f3b7b2588$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $9i2Ru = parcelRequire("9i2Ru");

var $dHYTe = parcelRequire("dHYTe");
var $0adca66f3b7b2588$var$millerRabin = new $dHYTe();
var $0adca66f3b7b2588$var$TWENTYFOUR = new $9i2Ru(24);
var $0adca66f3b7b2588$var$ELEVEN = new $9i2Ru(11);
var $0adca66f3b7b2588$var$TEN = new $9i2Ru(10);
var $0adca66f3b7b2588$var$THREE = new $9i2Ru(3);
var $0adca66f3b7b2588$var$SEVEN = new $9i2Ru(7);

var $kHsoD = parcelRequire("kHsoD");

var $hWy1J = parcelRequire("hWy1J");
module.exports = $0adca66f3b7b2588$var$DH;
function $0adca66f3b7b2588$var$setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!$0adca66f3b7b2588$require$Buffer.isBuffer(pub)) pub = new $0adca66f3b7b2588$require$Buffer(pub, enc);
    this._pub = new $9i2Ru(pub);
    return this;
}
function $0adca66f3b7b2588$var$setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!$0adca66f3b7b2588$require$Buffer.isBuffer(priv)) priv = new $0adca66f3b7b2588$require$Buffer(priv, enc);
    this._priv = new $9i2Ru(priv);
    return this;
}
var $0adca66f3b7b2588$var$primeCache = {};
function $0adca66f3b7b2588$var$checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [
        gen,
        prime.toString(16)
    ].join('_');
    if (hex in $0adca66f3b7b2588$var$primeCache) return $0adca66f3b7b2588$var$primeCache[hex];
    var error = 0;
    if (prime.isEven() || !$kHsoD.simpleSieve || !$kHsoD.fermatTest(prime) || !$0adca66f3b7b2588$var$millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === '02' || gen === '05') // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        $0adca66f3b7b2588$var$primeCache[hex] = error;
        return error;
    }
    if (!$0adca66f3b7b2588$var$millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case '02':
            if (prime.mod($0adca66f3b7b2588$var$TWENTYFOUR).cmp($0adca66f3b7b2588$var$ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case '05':
            rem = prime.mod($0adca66f3b7b2588$var$TEN);
            if (rem.cmp($0adca66f3b7b2588$var$THREE) && rem.cmp($0adca66f3b7b2588$var$SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    $0adca66f3b7b2588$var$primeCache[hex] = error;
    return error;
}
function $0adca66f3b7b2588$var$DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new $9i2Ru(prime);
    this._prime = $9i2Ru.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = $0adca66f3b7b2588$var$setPublicKey;
        this.setPrivateKey = $0adca66f3b7b2588$var$setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty($0adca66f3b7b2588$var$DH.prototype, 'verifyError', {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== 'number') this._primeCode = $0adca66f3b7b2588$var$checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
$0adca66f3b7b2588$var$DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new $9i2Ru($hWy1J(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
$0adca66f3b7b2588$var$DH.prototype.computeSecret = function(other) {
    other = new $9i2Ru(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new $0adca66f3b7b2588$require$Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new $0adca66f3b7b2588$require$Buffer(prime.length - out.length);
        front.fill(0);
        out = $0adca66f3b7b2588$require$Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
$0adca66f3b7b2588$var$DH.prototype.getPublicKey = function getPublicKey(enc) {
    return $0adca66f3b7b2588$var$formatReturnValue(this._pub, enc);
};
$0adca66f3b7b2588$var$DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return $0adca66f3b7b2588$var$formatReturnValue(this._priv, enc);
};
$0adca66f3b7b2588$var$DH.prototype.getPrime = function(enc) {
    return $0adca66f3b7b2588$var$formatReturnValue(this.__prime, enc);
};
$0adca66f3b7b2588$var$DH.prototype.getGenerator = function(enc) {
    return $0adca66f3b7b2588$var$formatReturnValue(this._gen, enc);
};
$0adca66f3b7b2588$var$DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || 'utf8';
    if (!$0adca66f3b7b2588$require$Buffer.isBuffer(gen)) gen = new $0adca66f3b7b2588$require$Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new $9i2Ru(gen);
    return this;
};
function $0adca66f3b7b2588$var$formatReturnValue(bn, enc) {
    var buf = new $0adca66f3b7b2588$require$Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

});


parcelRequire.register("2WIkX", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $225363f6bd9fa051$require$Buffer = $cBldb.Buffer;

var $cGz00 = parcelRequire("cGz00");

var $55xsE = parcelRequire("55xsE");

var $fGyu9 = parcelRequire("fGyu9");

var $aJihS = parcelRequire("aJihS");

var $19MQR = parcelRequire("19MQR");

var $ivekz = parcelRequire("ivekz");
Object.keys($ivekz).forEach(function(key) {
    $ivekz[key].id = $225363f6bd9fa051$require$Buffer.from($ivekz[key].id, 'hex');
    $ivekz[key.toLowerCase()] = $ivekz[key];
});
function $225363f6bd9fa051$var$Sign(algorithm) {
    $55xsE.Writable.call(this);
    var data = $ivekz[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hashType = data.hash;
    this._hash = $cGz00(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$fGyu9($225363f6bd9fa051$var$Sign, $55xsE.Writable);
$225363f6bd9fa051$var$Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$225363f6bd9fa051$var$Sign.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = $225363f6bd9fa051$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$225363f6bd9fa051$var$Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = $aJihS(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function $225363f6bd9fa051$var$Verify(algorithm) {
    $55xsE.Writable.call(this);
    var data = $ivekz[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hash = $cGz00(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
$fGyu9($225363f6bd9fa051$var$Verify, $55xsE.Writable);
$225363f6bd9fa051$var$Verify.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
$225363f6bd9fa051$var$Verify.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = $225363f6bd9fa051$require$Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
$225363f6bd9fa051$var$Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === 'string') sig = $225363f6bd9fa051$require$Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return $19MQR(sig, hash, key, this._signType, this._tag);
};
function $225363f6bd9fa051$var$createSign(algorithm) {
    return new $225363f6bd9fa051$var$Sign(algorithm);
}
function $225363f6bd9fa051$var$createVerify(algorithm) {
    return new $225363f6bd9fa051$var$Verify(algorithm);
}
module.exports = {
    Sign: $225363f6bd9fa051$var$createSign,
    Verify: $225363f6bd9fa051$var$createVerify,
    createSign: $225363f6bd9fa051$var$createSign,
    createVerify: $225363f6bd9fa051$var$createVerify
};

});
parcelRequire.register("aJihS", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $7cfc4ad9d6559ee0$require$Buffer = $cBldb.Buffer;

var $lxJro = parcelRequire("lxJro");

var $iCOZ1 = parcelRequire("iCOZ1");

var $hJ0wi = parcelRequire("hJ0wi");
var $7cfc4ad9d6559ee0$require$EC = $hJ0wi.ec;

var $djF8R = parcelRequire("djF8R");

var $iyQDI = parcelRequire("iyQDI");

var $dBKbA = parcelRequire("dBKbA");
function $7cfc4ad9d6559ee0$var$sign(hash, key, hashType, signType, tag) {
    var priv = $iyQDI(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return $7cfc4ad9d6559ee0$var$ecSign(hash, priv);
    } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return $7cfc4ad9d6559ee0$var$dsaSign(hash, priv, hashType);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    }
    hash = $7cfc4ad9d6559ee0$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(255);
    pad.push(0);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    var out = $iCOZ1(pad, priv);
    return out;
}
function $7cfc4ad9d6559ee0$var$ecSign(hash, priv) {
    var curveId = $dBKbA[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
    var curve = new $7cfc4ad9d6559ee0$require$EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return $7cfc4ad9d6559ee0$require$Buffer.from(out.toDER());
}
function $7cfc4ad9d6559ee0$var$dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new $djF8R(0);
    var k;
    var H = $7cfc4ad9d6559ee0$var$bits2int(hash, q).mod(q);
    var s = false;
    var kv = $7cfc4ad9d6559ee0$var$getKey(x, q, hash, algo);
    while(s === false){
        k = $7cfc4ad9d6559ee0$var$makeKey(q, kv, algo);
        r = $7cfc4ad9d6559ee0$var$makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new $djF8R(0);
        }
    }
    return $7cfc4ad9d6559ee0$var$toDER(r, s);
}
function $7cfc4ad9d6559ee0$var$toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    if (s[0] & 128) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        48,
        total,
        2,
        r.length
    ];
    res = res.concat(r, [
        2,
        s.length
    ], s);
    return $7cfc4ad9d6559ee0$require$Buffer.from(res);
}
function $7cfc4ad9d6559ee0$var$getKey(x, q, hash, algo) {
    x = $7cfc4ad9d6559ee0$require$Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = $7cfc4ad9d6559ee0$require$Buffer.alloc(q.byteLength() - x.length);
        x = $7cfc4ad9d6559ee0$require$Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = $7cfc4ad9d6559ee0$var$bits2octets(hash, q);
    var v = $7cfc4ad9d6559ee0$require$Buffer.alloc(hlen);
    v.fill(1);
    var k = $7cfc4ad9d6559ee0$require$Buffer.alloc(hlen);
    k = $lxJro(algo, k).update(v).update($7cfc4ad9d6559ee0$require$Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = $lxJro(algo, k).update(v).digest();
    k = $lxJro(algo, k).update(v).update($7cfc4ad9d6559ee0$require$Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = $lxJro(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function $7cfc4ad9d6559ee0$var$bits2int(obits, q) {
    var bits = new $djF8R(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function $7cfc4ad9d6559ee0$var$bits2octets(bits, q) {
    bits = $7cfc4ad9d6559ee0$var$bits2int(bits, q);
    bits = bits.mod(q);
    var out = $7cfc4ad9d6559ee0$require$Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = $7cfc4ad9d6559ee0$require$Buffer.alloc(q.byteLength() - out.length);
        out = $7cfc4ad9d6559ee0$require$Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function $7cfc4ad9d6559ee0$var$makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = $7cfc4ad9d6559ee0$require$Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = $lxJro(algo, kv.k).update(kv.v).digest();
            t = $7cfc4ad9d6559ee0$require$Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = $7cfc4ad9d6559ee0$var$bits2int(t, q);
        kv.k = $lxJro(algo, kv.k).update(kv.v).update($7cfc4ad9d6559ee0$require$Buffer.from([
            0
        ])).digest();
        kv.v = $lxJro(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1)
    return k;
}
function $7cfc4ad9d6559ee0$var$makeR(g, k, p, q) {
    return g.toRed($djF8R.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = $7cfc4ad9d6559ee0$var$sign;
module.exports.getKey = $7cfc4ad9d6559ee0$var$getKey;
module.exports.makeKey = $7cfc4ad9d6559ee0$var$makeKey;

});
parcelRequire.register("iCOZ1", function(module, exports) {

var $d8f352cbc6ae4db8$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $1sdFw = parcelRequire("1sdFw");

var $hWy1J = parcelRequire("hWy1J");
function $d8f352cbc6ae4db8$var$blind(priv) {
    var r = $d8f352cbc6ae4db8$var$getr(priv);
    var blinder = r.toRed($1sdFw.mont(priv.modulus)).redPow(new $1sdFw(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function $d8f352cbc6ae4db8$var$getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new $1sdFw($hWy1J(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
    return r;
}
function $d8f352cbc6ae4db8$var$crt(msg, priv) {
    var blinds = $d8f352cbc6ae4db8$var$blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new $1sdFw(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed($1sdFw.mont(priv.prime1));
    var c2 = blinded.toRed($1sdFw.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike($d8f352cbc6ae4db8$require$Buffer, 'be', len);
}
$d8f352cbc6ae4db8$var$crt.getr = $d8f352cbc6ae4db8$var$getr;
module.exports = $d8f352cbc6ae4db8$var$crt;

});
parcelRequire.register("1sdFw", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("lb6jJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});


parcelRequire.register("djF8R", function(module, exports) {

(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = (parcelRequire("lb6jJ")).Buffer;
    } catch (e) {}
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e1) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if (++i < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while(i-- > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while(j-- > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while(i-- > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while(j-- > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(module, this);

});

parcelRequire.register("iyQDI", function(module, exports) {

var $5gZR0 = parcelRequire("5gZR0");

var $3YyaE = parcelRequire("3YyaE");

var $gpwrd = parcelRequire("gpwrd");

var $8MsG9 = parcelRequire("8MsG9");

var $6qQyy = parcelRequire("6qQyy");

var $cBldb = parcelRequire("cBldb");
var $d8343c18312f6fd2$require$Buffer = $cBldb.Buffer;
module.exports = $d8343c18312f6fd2$var$parseKeys;
function $d8343c18312f6fd2$var$parseKeys(buffer) {
    var password;
    if (typeof buffer === 'object' && !$d8343c18312f6fd2$require$Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === 'string') buffer = $d8343c18312f6fd2$require$Buffer.from(buffer);
    var stripped = $gpwrd(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case 'CERTIFICATE':
            ndata = $5gZR0.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case 'PUBLIC KEY':
            if (!ndata) ndata = $5gZR0.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return $5gZR0.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
                case '1.2.840.10045.2.1':
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: 'ec',
                        data: ndata
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.pub_key = $5gZR0.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                    return {
                        type: 'dsa',
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
            data = $5gZR0.EncryptedPrivateKey.decode(data, 'der');
            data = $d8343c18312f6fd2$var$decrypt(data, password);
        // falls through
        case 'PRIVATE KEY':
            ndata = $5gZR0.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return $5gZR0.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
                case '1.2.840.10045.2.1':
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: $5gZR0.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.priv_key = $5gZR0.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                    return {
                        type: 'dsa',
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
            return $5gZR0.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
            return $5gZR0.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
            return {
                type: 'dsa',
                params: $5gZR0.DSAPrivateKey.decode(data, 'der')
            };
        case 'EC PRIVATE KEY':
            data = $5gZR0.ECPrivateKey.decode(data, 'der');
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error('unknown key type ' + type);
    }
}
$d8343c18312f6fd2$var$parseKeys.signature = $5gZR0.signature;
function $d8343c18312f6fd2$var$decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = $3YyaE[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = $6qQyy.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
    var cipher = $8MsG9.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return $d8343c18312f6fd2$require$Buffer.concat(out);
}

});
parcelRequire.register("5gZR0", function(module, exports) {

$parcel$export(module.exports, "certificate", () => $3d6e6d488bd1167c$export$c98397a6eb8d0678, (v) => $3d6e6d488bd1167c$export$c98397a6eb8d0678 = v);
$parcel$export(module.exports, "RSAPrivateKey", () => $3d6e6d488bd1167c$export$f4aab6816f64fa6b, (v) => $3d6e6d488bd1167c$export$f4aab6816f64fa6b = v);
$parcel$export(module.exports, "RSAPublicKey", () => $3d6e6d488bd1167c$export$4471f5c65d097c11, (v) => $3d6e6d488bd1167c$export$4471f5c65d097c11 = v);
$parcel$export(module.exports, "PublicKey", () => $3d6e6d488bd1167c$export$ca8b6604d6ce14de, (v) => $3d6e6d488bd1167c$export$ca8b6604d6ce14de = v);
$parcel$export(module.exports, "PrivateKey", () => $3d6e6d488bd1167c$export$8f54525b330fd87b, (v) => $3d6e6d488bd1167c$export$8f54525b330fd87b = v);
$parcel$export(module.exports, "EncryptedPrivateKey", () => $3d6e6d488bd1167c$export$23cd2842b44ca3e7, (v) => $3d6e6d488bd1167c$export$23cd2842b44ca3e7 = v);
$parcel$export(module.exports, "DSAPrivateKey", () => $3d6e6d488bd1167c$export$245c9aaa9f5ce4ce, (v) => $3d6e6d488bd1167c$export$245c9aaa9f5ce4ce = v);
$parcel$export(module.exports, "DSAparam", () => $3d6e6d488bd1167c$export$8ad762e3e6399afe, (v) => $3d6e6d488bd1167c$export$8ad762e3e6399afe = v);
$parcel$export(module.exports, "ECPrivateKey", () => $3d6e6d488bd1167c$export$32ef6f92e22c6ab0, (v) => $3d6e6d488bd1167c$export$32ef6f92e22c6ab0 = v);
$parcel$export(module.exports, "signature", () => $3d6e6d488bd1167c$export$c9cd164b539ebb63, (v) => $3d6e6d488bd1167c$export$c9cd164b539ebb63 = v);
var $3d6e6d488bd1167c$export$c98397a6eb8d0678;
var $3d6e6d488bd1167c$export$f4aab6816f64fa6b;
var $3d6e6d488bd1167c$export$4471f5c65d097c11;
var $3d6e6d488bd1167c$export$ca8b6604d6ce14de;
var $3d6e6d488bd1167c$export$8f54525b330fd87b;
var $3d6e6d488bd1167c$export$23cd2842b44ca3e7;
var $3d6e6d488bd1167c$export$245c9aaa9f5ce4ce;
var $3d6e6d488bd1167c$export$8ad762e3e6399afe;
var $3d6e6d488bd1167c$export$32ef6f92e22c6ab0;
var $3d6e6d488bd1167c$export$c9cd164b539ebb63;
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';

var $amBBc = parcelRequire("amBBc");

$3d6e6d488bd1167c$export$c98397a6eb8d0678 = (parcelRequire("4Wi2c"));
var $3d6e6d488bd1167c$var$RSAPrivateKey = $amBBc.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
$3d6e6d488bd1167c$export$f4aab6816f64fa6b = $3d6e6d488bd1167c$var$RSAPrivateKey;
var $3d6e6d488bd1167c$var$RSAPublicKey = $amBBc.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
$3d6e6d488bd1167c$export$4471f5c65d097c11 = $3d6e6d488bd1167c$var$RSAPublicKey;
var $3d6e6d488bd1167c$var$PublicKey = $amBBc.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use($3d6e6d488bd1167c$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
$3d6e6d488bd1167c$export$ca8b6604d6ce14de = $3d6e6d488bd1167c$var$PublicKey;
var $3d6e6d488bd1167c$var$AlgorithmIdentifier = $amBBc.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});
var $3d6e6d488bd1167c$var$PrivateKeyInfo = $amBBc.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version').int(), this.key('algorithm').use($3d6e6d488bd1167c$var$AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
$3d6e6d488bd1167c$export$8f54525b330fd87b = $3d6e6d488bd1167c$var$PrivateKeyInfo;
var $3d6e6d488bd1167c$var$EncryptedPrivateKeyInfo = $amBBc.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
$3d6e6d488bd1167c$export$23cd2842b44ca3e7 = $3d6e6d488bd1167c$var$EncryptedPrivateKeyInfo;
var $3d6e6d488bd1167c$var$DSAPrivateKey = $amBBc.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
$3d6e6d488bd1167c$export$245c9aaa9f5ce4ce = $3d6e6d488bd1167c$var$DSAPrivateKey;
$3d6e6d488bd1167c$export$8ad762e3e6399afe = $amBBc.define('DSAparam', function() {
    this.int();
});
var $3d6e6d488bd1167c$var$ECPrivateKey = $amBBc.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use($3d6e6d488bd1167c$var$ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
$3d6e6d488bd1167c$export$32ef6f92e22c6ab0 = $3d6e6d488bd1167c$var$ECPrivateKey;
var $3d6e6d488bd1167c$var$ECParameters = $amBBc.define('ECParameters', function() {
    this.choice({
        namedCurve: this.objid()
    });
});
$3d6e6d488bd1167c$export$c9cd164b539ebb63 = $amBBc.define('signature', function() {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});

});
parcelRequire.register("amBBc", function(module, exports) {
'use strict';
const $78b91fd10557f973$var$asn1 = module.exports;

$78b91fd10557f973$var$asn1.bignum = (parcelRequire("9i2Ru"));

$78b91fd10557f973$var$asn1.define = (parcelRequire("boje7")).define;

$78b91fd10557f973$var$asn1.base = (parcelRequire("cWOvV"));

$78b91fd10557f973$var$asn1.constants = (parcelRequire("73fH4"));

$78b91fd10557f973$var$asn1.decoders = (parcelRequire("aHc5b"));

$78b91fd10557f973$var$asn1.encoders = (parcelRequire("cCW6f"));

});
parcelRequire.register("boje7", function(module, exports) {
'use strict';

var $cCW6f = parcelRequire("cCW6f");

var $aHc5b = parcelRequire("aHc5b");

var $fGyu9 = parcelRequire("fGyu9");
const $84b0d9a6fbd29e45$var$api = module.exports;
$84b0d9a6fbd29e45$var$api.define = function define(name, body) {
    return new $84b0d9a6fbd29e45$var$Entity(name, body);
};
function $84b0d9a6fbd29e45$var$Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {};
    this.encoders = {};
}
$84b0d9a6fbd29e45$var$Entity.prototype._createNamed = function createNamed(Base) {
    const name1 = this.name;
    function Generated(entity) {
        this._initNamed(entity, name1);
    }
    $fGyu9(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name) {
        Base.call(this, entity, name);
    };
    return new Generated(this);
};
$84b0d9a6fbd29e45$var$Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed($aHc5b[enc]);
    return this.decoders[enc];
};
$84b0d9a6fbd29e45$var$Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
$84b0d9a6fbd29e45$var$Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed($cCW6f[enc]);
    return this.encoders[enc];
};
$84b0d9a6fbd29e45$var$Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

});
parcelRequire.register("cCW6f", function(module, exports) {
'use strict';
const $93161a0d79ad6799$var$encoders = module.exports;

$93161a0d79ad6799$var$encoders.der = (parcelRequire("dIMeu"));

$93161a0d79ad6799$var$encoders.pem = (parcelRequire("4Hvu1"));

});
parcelRequire.register("dIMeu", function(module, exports) {
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $xaL3N = parcelRequire("xaL3N");
var $9fd4cc7450edb279$require$Buffer = $xaL3N.Buffer;

var $2Z4y0 = parcelRequire("2Z4y0");

var $cmxvp = parcelRequire("cmxvp");
function $9fd4cc7450edb279$var$DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $9fd4cc7450edb279$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $9fd4cc7450edb279$var$DEREncoder;
$9fd4cc7450edb279$var$DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function $9fd4cc7450edb279$var$DERNode(parent) {
    $2Z4y0.call(this, 'der', parent);
}
$fGyu9($9fd4cc7450edb279$var$DERNode, $2Z4y0);
$9fd4cc7450edb279$var$DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = $9fd4cc7450edb279$var$encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 128) {
        const header = $9fd4cc7450edb279$require$Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 256; i >>= 8)lenOctets++;
    const header = $9fd4cc7450edb279$require$Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for(let i1 = 1 + lenOctets, j = content.length; j > 0; i1--, j >>= 8)header[i1] = j & 255;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
$9fd4cc7450edb279$var$DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === 'bmpstr') {
        const buf = $9fd4cc7450edb279$require$Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === 'objDesc') return this._createEncoderBuffer(str);
    else return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
};
$9fd4cc7450edb279$var$DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 128; ident >>= 7)size++;
    }
    const objid = $9fd4cc7450edb279$require$Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i2 = id.length - 1; i2 >= 0; i2--){
        let ident = id[i2];
        objid[offset--] = ident & 127;
        while((ident >>= 7) > 0)objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
};
function $9fd4cc7450edb279$var$two(num) {
    if (num < 10) return '0' + num;
    else return num;
}
$9fd4cc7450edb279$var$DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === 'gentime') str = [
        $9fd4cc7450edb279$var$two(date.getUTCFullYear()),
        $9fd4cc7450edb279$var$two(date.getUTCMonth() + 1),
        $9fd4cc7450edb279$var$two(date.getUTCDate()),
        $9fd4cc7450edb279$var$two(date.getUTCHours()),
        $9fd4cc7450edb279$var$two(date.getUTCMinutes()),
        $9fd4cc7450edb279$var$two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else if (tag === 'utctime') str = [
        $9fd4cc7450edb279$var$two(date.getUTCFullYear() % 100),
        $9fd4cc7450edb279$var$two(date.getUTCMonth() + 1),
        $9fd4cc7450edb279$var$two(date.getUTCDate()),
        $9fd4cc7450edb279$var$two(date.getUTCHours()),
        $9fd4cc7450edb279$var$two(date.getUTCMinutes()),
        $9fd4cc7450edb279$var$two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    return this._encodeStr(str, 'octstr');
};
$9fd4cc7450edb279$var$DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
};
$9fd4cc7450edb279$var$DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== 'number' && !$9fd4cc7450edb279$require$Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) numArray.unshift(0);
        num = $9fd4cc7450edb279$require$Buffer.from(numArray);
    }
    if ($9fd4cc7450edb279$require$Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = $9fd4cc7450edb279$require$Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 128) return this._createEncoderBuffer(num);
    if (num < 256) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 256; i >>= 8)size++;
    const out = new Array(size);
    for(let i3 = out.length - 1; i3 >= 0; i3--){
        out[i3] = num & 255;
        num >>= 8;
    }
    if (out[0] & 128) out.unshift(0);
    return this._createEncoderBuffer($9fd4cc7450edb279$require$Buffer.from(out));
};
$9fd4cc7450edb279$var$DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 255 : 0);
};
$9fd4cc7450edb279$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getEncoder('der').tree;
};
$9fd4cc7450edb279$var$DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state['default'] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function $9fd4cc7450edb279$var$encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === 'seqof') tag = 'seq';
    else if (tag === 'setof') tag = 'set';
    if ($cmxvp.tagByName.hasOwnProperty(tag)) res = $cmxvp.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
    else return reporter.error('Unknown tag: ' + tag);
    if (res >= 31) return reporter.error('Multi-octet tag encoding unsupported');
    if (!primitive) res |= 32;
    res |= $cmxvp.tagClassByName[cls || 'universal'] << 6;
    return res;
}

});
parcelRequire.register("xaL3N", function(module, exports) {
/* eslint-disable node/no-deprecated-api */ 'use strict';

var $FkHbz = parcelRequire("FkHbz");

var $063b6d811290eaf5$var$Buffer = $ef9975513e2e43d1$exports.Buffer;
var $063b6d811290eaf5$var$safer = {};
var $063b6d811290eaf5$var$key;
for($063b6d811290eaf5$var$key in $ef9975513e2e43d1$exports){
    if (!$ef9975513e2e43d1$exports.hasOwnProperty($063b6d811290eaf5$var$key)) continue;
    if ($063b6d811290eaf5$var$key === 'SlowBuffer' || $063b6d811290eaf5$var$key === 'Buffer') continue;
    $063b6d811290eaf5$var$safer[$063b6d811290eaf5$var$key] = $ef9975513e2e43d1$exports[$063b6d811290eaf5$var$key];
}
var $063b6d811290eaf5$var$Safer = $063b6d811290eaf5$var$safer.Buffer = {};
for($063b6d811290eaf5$var$key in $063b6d811290eaf5$var$Buffer){
    if (!$063b6d811290eaf5$var$Buffer.hasOwnProperty($063b6d811290eaf5$var$key)) continue;
    if ($063b6d811290eaf5$var$key === 'allocUnsafe' || $063b6d811290eaf5$var$key === 'allocUnsafeSlow') continue;
    $063b6d811290eaf5$var$Safer[$063b6d811290eaf5$var$key] = $063b6d811290eaf5$var$Buffer[$063b6d811290eaf5$var$key];
}
$063b6d811290eaf5$var$safer.Buffer.prototype = $063b6d811290eaf5$var$Buffer.prototype;
if (!$063b6d811290eaf5$var$Safer.from || $063b6d811290eaf5$var$Safer.from === Uint8Array.from) $063b6d811290eaf5$var$Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === 'undefined') throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
    return $063b6d811290eaf5$var$Buffer(value, encodingOrOffset, length);
};
if (!$063b6d811290eaf5$var$Safer.alloc) $063b6d811290eaf5$var$Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = $063b6d811290eaf5$var$Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === 'string') buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!$063b6d811290eaf5$var$safer.kStringMaxLength) try {
    $063b6d811290eaf5$var$safer.kStringMaxLength = $FkHbz.binding('buffer').kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!$063b6d811290eaf5$var$safer.constants) {
    $063b6d811290eaf5$var$safer.constants = {
        MAX_LENGTH: $063b6d811290eaf5$var$safer.kMaxLength
    };
    if ($063b6d811290eaf5$var$safer.kStringMaxLength) $063b6d811290eaf5$var$safer.constants.MAX_STRING_LENGTH = $063b6d811290eaf5$var$safer.kStringMaxLength;
}
module.exports = $063b6d811290eaf5$var$safer;

});

parcelRequire.register("2Z4y0", function(module, exports) {
'use strict';

var $dngbS = parcelRequire("dngbS");
var $22c4ce4a022d63a0$require$Reporter = $dngbS.Reporter;

var $4mzCp = parcelRequire("4mzCp");
var $22c4ce4a022d63a0$require$EncoderBuffer = $4mzCp.EncoderBuffer;

var $4mzCp = parcelRequire("4mzCp");
var $22c4ce4a022d63a0$require$DecoderBuffer = $4mzCp.DecoderBuffer;

var $adLNa = parcelRequire("adLNa");
// Supported tags
const $22c4ce4a022d63a0$var$tags = [
    'seq',
    'seqof',
    'set',
    'setof',
    'objid',
    'bool',
    'gentime',
    'utctime',
    'null_',
    'enum',
    'int',
    'objDesc',
    'bitstr',
    'bmpstr',
    'charstr',
    'genstr',
    'graphstr',
    'ia5str',
    'iso646str',
    'numstr',
    'octstr',
    'printstr',
    't61str',
    'unistr',
    'utf8str',
    'videostr'
];
// Public methods list
const $22c4ce4a022d63a0$var$methods = [
    'key',
    'obj',
    'use',
    'optional',
    'explicit',
    'implicit',
    'def',
    'choice',
    'any',
    'contains'
].concat($22c4ce4a022d63a0$var$tags);
// Overrided methods list
const $22c4ce4a022d63a0$var$overrided = [
    '_peekTag',
    '_decodeTag',
    '_use',
    '_decodeStr',
    '_decodeObjid',
    '_decodeTime',
    '_decodeNull',
    '_decodeInt',
    '_decodeBool',
    '_decodeList',
    '_encodeComposite',
    '_encodeStr',
    '_encodeObjid',
    '_encodeTime',
    '_encodeNull',
    '_encodeInt',
    '_encodeBool'
];
function $22c4ce4a022d63a0$var$Node(enc, parent, name) {
    const state = {};
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = $22c4ce4a022d63a0$var$Node;
const $22c4ce4a022d63a0$var$stateProps = [
    'enc',
    'parent',
    'children',
    'tag',
    'args',
    'reverseArgs',
    'choice',
    'optional',
    'any',
    'obj',
    'use',
    'alteredUse',
    'key',
    'default',
    'explicit',
    'implicit',
    'contains'
];
$22c4ce4a022d63a0$var$Node.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {};
    $22c4ce4a022d63a0$var$stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
$22c4ce4a022d63a0$var$Node.prototype._wrap = function wrap() {
    const state = this._baseState;
    $22c4ce4a022d63a0$var$methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone = new this.constructor(this);
            state.children.push(clone);
            return clone[method].apply(clone, arguments);
        };
    }, this);
};
$22c4ce4a022d63a0$var$Node.prototype._init = function init(body) {
    const state = this._baseState;
    $adLNa(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    $adLNa.equal(state.children.length, 1, 'Root node can have only one child');
};
$22c4ce4a022d63a0$var$Node.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        $adLNa(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        $adLNa(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
            const res = {};
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
$22c4ce4a022d63a0$var$overrided.forEach(function(method) {
    $22c4ce4a022d63a0$var$Node.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
});
//
// Public methods
//
$22c4ce4a022d63a0$var$tags.forEach(function(tag) {
    $22c4ce4a022d63a0$var$Node.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        $adLNa(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
$22c4ce4a022d63a0$var$Node.prototype.use = function use(item) {
    $adLNa(item);
    const state = this._baseState;
    $adLNa(state.use === null);
    state.use = item;
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.def = function def(val) {
    const state = this._baseState;
    $adLNa(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    $adLNa(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    $adLNa(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.key = function key(newKey) {
    const state = this._baseState;
    $adLNa(state.key === null);
    state.key = newKey;
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.choice = function choice(obj) {
    const state = this._baseState;
    $adLNa(state.choice === null);
    state.choice = obj;
    this._useArgs(Object.keys(obj).map(function(key) {
        return obj[key];
    }));
    return this;
};
$22c4ce4a022d63a0$var$Node.prototype.contains = function contains(item) {
    const state = this._baseState;
    $adLNa(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
$22c4ce4a022d63a0$var$Node.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state['default'];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit = this._decodeTag(input, state.explicit);
            if (input.isError(explicit)) return explicit;
            input = explicit;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            const data = new $22c4ce4a022d63a0$require$DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
$22c4ce4a022d63a0$var$Node.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === 'seq' || tag === 'set') return null;
    if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid') return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);
    else if (tag === 'null_') return this._decodeNull(input, options);
    else if (tag === 'bool') return this._decodeBool(input, options);
    else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error('unknown tag: ' + tag);
};
$22c4ce4a022d63a0$var$Node.prototype._getUse = function _getUse(entity, obj) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj);
    $adLNa(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
$22c4ce4a022d63a0$var$Node.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key) {
        const save = input.save();
        const node = state.choice[key];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error('Choice not matched');
    return result;
};
//
// Encoding
//
$22c4ce4a022d63a0$var$Node.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new $22c4ce4a022d63a0$require$EncoderBuffer(data, this.reporter);
};
$22c4ce4a022d63a0$var$Node.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state['default'] !== null && state['default'] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
$22c4ce4a022d63a0$var$Node.prototype._encodeValue = function encode(data, reporter, parent) {
    const state1 = this._baseState;
    // Decode root node
    if (state1.parent === null) return state1.children[0]._encode(data, reporter || new $22c4ce4a022d63a0$require$Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state1.optional && data === undefined) {
        if (state1['default'] !== null) data = state1['default'];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state1.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state1.choice) result = this._encodeChoice(data, reporter);
    else if (state1.contains) {
        content = this._getUse(state1.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state1.children) {
        content = state1.children.map(function(child) {
            if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error('Child should have a key');
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state1.tag === 'seqof' || state1.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state1.args && state1.args.length === 1)) return reporter.error('Too many args for : ' + state1.tag);
            if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state = this._baseState;
                return this._getUse(state.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state1.use !== null) result = this._getUse(state1.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state1.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state1.any && state1.choice === null) {
        const tag = state1.implicit !== null ? state1.implicit : state1.tag;
        const cls = state1.implicit === null ? 'universal' : 'context';
        if (tag === null) {
            if (state1.use === null) reporter.error('Tag could be omitted only for .use()');
        } else if (state1.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state1.explicit !== null) result = this._encodeComposite(state1.explicit, false, 'context', result);
    return result;
};
$22c4ce4a022d63a0$var$Node.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) $adLNa(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
$22c4ce4a022d63a0$var$Node.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid') return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);
    else if (tag === 'null_') return this._encodeNull();
    else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool') return this._encodeBool(data);
    else if (tag === 'objDesc') return this._encodeStr(data, tag);
    else throw new Error('Unsupported tag: ' + tag);
};
$22c4ce4a022d63a0$var$Node.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
$22c4ce4a022d63a0$var$Node.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

});
parcelRequire.register("dngbS", function(module, exports) {

$parcel$export(module.exports, "Reporter", () => $9bc9fb761f19e099$export$957313a2f485e5ed, (v) => $9bc9fb761f19e099$export$957313a2f485e5ed = v);
var $9bc9fb761f19e099$export$957313a2f485e5ed;
'use strict';

var $fGyu9 = parcelRequire("fGyu9");
function $9bc9fb761f19e099$var$Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {},
        errors: []
    };
}
$9bc9fb761f19e099$export$957313a2f485e5ed = $9bc9fb761f19e099$var$Reporter;
$9bc9fb761f19e099$var$Reporter.prototype.isError = function isError(obj) {
    return obj instanceof $9bc9fb761f19e099$var$ReporterError;
};
$9bc9fb761f19e099$var$Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
$9bc9fb761f19e099$var$Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
$9bc9fb761f19e099$var$Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
$9bc9fb761f19e099$var$Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
$9bc9fb761f19e099$var$Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
$9bc9fb761f19e099$var$Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
};
$9bc9fb761f19e099$var$Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {};
    return prev;
};
$9bc9fb761f19e099$var$Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
$9bc9fb761f19e099$var$Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof $9bc9fb761f19e099$var$ReporterError;
    if (inherited) err = msg;
    else err = new $9bc9fb761f19e099$var$ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
$9bc9fb761f19e099$var$Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function $9bc9fb761f19e099$var$ReporterError(path, msg) {
    this.path = path;
    this.rethrow(msg);
}
$fGyu9($9bc9fb761f19e099$var$ReporterError, Error);
$9bc9fb761f19e099$var$ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace) Error.captureStackTrace(this, $9bc9fb761f19e099$var$ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

});

parcelRequire.register("4mzCp", function(module, exports) {

$parcel$export(module.exports, "DecoderBuffer", () => $32d4d8976b2a0aef$export$bf9f79cdc4a49163, (v) => $32d4d8976b2a0aef$export$bf9f79cdc4a49163 = v);
$parcel$export(module.exports, "EncoderBuffer", () => $32d4d8976b2a0aef$export$8ff24f7760c7a78e, (v) => $32d4d8976b2a0aef$export$8ff24f7760c7a78e = v);
var $32d4d8976b2a0aef$export$bf9f79cdc4a49163;
var $32d4d8976b2a0aef$export$8ff24f7760c7a78e;
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $dngbS = parcelRequire("dngbS");
var $32d4d8976b2a0aef$require$Reporter = $dngbS.Reporter;

var $xaL3N = parcelRequire("xaL3N");
var $32d4d8976b2a0aef$require$Buffer = $xaL3N.Buffer;
function $32d4d8976b2a0aef$var$DecoderBuffer(base, options) {
    $32d4d8976b2a0aef$require$Reporter.call(this, options);
    if (!$32d4d8976b2a0aef$require$Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
$fGyu9($32d4d8976b2a0aef$var$DecoderBuffer, $32d4d8976b2a0aef$require$Reporter);
$32d4d8976b2a0aef$export$bf9f79cdc4a49163 = $32d4d8976b2a0aef$var$DecoderBuffer;
$32d4d8976b2a0aef$var$DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof $32d4d8976b2a0aef$var$DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && $32d4d8976b2a0aef$require$Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
    return isCompatible;
};
$32d4d8976b2a0aef$var$DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: $32d4d8976b2a0aef$require$Reporter.prototype.save.call(this)
    };
};
$32d4d8976b2a0aef$var$DecoderBuffer.prototype.restore = function restore(save) {
    // Return skipped data
    const res = new $32d4d8976b2a0aef$var$DecoderBuffer(this.base);
    res.offset = save.offset;
    res.length = this.offset;
    this.offset = save.offset;
    $32d4d8976b2a0aef$require$Reporter.prototype.restore.call(this, save.reporter);
    return res;
};
$32d4d8976b2a0aef$var$DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
$32d4d8976b2a0aef$var$DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || 'DecoderBuffer overrun');
};
$32d4d8976b2a0aef$var$DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
    const res = new $32d4d8976b2a0aef$var$DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
$32d4d8976b2a0aef$var$DecoderBuffer.prototype.raw = function raw(save) {
    return this.base.slice(save ? save.offset : this.offset, this.length);
};
function $32d4d8976b2a0aef$var$EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!$32d4d8976b2a0aef$var$EncoderBuffer.isEncoderBuffer(item)) item = new $32d4d8976b2a0aef$var$EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 255)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
    } else if (typeof value === 'string') {
        this.value = value;
        this.length = $32d4d8976b2a0aef$require$Buffer.byteLength(value);
    } else if ($32d4d8976b2a0aef$require$Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error('Unsupported type: ' + typeof value);
}
$32d4d8976b2a0aef$export$8ff24f7760c7a78e = $32d4d8976b2a0aef$var$EncoderBuffer;
$32d4d8976b2a0aef$var$EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof $32d4d8976b2a0aef$var$EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
    return isCompatible;
};
$32d4d8976b2a0aef$var$EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = $32d4d8976b2a0aef$require$Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if ($32d4d8976b2a0aef$require$Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

});


parcelRequire.register("cmxvp", function(module, exports) {

$parcel$export(module.exports, "tagClass", () => $90018799b606ab04$export$3584c46ed60baee8, (v) => $90018799b606ab04$export$3584c46ed60baee8 = v);
$parcel$export(module.exports, "tagClassByName", () => $90018799b606ab04$export$f18596ef8d632e49, (v) => $90018799b606ab04$export$f18596ef8d632e49 = v);
$parcel$export(module.exports, "tag", () => $90018799b606ab04$export$2b067c6666111485, (v) => $90018799b606ab04$export$2b067c6666111485 = v);
$parcel$export(module.exports, "tagByName", () => $90018799b606ab04$export$f17df38a421ab9e3, (v) => $90018799b606ab04$export$f17df38a421ab9e3 = v);
var $90018799b606ab04$export$3584c46ed60baee8;
var $90018799b606ab04$export$f18596ef8d632e49;
var $90018799b606ab04$export$2b067c6666111485;
var $90018799b606ab04$export$f17df38a421ab9e3;
'use strict';
// Helper
function $90018799b606ab04$var$reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
$90018799b606ab04$export$3584c46ed60baee8 = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
};
$90018799b606ab04$export$f18596ef8d632e49 = $90018799b606ab04$var$reverse($90018799b606ab04$export$3584c46ed60baee8);
$90018799b606ab04$export$2b067c6666111485 = {
    0: 'end',
    1: 'bool',
    2: 'int',
    3: 'bitstr',
    4: 'octstr',
    5: 'null_',
    6: 'objid',
    7: 'objDesc',
    8: 'external',
    9: 'real',
    10: 'enum',
    11: 'embed',
    12: 'utf8str',
    13: 'relativeOid',
    16: 'seq',
    17: 'set',
    18: 'numstr',
    19: 'printstr',
    20: 't61str',
    21: 'videostr',
    22: 'ia5str',
    23: 'utctime',
    24: 'gentime',
    25: 'graphstr',
    26: 'iso646str',
    27: 'genstr',
    28: 'unistr',
    29: 'charstr',
    30: 'bmpstr'
};
$90018799b606ab04$export$f17df38a421ab9e3 = $90018799b606ab04$var$reverse($90018799b606ab04$export$2b067c6666111485);

});


parcelRequire.register("4Hvu1", function(module, exports) {
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $dIMeu = parcelRequire("dIMeu");
function $36c39983c33db35c$var$PEMEncoder(entity) {
    $dIMeu.call(this, entity);
    this.enc = 'pem';
}
$fGyu9($36c39983c33db35c$var$PEMEncoder, $dIMeu);
module.exports = $36c39983c33db35c$var$PEMEncoder;
$36c39983c33db35c$var$PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = $dIMeu.prototype.encode.call(this, data);
    const p = buf.toString('base64');
    const out = [
        '-----BEGIN ' + options.label + '-----'
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
};

});


parcelRequire.register("aHc5b", function(module, exports) {
'use strict';
const $7c974ae92fe1b74a$var$decoders = module.exports;

$7c974ae92fe1b74a$var$decoders.der = (parcelRequire("e8oIl"));

$7c974ae92fe1b74a$var$decoders.pem = (parcelRequire("bwtD7"));

});
parcelRequire.register("e8oIl", function(module, exports) {
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $9i2Ru = parcelRequire("9i2Ru");

var $4mzCp = parcelRequire("4mzCp");
var $a4a4fbcc718a2030$require$DecoderBuffer = $4mzCp.DecoderBuffer;

var $2Z4y0 = parcelRequire("2Z4y0");

var $cmxvp = parcelRequire("cmxvp");
function $a4a4fbcc718a2030$var$DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new $a4a4fbcc718a2030$var$DERNode();
    this.tree._init(entity.body);
}
module.exports = $a4a4fbcc718a2030$var$DERDecoder;
$a4a4fbcc718a2030$var$DERDecoder.prototype.decode = function decode(data, options) {
    if (!$a4a4fbcc718a2030$require$DecoderBuffer.isDecoderBuffer(data)) data = new $a4a4fbcc718a2030$require$DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function $a4a4fbcc718a2030$var$DERNode(parent) {
    $2Z4y0.call(this, 'der', parent);
}
$fGyu9($a4a4fbcc718a2030$var$DERNode, $2Z4y0);
$a4a4fbcc718a2030$var$DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = $a4a4fbcc718a2030$var$derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};
$a4a4fbcc718a2030$var$DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = $a4a4fbcc718a2030$var$derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = $a4a4fbcc718a2030$var$derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
$a4a4fbcc718a2030$var$DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = $a4a4fbcc718a2030$var$derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = $a4a4fbcc718a2030$var$derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
    }
};
$a4a4fbcc718a2030$var$DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
$a4a4fbcc718a2030$var$DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        let str = '';
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === 'octstr') return buffer.raw();
    else if (tag === 'objDesc') return buffer.raw();
    else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error('Decoding of string type: ' + tag + ' unsupported');
};
$a4a4fbcc718a2030$var$DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 128) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
$a4a4fbcc718a2030$var$DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error('Decoding ' + tag + ' time is not supported yet');
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
$a4a4fbcc718a2030$var$DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
$a4a4fbcc718a2030$var$DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
$a4a4fbcc718a2030$var$DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new $9i2Ru(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
$a4a4fbcc718a2030$var$DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getDecoder('der').tree;
};
// Utility methods
function $a4a4fbcc718a2030$var$derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = $cmxvp.tagClass[tag >> 6];
    const primitive = (tag & 32) === 0;
    // Multi-octet tag - load
    if ((tag & 31) === 31) {
        let oct = tag;
        tag = 0;
        while((oct & 128) === 128){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 127;
        }
    } else tag &= 31;
    const tagStr = $cmxvp.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function $a4a4fbcc718a2030$var$derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 128) return null;
    // Definite form
    if ((len & 128) === 0) // Short form
    return len;
    // Long form
    const num = len & 127;
    if (num > 4) return buf.error('length octect is too long');
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

});

parcelRequire.register("bwtD7", function(module, exports) {
'use strict';

var $fGyu9 = parcelRequire("fGyu9");

var $xaL3N = parcelRequire("xaL3N");
var $8639aac56febcf24$require$Buffer = $xaL3N.Buffer;

var $e8oIl = parcelRequire("e8oIl");
function $8639aac56febcf24$var$PEMDecoder(entity) {
    $e8oIl.call(this, entity);
    this.enc = 'pem';
}
$fGyu9($8639aac56febcf24$var$PEMDecoder, $e8oIl);
module.exports = $8639aac56febcf24$var$PEMDecoder;
$8639aac56febcf24$var$PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== 'BEGIN') break;
            start = i;
        } else {
            if (match[1] !== 'END') break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
    const base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, '');
    const input = $8639aac56febcf24$require$Buffer.from(base64, 'base64');
    return $e8oIl.prototype.decode.call(this, input, options);
};

});



parcelRequire.register("cWOvV", function(module, exports) {
'use strict';
const $96d215d2d295c34e$var$base = module.exports;

$96d215d2d295c34e$var$base.Reporter = (parcelRequire("dngbS")).Reporter;

$96d215d2d295c34e$var$base.DecoderBuffer = (parcelRequire("4mzCp")).DecoderBuffer;

$96d215d2d295c34e$var$base.EncoderBuffer = (parcelRequire("4mzCp")).EncoderBuffer;

$96d215d2d295c34e$var$base.Node = (parcelRequire("2Z4y0"));

});

parcelRequire.register("73fH4", function(module, exports) {
'use strict';
const $5224fca55bd75e55$var$constants = module.exports;
// Helper
$5224fca55bd75e55$var$constants._reverse = function reverse(map) {
    const res = {};
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};

$5224fca55bd75e55$var$constants.der = (parcelRequire("cmxvp"));

});


parcelRequire.register("4Wi2c", function(module, exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
'use strict';

var $amBBc = parcelRequire("amBBc");
var $398a917fbbf94f95$var$Time = $amBBc.define('Time', function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var $398a917fbbf94f95$var$AttributeTypeValue = $amBBc.define('AttributeTypeValue', function() {
    this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var $398a917fbbf94f95$var$AlgorithmIdentifier = $amBBc.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
});
var $398a917fbbf94f95$var$SubjectPublicKeyInfo = $amBBc.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use($398a917fbbf94f95$var$AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var $398a917fbbf94f95$var$RelativeDistinguishedName = $amBBc.define('RelativeDistinguishedName', function() {
    this.setof($398a917fbbf94f95$var$AttributeTypeValue);
});
var $398a917fbbf94f95$var$RDNSequence = $amBBc.define('RDNSequence', function() {
    this.seqof($398a917fbbf94f95$var$RelativeDistinguishedName);
});
var $398a917fbbf94f95$var$Name = $amBBc.define('Name', function() {
    this.choice({
        rdnSequence: this.use($398a917fbbf94f95$var$RDNSequence)
    });
});
var $398a917fbbf94f95$var$Validity = $amBBc.define('Validity', function() {
    this.seq().obj(this.key('notBefore').use($398a917fbbf94f95$var$Time), this.key('notAfter').use($398a917fbbf94f95$var$Time));
});
var $398a917fbbf94f95$var$Extension = $amBBc.define('Extension', function() {
    this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var $398a917fbbf94f95$var$TBSCertificate = $amBBc.define('TBSCertificate', function() {
    this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use($398a917fbbf94f95$var$AlgorithmIdentifier), this.key('issuer').use($398a917fbbf94f95$var$Name), this.key('validity').use($398a917fbbf94f95$var$Validity), this.key('subject').use($398a917fbbf94f95$var$Name), this.key('subjectPublicKeyInfo').use($398a917fbbf94f95$var$SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof($398a917fbbf94f95$var$Extension).optional());
});
var $398a917fbbf94f95$var$X509Certificate = $amBBc.define('X509Certificate', function() {
    this.seq().obj(this.key('tbsCertificate').use($398a917fbbf94f95$var$TBSCertificate), this.key('signatureAlgorithm').use($398a917fbbf94f95$var$AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = $398a917fbbf94f95$var$X509Certificate;

});


parcelRequire.register("3YyaE", function(module, exports) {
module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

});

parcelRequire.register("gpwrd", function(module, exports) {
// adapted from https://github.com/apatil/pemstrip
var $bf2824a52cacfb02$var$findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var $bf2824a52cacfb02$var$startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var $bf2824a52cacfb02$var$fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;

var $302s8 = parcelRequire("302s8");

var $8MsG9 = parcelRequire("8MsG9");

var $cBldb = parcelRequire("cBldb");
var $bf2824a52cacfb02$require$Buffer = $cBldb.Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match($bf2824a52cacfb02$var$findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match($bf2824a52cacfb02$var$fullRegex);
        decrypted = $bf2824a52cacfb02$require$Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
        var suite = 'aes' + match[1];
        var iv = $bf2824a52cacfb02$require$Buffer.from(match[2], 'hex');
        var cipherText = $bf2824a52cacfb02$require$Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = $302s8(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = $8MsG9.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = $bf2824a52cacfb02$require$Buffer.concat(out);
    }
    var tag = key.match($bf2824a52cacfb02$var$startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

});


parcelRequire.register("dBKbA", function(module, exports) {
module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

});


parcelRequire.register("19MQR", function(module, exports) {

var $cBldb = parcelRequire("cBldb");
var $0d7c869ddda82440$require$Buffer = $cBldb.Buffer;

var $djF8R = parcelRequire("djF8R");

var $hJ0wi = parcelRequire("hJ0wi");
var $0d7c869ddda82440$require$EC = $hJ0wi.ec;

var $iyQDI = parcelRequire("iyQDI");

var $dBKbA = parcelRequire("dBKbA");
function $0d7c869ddda82440$var$verify(sig, hash, key, signType, tag) {
    var pub = $iyQDI(key);
    if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return $0d7c869ddda82440$var$ecVerify(sig, hash, pub);
    } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return $0d7c869ddda82440$var$dsaVerify(sig, hash, pub);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    }
    hash = $0d7c869ddda82440$require$Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(255);
        padNum++;
    }
    pad.push(0);
    var i = -1;
    while(++i < hash.length)pad.push(hash[i]);
    pad = $0d7c869ddda82440$require$Buffer.from(pad);
    var red = $djF8R.mont(pub.modulus);
    sig = new $djF8R(sig).toRed(red);
    sig = sig.redPow(new $djF8R(pub.publicExponent));
    sig = $0d7c869ddda82440$require$Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while(++i < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function $0d7c869ddda82440$var$ecVerify(sig, hash, pub) {
    var curveId = $dBKbA[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
    var curve = new $0d7c869ddda82440$require$EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function $0d7c869ddda82440$var$dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = $iyQDI.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    $0d7c869ddda82440$var$checkValue(s, q);
    $0d7c869ddda82440$var$checkValue(r, q);
    var montp = $djF8R.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new $djF8R(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function $0d7c869ddda82440$var$checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig');
    if (b.cmp(q) >= q) throw new Error('invalid sig');
}
module.exports = $0d7c869ddda82440$var$verify;

});


parcelRequire.register("jtLmz", function(module, exports) {

var $e2e5770e2c9f81be$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;

var $hJ0wi = parcelRequire("hJ0wi");

var $9i2Ru = parcelRequire("9i2Ru");
module.exports = function createECDH(curve) {
    return new $e2e5770e2c9f81be$var$ECDH(curve);
};
var $e2e5770e2c9f81be$var$aliases = {
    secp256k1: {
        name: 'secp256k1',
        byteLength: 32
    },
    secp224r1: {
        name: 'p224',
        byteLength: 28
    },
    prime256v1: {
        name: 'p256',
        byteLength: 32
    },
    prime192v1: {
        name: 'p192',
        byteLength: 24
    },
    ed25519: {
        name: 'ed25519',
        byteLength: 32
    },
    secp384r1: {
        name: 'p384',
        byteLength: 48
    },
    secp521r1: {
        name: 'p521',
        byteLength: 66
    }
};
$e2e5770e2c9f81be$var$aliases.p224 = $e2e5770e2c9f81be$var$aliases.secp224r1;
$e2e5770e2c9f81be$var$aliases.p256 = $e2e5770e2c9f81be$var$aliases.secp256r1 = $e2e5770e2c9f81be$var$aliases.prime256v1;
$e2e5770e2c9f81be$var$aliases.p192 = $e2e5770e2c9f81be$var$aliases.secp192r1 = $e2e5770e2c9f81be$var$aliases.prime192v1;
$e2e5770e2c9f81be$var$aliases.p384 = $e2e5770e2c9f81be$var$aliases.secp384r1;
$e2e5770e2c9f81be$var$aliases.p521 = $e2e5770e2c9f81be$var$aliases.secp521r1;
function $e2e5770e2c9f81be$var$ECDH(curve) {
    this.curveType = $e2e5770e2c9f81be$var$aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new $hJ0wi.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
$e2e5770e2c9f81be$var$ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
$e2e5770e2c9f81be$var$ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!$e2e5770e2c9f81be$require$Buffer.isBuffer(other)) other = new $e2e5770e2c9f81be$require$Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return $e2e5770e2c9f81be$var$formatReturnValue(out, enc, this.curveType.byteLength);
};
$e2e5770e2c9f81be$var$ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return $e2e5770e2c9f81be$var$formatReturnValue(key, enc);
};
$e2e5770e2c9f81be$var$ECDH.prototype.getPrivateKey = function(enc) {
    return $e2e5770e2c9f81be$var$formatReturnValue(this.keys.getPrivate(), enc);
};
$e2e5770e2c9f81be$var$ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || 'utf8';
    if (!$e2e5770e2c9f81be$require$Buffer.isBuffer(pub)) pub = new $e2e5770e2c9f81be$require$Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
$e2e5770e2c9f81be$var$ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || 'utf8';
    if (!$e2e5770e2c9f81be$require$Buffer.isBuffer(priv)) priv = new $e2e5770e2c9f81be$require$Buffer(priv, enc);
    var _priv = new $9i2Ru(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function $e2e5770e2c9f81be$var$formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new $e2e5770e2c9f81be$require$Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new $e2e5770e2c9f81be$require$Buffer(len - buf.length);
        zeros.fill(0);
        buf = $e2e5770e2c9f81be$require$Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

});

parcelRequire.register("ari1D", function(module, exports) {

$parcel$export(module.exports, "publicEncrypt", () => $799a6873eabf14bd$export$512823e338ddb1b7, (v) => $799a6873eabf14bd$export$512823e338ddb1b7 = v);
$parcel$export(module.exports, "privateDecrypt", () => $799a6873eabf14bd$export$7efb24e2fddf99b9, (v) => $799a6873eabf14bd$export$7efb24e2fddf99b9 = v);
$parcel$export(module.exports, "privateEncrypt", () => $799a6873eabf14bd$export$9d0e0c0c4a8d30f3, (v) => $799a6873eabf14bd$export$9d0e0c0c4a8d30f3 = v);
$parcel$export(module.exports, "publicDecrypt", () => $799a6873eabf14bd$export$b9d55ff329113abd, (v) => $799a6873eabf14bd$export$b9d55ff329113abd = v);
var $799a6873eabf14bd$export$512823e338ddb1b7;
var $799a6873eabf14bd$export$7efb24e2fddf99b9;
var $799a6873eabf14bd$export$9d0e0c0c4a8d30f3;
var $799a6873eabf14bd$export$b9d55ff329113abd;

$799a6873eabf14bd$export$512823e338ddb1b7 = (parcelRequire("1DeLT"));

$799a6873eabf14bd$export$7efb24e2fddf99b9 = (parcelRequire("9FWjO"));
$799a6873eabf14bd$export$9d0e0c0c4a8d30f3 = function privateEncrypt(key, buf) {
    return $799a6873eabf14bd$export$512823e338ddb1b7(key, buf, true);
};
$799a6873eabf14bd$export$b9d55ff329113abd = function publicDecrypt(key, buf) {
    return $799a6873eabf14bd$export$7efb24e2fddf99b9(key, buf, true);
};

});
parcelRequire.register("1DeLT", function(module, exports) {

var $iyQDI = parcelRequire("iyQDI");

var $hWy1J = parcelRequire("hWy1J");

var $cGz00 = parcelRequire("cGz00");

var $5d1z4 = parcelRequire("5d1z4");

var $ewys5 = parcelRequire("ewys5");

var $9i2Ru = parcelRequire("9i2Ru");

var $dIain = parcelRequire("dIain");

var $iCOZ1 = parcelRequire("iCOZ1");

var $cBldb = parcelRequire("cBldb");
var $1304e43fbbd84271$require$Buffer = $cBldb.Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $iyQDI(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = $1304e43fbbd84271$var$oaep(key, msg);
    else if (padding === 1) paddedMsg = $1304e43fbbd84271$var$pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new $9i2Ru(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error('data too long for modulus');
    } else throw new Error('unknown padding');
    if (reverse) return $iCOZ1(paddedMsg, key);
    else return $dIain(paddedMsg, key);
};
function $1304e43fbbd84271$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = $cGz00('sha1').update($1304e43fbbd84271$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error('message too long');
    var ps = $1304e43fbbd84271$require$Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = $hWy1J(hLen);
    var maskedDb = $ewys5($1304e43fbbd84271$require$Buffer.concat([
        iHash,
        ps,
        $1304e43fbbd84271$require$Buffer.alloc(1, 1),
        msg
    ], dblen), $5d1z4(seed, dblen));
    var maskedSeed = $ewys5(seed, $5d1z4(maskedDb, hLen));
    return new $9i2Ru($1304e43fbbd84271$require$Buffer.concat([
        $1304e43fbbd84271$require$Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function $1304e43fbbd84271$var$pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error('message too long');
    var ps;
    if (reverse) ps = $1304e43fbbd84271$require$Buffer.alloc(k - mLen - 3, 255);
    else ps = $1304e43fbbd84271$var$nonZero(k - mLen - 3);
    return new $9i2Ru($1304e43fbbd84271$require$Buffer.concat([
        $1304e43fbbd84271$require$Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        $1304e43fbbd84271$require$Buffer.alloc(1),
        msg
    ], k));
}
function $1304e43fbbd84271$var$nonZero(len) {
    var out = $1304e43fbbd84271$require$Buffer.allocUnsafe(len);
    var i = 0;
    var cache = $hWy1J(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = $hWy1J(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

});
parcelRequire.register("5d1z4", function(module, exports) {

var $cGz00 = parcelRequire("cGz00");

var $cBldb = parcelRequire("cBldb");
var $3caf615e0649e395$require$Buffer = $cBldb.Buffer;
module.exports = function(seed, len) {
    var t = $3caf615e0649e395$require$Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = $3caf615e0649e395$var$i2ops(i++);
        t = $3caf615e0649e395$require$Buffer.concat([
            t,
            $cGz00('sha1').update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function $3caf615e0649e395$var$i2ops(c) {
    var out = $3caf615e0649e395$require$Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

});

parcelRequire.register("ewys5", function(module, exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while(++i < len)a[i] ^= b[i];
    return a;
};

});

parcelRequire.register("dIain", function(module, exports) {

var $9i2Ru = parcelRequire("9i2Ru");

var $cBldb = parcelRequire("cBldb");
var $9fb75ee5fbb5180d$require$Buffer = $cBldb.Buffer;
function $9fb75ee5fbb5180d$var$withPublic(paddedMsg, key) {
    return $9fb75ee5fbb5180d$require$Buffer.from(paddedMsg.toRed($9i2Ru.mont(key.modulus)).redPow(new $9i2Ru(key.publicExponent)).fromRed().toArray());
}
module.exports = $9fb75ee5fbb5180d$var$withPublic;

});


parcelRequire.register("9FWjO", function(module, exports) {

var $iyQDI = parcelRequire("iyQDI");

var $5d1z4 = parcelRequire("5d1z4");

var $ewys5 = parcelRequire("ewys5");

var $9i2Ru = parcelRequire("9i2Ru");

var $iCOZ1 = parcelRequire("iCOZ1");

var $cGz00 = parcelRequire("cGz00");

var $dIain = parcelRequire("dIain");

var $cBldb = parcelRequire("cBldb");
var $70b52e3f996cfd5b$require$Buffer = $cBldb.Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = $iyQDI(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new $9i2Ru(enc).cmp(key.modulus) >= 0) throw new Error('decryption error');
    var msg;
    if (reverse) msg = $dIain(new $9i2Ru(enc), key);
    else msg = $iCOZ1(enc, key);
    var zBuffer = $70b52e3f996cfd5b$require$Buffer.alloc(k - msg.length);
    msg = $70b52e3f996cfd5b$require$Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return $70b52e3f996cfd5b$var$oaep(key, msg);
    else if (padding === 1) return $70b52e3f996cfd5b$var$pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error('unknown padding');
};
function $70b52e3f996cfd5b$var$oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = $cGz00('sha1').update($70b52e3f996cfd5b$require$Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error('decryption error');
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = $ewys5(maskedSeed, $5d1z4(maskedDb, hLen));
    var db = $ewys5(maskedDb, $5d1z4(seed, k - hLen - 1));
    if ($70b52e3f996cfd5b$var$compare(iHash, db.slice(0, hLen))) throw new Error('decryption error');
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error('decryption error');
    return db.slice(i);
}
function $70b52e3f996cfd5b$var$pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error('decryption error');
    return msg.slice(i);
}
function $70b52e3f996cfd5b$var$compare(a, b) {
    a = $70b52e3f996cfd5b$require$Buffer.from(a);
    b = $70b52e3f996cfd5b$require$Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while(++i < len)dif += a[i] ^ b[i];
    return dif;
}

});


parcelRequire.register("kX4Jy", function(module, exports) {

$parcel$export(module.exports, "randomFill", () => $f40cfd5e5b1945a2$export$bb1abf2ce84fc7e8, (v) => $f40cfd5e5b1945a2$export$bb1abf2ce84fc7e8 = v);
$parcel$export(module.exports, "randomFillSync", () => $f40cfd5e5b1945a2$export$2f7171e78e524d5e, (v) => $f40cfd5e5b1945a2$export$2f7171e78e524d5e = v);
var $f40cfd5e5b1945a2$export$bb1abf2ce84fc7e8;
var $f40cfd5e5b1945a2$export$2f7171e78e524d5e;
'use strict';

var $FkHbz = parcelRequire("FkHbz");
function $f40cfd5e5b1945a2$var$oldBrowser() {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}

var $cBldb = parcelRequire("cBldb");

var $hWy1J = parcelRequire("hWy1J");
var $f40cfd5e5b1945a2$var$Buffer = $cBldb.Buffer;
var $f40cfd5e5b1945a2$var$kBufferMaxLength = $cBldb.kMaxLength;
var $f40cfd5e5b1945a2$var$crypto = $parcel$global.crypto || $parcel$global.msCrypto;
var $f40cfd5e5b1945a2$var$kMaxUint32 = Math.pow(2, 32) - 1;
function $f40cfd5e5b1945a2$var$assertOffset(offset, length) {
    if (typeof offset !== 'number' || offset !== offset) throw new TypeError('offset must be a number');
    if (offset > $f40cfd5e5b1945a2$var$kMaxUint32 || offset < 0) throw new TypeError('offset must be a uint32');
    if (offset > $f40cfd5e5b1945a2$var$kBufferMaxLength || offset > length) throw new RangeError('offset out of range');
}
function $f40cfd5e5b1945a2$var$assertSize(size, offset, length) {
    if (typeof size !== 'number' || size !== size) throw new TypeError('size must be a number');
    if (size > $f40cfd5e5b1945a2$var$kMaxUint32 || size < 0) throw new TypeError('size must be a uint32');
    if (size + offset > length || size > $f40cfd5e5b1945a2$var$kBufferMaxLength) throw new RangeError('buffer too small');
}
if ($f40cfd5e5b1945a2$var$crypto && $f40cfd5e5b1945a2$var$crypto.getRandomValues || false) {
    $f40cfd5e5b1945a2$export$bb1abf2ce84fc7e8 = $f40cfd5e5b1945a2$var$randomFill;
    $f40cfd5e5b1945a2$export$2f7171e78e524d5e = $f40cfd5e5b1945a2$var$randomFillSync;
} else {
    $f40cfd5e5b1945a2$export$bb1abf2ce84fc7e8 = $f40cfd5e5b1945a2$var$oldBrowser;
    $f40cfd5e5b1945a2$export$2f7171e78e524d5e = $f40cfd5e5b1945a2$var$oldBrowser;
}
function $f40cfd5e5b1945a2$var$randomFill(buf, offset, size, cb) {
    if (!$f40cfd5e5b1945a2$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== 'function') throw new TypeError('"cb" argument must be a function');
    $f40cfd5e5b1945a2$var$assertOffset(offset, buf.length);
    $f40cfd5e5b1945a2$var$assertSize(size, offset, buf.length);
    return $f40cfd5e5b1945a2$var$actualFill(buf, offset, size, cb);
}
function $f40cfd5e5b1945a2$var$actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    $f40cfd5e5b1945a2$var$crypto.getRandomValues(uint);
    if (cb) {
        $FkHbz.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        $hWy1J(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes1 = $hWy1J(size);
    bytes1.copy(buf, offset);
    return buf;
}
function $f40cfd5e5b1945a2$var$randomFillSync(buf, offset, size) {
    if (typeof offset === 'undefined') offset = 0;
    if (!$f40cfd5e5b1945a2$var$Buffer.isBuffer(buf) && !(buf instanceof $parcel$global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    $f40cfd5e5b1945a2$var$assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    $f40cfd5e5b1945a2$var$assertSize(size, offset, buf.length);
    return $f40cfd5e5b1945a2$var$actualFill(buf, offset, size);
}

});



var $a0h4l = parcelRequire("a0h4l");
/*
    https://tools.ietf.org/html/rfc3629

    UTF8-char = UTF8-1 / UTF8-2 / UTF8-3 / UTF8-4

    UTF8-1    = %x00-7F

    UTF8-2    = %xC2-DF UTF8-tail

    UTF8-3    = %xE0 %xA0-BF UTF8-tail
                %xE1-EC 2( UTF8-tail )
                %xED %x80-9F UTF8-tail
                %xEE-EF 2( UTF8-tail )

    UTF8-4    = %xF0 %x90-BF 2( UTF8-tail )
                %xF1-F3 3( UTF8-tail )
                %xF4 %x80-8F 2( UTF8-tail )

    UTF8-tail = %x80-BF
*/ /**
 * Check if a Node.js Buffer or Uint8Array is UTF-8.
 */ function $e3351dc48ac30dae$var$isUtf8(buf) {
    if (!buf) return false;
    let i = 0;
    const len = buf.length;
    while(i < len){
        // UTF8-1 = %x00-7F
        if (buf[i] <= 127) {
            i++;
            continue;
        }
        // UTF8-2 = %xC2-DF UTF8-tail
        if (buf[i] >= 194 && buf[i] <= 223) {
            // if(buf[i + 1] >= 0x80 && buf[i + 1] <= 0xBF) {
            if (buf[i + 1] >> 6 === 2) {
                i += 2;
                continue;
            } else return false;
        }
        // UTF8-3 = %xE0 %xA0-BF UTF8-tail
        // UTF8-3 = %xED %x80-9F UTF8-tail
        if ((buf[i] === 224 && buf[i + 1] >= 160 && buf[i + 1] <= 191 || buf[i] === 237 && buf[i + 1] >= 128 && buf[i + 1] <= 159) && buf[i + 2] >> 6 === 2) {
            i += 3;
            continue;
        }
        // UTF8-3 = %xE1-EC 2( UTF8-tail )
        // UTF8-3 = %xEE-EF 2( UTF8-tail )
        if ((buf[i] >= 225 && buf[i] <= 236 || buf[i] >= 238 && buf[i] <= 239) && buf[i + 1] >> 6 === 2 && buf[i + 2] >> 6 === 2) {
            i += 3;
            continue;
        }
        // UTF8-4 = %xF0 %x90-BF 2( UTF8-tail )
        //          %xF1-F3 3( UTF8-tail )
        //          %xF4 %x80-8F 2( UTF8-tail )
        if ((buf[i] === 240 && buf[i + 1] >= 144 && buf[i + 1] <= 191 || buf[i] >= 241 && buf[i] <= 243 && buf[i + 1] >> 6 === 2 || buf[i] === 244 && buf[i + 1] >= 128 && buf[i + 1] <= 143) && buf[i + 2] >> 6 === 2 && buf[i + 3] >> 6 === 2) {
            i += 4;
            continue;
        }
        return false;
    }
    return true;
}
var $e3351dc48ac30dae$export$2e2bcd8739ae039 = $e3351dc48ac30dae$var$isUtf8;


var $03ca7a3d69ca2727$exports = {};
"use strict";

var $03ca7a3d69ca2727$require$Buffer = $ef9975513e2e43d1$export$a143d493d941bafc;
var $03ca7a3d69ca2727$var$__createBinding = $03ca7a3d69ca2727$exports && $03ca7a3d69ca2727$exports.__createBinding || (Object.create ? function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, {
        enumerable: true,
        get: function() {
            return m[k];
        }
    });
} : function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
});
var $03ca7a3d69ca2727$var$__setModuleDefault = $03ca7a3d69ca2727$exports && $03ca7a3d69ca2727$exports.__setModuleDefault || (Object.create ? function(o, v) {
    Object.defineProperty(o, "default", {
        enumerable: true,
        value: v
    });
} : function(o, v) {
    o["default"] = v;
});
var $03ca7a3d69ca2727$var$__importStar = $03ca7a3d69ca2727$exports && $03ca7a3d69ca2727$exports.__importStar || function(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) $03ca7a3d69ca2727$var$__createBinding(result, mod, k);
    }
    $03ca7a3d69ca2727$var$__setModuleDefault(result, mod);
    return result;
};
Object.defineProperty($03ca7a3d69ca2727$exports, "__esModule", {
    value: true
});
$03ca7a3d69ca2727$exports.recoverTypedSignature_v4 = $03ca7a3d69ca2727$exports.recoverTypedSignature = $03ca7a3d69ca2727$exports.signTypedData_v4 = $03ca7a3d69ca2727$exports.signTypedData = $03ca7a3d69ca2727$exports.recoverTypedMessage = $03ca7a3d69ca2727$exports.signTypedMessage = $03ca7a3d69ca2727$exports.getEncryptionPublicKey = $03ca7a3d69ca2727$exports.decryptSafely = $03ca7a3d69ca2727$exports.decrypt = $03ca7a3d69ca2727$exports.encryptSafely = $03ca7a3d69ca2727$exports.encrypt = $03ca7a3d69ca2727$exports.recoverTypedSignatureLegacy = $03ca7a3d69ca2727$exports.signTypedDataLegacy = $03ca7a3d69ca2727$exports.typedSignatureHash = $03ca7a3d69ca2727$exports.extractPublicKey = $03ca7a3d69ca2727$exports.recoverPersonalSignature = $03ca7a3d69ca2727$exports.personalSign = $03ca7a3d69ca2727$exports.normalize = $03ca7a3d69ca2727$exports.concatSig = $03ca7a3d69ca2727$exports.TypedDataUtils = $03ca7a3d69ca2727$exports.TYPED_MESSAGE_SCHEMA = void 0;

const $03ca7a3d69ca2727$var$ethUtil = $03ca7a3d69ca2727$var$__importStar((parcelRequire("jNPKL")));

const $03ca7a3d69ca2727$var$ethAbi = $03ca7a3d69ca2727$var$__importStar((parcelRequire("drILK")));

const $03ca7a3d69ca2727$var$nacl = $03ca7a3d69ca2727$var$__importStar((parcelRequire("eBbzZ")));

const $03ca7a3d69ca2727$var$naclUtil = $03ca7a3d69ca2727$var$__importStar((parcelRequire("ikzez")));
const $03ca7a3d69ca2727$var$TYPED_MESSAGE_SCHEMA = {
    type: 'object',
    properties: {
        types: {
            type: 'object',
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'object',
                    properties: {
                        name: {
                            type: 'string'
                        },
                        type: {
                            type: 'string'
                        }
                    },
                    required: [
                        'name',
                        'type'
                    ]
                }
            }
        },
        primaryType: {
            type: 'string'
        },
        domain: {
            type: 'object'
        },
        message: {
            type: 'object'
        }
    },
    required: [
        'types',
        'primaryType',
        'domain',
        'message'
    ]
};
$03ca7a3d69ca2727$exports.TYPED_MESSAGE_SCHEMA = $03ca7a3d69ca2727$var$TYPED_MESSAGE_SCHEMA;
/**
 * A collection of utility functions used for signing typed data
 */ const $03ca7a3d69ca2727$var$TypedDataUtils = {
    /**
     * Encodes an object by encoding and concatenating each of its members
     *
     * @param {string} primaryType - Root type
     * @param {Object} data - Object to encode
     * @param {Object} types - Type definitions
     * @returns {Buffer} - Encoded representation of an object
     */ encodeData (primaryType, data, types, useV4 = true) {
        const encodedTypes = [
            'bytes32'
        ];
        const encodedValues = [
            this.hashType(primaryType, types)
        ];
        if (useV4) {
            const encodeField = (name, type, value)=>{
                if (types[type] !== undefined) return [
                    'bytes32',
                    value == null // eslint-disable-line no-eq-null
                     ? '0x0000000000000000000000000000000000000000000000000000000000000000' : $03ca7a3d69ca2727$var$ethUtil.keccak(this.encodeData(type, value, types, useV4)), 
                ];
                if (value === undefined) throw new Error(`missing value for field ${name} of type ${type}`);
                if (type === 'bytes') return [
                    'bytes32',
                    $03ca7a3d69ca2727$var$ethUtil.keccak(value)
                ];
                if (type === 'string') {
                    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex
                    if (typeof value === 'string') value = $03ca7a3d69ca2727$require$Buffer.from(value, 'utf8');
                    return [
                        'bytes32',
                        $03ca7a3d69ca2727$var$ethUtil.keccak(value)
                    ];
                }
                if (type.lastIndexOf(']') === type.length - 1) {
                    const parsedType = type.slice(0, type.lastIndexOf('['));
                    const typeValuePairs = value.map((item)=>encodeField(name, parsedType, item)
                    );
                    return [
                        'bytes32',
                        $03ca7a3d69ca2727$var$ethUtil.keccak($03ca7a3d69ca2727$var$ethAbi.rawEncode(typeValuePairs.map(([t])=>t
                        ), typeValuePairs.map(([, v])=>v
                        ))), 
                    ];
                }
                return [
                    type,
                    value
                ];
            };
            for (const field of types[primaryType]){
                const [type, value] = encodeField(field.name, field.type, data[field.name]);
                encodedTypes.push(type);
                encodedValues.push(value);
            }
        } else for (const field of types[primaryType]){
            let value = data[field.name];
            if (value !== undefined) {
                if (field.type === 'bytes') {
                    encodedTypes.push('bytes32');
                    value = $03ca7a3d69ca2727$var$ethUtil.keccak(value);
                    encodedValues.push(value);
                } else if (field.type === 'string') {
                    encodedTypes.push('bytes32');
                    // convert string to buffer - prevents ethUtil from interpreting strings like '0xabcd' as hex
                    if (typeof value === 'string') value = $03ca7a3d69ca2727$require$Buffer.from(value, 'utf8');
                    value = $03ca7a3d69ca2727$var$ethUtil.keccak(value);
                    encodedValues.push(value);
                } else if (types[field.type] !== undefined) {
                    encodedTypes.push('bytes32');
                    value = $03ca7a3d69ca2727$var$ethUtil.keccak(this.encodeData(field.type, value, types, useV4));
                    encodedValues.push(value);
                } else if (field.type.lastIndexOf(']') === field.type.length - 1) throw new Error('Arrays are unimplemented in encodeData; use V4 extension');
                else {
                    encodedTypes.push(field.type);
                    encodedValues.push(value);
                }
            }
        }
        return $03ca7a3d69ca2727$var$ethAbi.rawEncode(encodedTypes, encodedValues);
    },
    /**
     * Encodes the type of an object by encoding a comma delimited list of its members
     *
     * @param {string} primaryType - Root type to encode
     * @param {Object} types - Type definitions
     * @returns {string} - Encoded representation of the type of an object
     */ encodeType (primaryType, types) {
        let result = '';
        let deps = this.findTypeDependencies(primaryType, types).filter((dep)=>dep !== primaryType
        );
        deps = [
            primaryType
        ].concat(deps.sort());
        for (const type of deps){
            const children = types[type];
            if (!children) throw new Error(`No type definition specified: ${type}`);
            result += `${type}(${types[type].map(({ name: name , type: t  })=>`${t} ${name}`
            ).join(',')})`;
        }
        return result;
    },
    /**
     * Finds all types within a type definition object
     *
     * @param {string} primaryType - Root type
     * @param {Object} types - Type definitions
     * @param {Array} results - current set of accumulated types
     * @returns {Array} - Set of all types found in the type definition
     */ findTypeDependencies (primaryType, types, results = []) {
        [primaryType] = primaryType.match(/^\w*/u);
        if (results.includes(primaryType) || types[primaryType] === undefined) return results;
        results.push(primaryType);
        for (const field of types[primaryType])for (const dep of this.findTypeDependencies(field.type, types, results))!results.includes(dep) && results.push(dep);
        return results;
    },
    /**
     * Hashes an object
     *
     * @param {string} primaryType - Root type
     * @param {Object} data - Object to hash
     * @param {Object} types - Type definitions
     * @returns {Buffer} - Hash of an object
     */ hashStruct (primaryType, data, types, useV4 = true) {
        return $03ca7a3d69ca2727$var$ethUtil.keccak(this.encodeData(primaryType, data, types, useV4));
    },
    /**
     * Hashes the type of an object
     *
     * @param {string} primaryType - Root type to hash
     * @param {Object} types - Type definitions
     * @returns {Buffer} - Hash of an object
     */ hashType (primaryType, types) {
        return $03ca7a3d69ca2727$var$ethUtil.keccak(this.encodeType(primaryType, types));
    },
    /**
     * Removes properties from a message object that are not defined per EIP-712
     *
     * @param {Object} data - typed message object
     * @returns {Object} - typed message object with only allowed fields
     */ sanitizeData (data) {
        const sanitizedData = {};
        for(const key in $03ca7a3d69ca2727$var$TYPED_MESSAGE_SCHEMA.properties)if (data[key]) sanitizedData[key] = data[key];
        if ('types' in sanitizedData) sanitizedData.types = Object.assign({
            EIP712Domain: []
        }, sanitizedData.types);
        return sanitizedData;
    },
    /**
     * Signs a typed message as per EIP-712 and returns its keccak hash
     *
     * @param {Object} typedData - Types message data to sign
     * @returns {Buffer} - keccak hash of the resulting signed message
     */ sign (typedData, useV4 = true) {
        const sanitizedData = this.sanitizeData(typedData);
        const parts = [
            $03ca7a3d69ca2727$require$Buffer.from('1901', 'hex')
        ];
        parts.push(this.hashStruct('EIP712Domain', sanitizedData.domain, sanitizedData.types, useV4));
        if (sanitizedData.primaryType !== 'EIP712Domain') parts.push(this.hashStruct(sanitizedData.primaryType, sanitizedData.message, sanitizedData.types, useV4));
        return $03ca7a3d69ca2727$var$ethUtil.keccak($03ca7a3d69ca2727$require$Buffer.concat(parts));
    }
};
$03ca7a3d69ca2727$exports.TypedDataUtils = $03ca7a3d69ca2727$var$TypedDataUtils;
function $03ca7a3d69ca2727$var$concatSig(v, r, s) {
    const rSig = $03ca7a3d69ca2727$var$ethUtil.fromSigned(r);
    const sSig = $03ca7a3d69ca2727$var$ethUtil.fromSigned(s);
    const vSig = $03ca7a3d69ca2727$var$ethUtil.bufferToInt(v);
    const rStr = $03ca7a3d69ca2727$var$padWithZeroes($03ca7a3d69ca2727$var$ethUtil.toUnsigned(rSig).toString('hex'), 64);
    const sStr = $03ca7a3d69ca2727$var$padWithZeroes($03ca7a3d69ca2727$var$ethUtil.toUnsigned(sSig).toString('hex'), 64);
    const vStr = $03ca7a3d69ca2727$var$ethUtil.stripHexPrefix($03ca7a3d69ca2727$var$ethUtil.intToHex(vSig));
    return $03ca7a3d69ca2727$var$ethUtil.addHexPrefix(rStr.concat(sStr, vStr)).toString('hex');
}
$03ca7a3d69ca2727$exports.concatSig = $03ca7a3d69ca2727$var$concatSig;
function $03ca7a3d69ca2727$var$normalize(input) {
    if (!input) return undefined;
    if (typeof input === 'number') {
        const buffer = $03ca7a3d69ca2727$var$ethUtil.toBuffer(input);
        input = $03ca7a3d69ca2727$var$ethUtil.bufferToHex(buffer);
    }
    if (typeof input !== 'string') {
        let msg = 'eth-sig-util.normalize() requires hex string or integer input.';
        msg += ` received ${typeof input}: ${input}`;
        throw new Error(msg);
    }
    return $03ca7a3d69ca2727$var$ethUtil.addHexPrefix(input.toLowerCase());
}
$03ca7a3d69ca2727$exports.normalize = $03ca7a3d69ca2727$var$normalize;
function $03ca7a3d69ca2727$var$personalSign(privateKey, msgParams) {
    const message = $03ca7a3d69ca2727$var$ethUtil.toBuffer(msgParams.data);
    const msgHash = $03ca7a3d69ca2727$var$ethUtil.hashPersonalMessage(message);
    const sig = $03ca7a3d69ca2727$var$ethUtil.ecsign(msgHash, privateKey);
    const serialized = $03ca7a3d69ca2727$var$ethUtil.bufferToHex($03ca7a3d69ca2727$var$concatSig(sig.v, sig.r, sig.s));
    return serialized;
}
$03ca7a3d69ca2727$exports.personalSign = $03ca7a3d69ca2727$var$personalSign;
function $03ca7a3d69ca2727$var$recoverPersonalSignature(msgParams) {
    const publicKey = $03ca7a3d69ca2727$var$getPublicKeyFor(msgParams);
    const sender = $03ca7a3d69ca2727$var$ethUtil.publicToAddress(publicKey);
    const senderHex = $03ca7a3d69ca2727$var$ethUtil.bufferToHex(sender);
    return senderHex;
}
$03ca7a3d69ca2727$exports.recoverPersonalSignature = $03ca7a3d69ca2727$var$recoverPersonalSignature;
function $03ca7a3d69ca2727$var$extractPublicKey(msgParams) {
    const publicKey = $03ca7a3d69ca2727$var$getPublicKeyFor(msgParams);
    return `0x${publicKey.toString('hex')}`;
}
$03ca7a3d69ca2727$exports.extractPublicKey = $03ca7a3d69ca2727$var$extractPublicKey;
function $03ca7a3d69ca2727$var$externalTypedSignatureHash(typedData) {
    const hashBuffer = $03ca7a3d69ca2727$var$typedSignatureHash(typedData);
    return $03ca7a3d69ca2727$var$ethUtil.bufferToHex(hashBuffer);
}
$03ca7a3d69ca2727$exports.typedSignatureHash = $03ca7a3d69ca2727$var$externalTypedSignatureHash;
function $03ca7a3d69ca2727$var$signTypedDataLegacy(privateKey, msgParams) {
    const msgHash = $03ca7a3d69ca2727$var$typedSignatureHash(msgParams.data);
    const sig = $03ca7a3d69ca2727$var$ethUtil.ecsign(msgHash, privateKey);
    return $03ca7a3d69ca2727$var$ethUtil.bufferToHex($03ca7a3d69ca2727$var$concatSig(sig.v, sig.r, sig.s));
}
$03ca7a3d69ca2727$exports.signTypedDataLegacy = $03ca7a3d69ca2727$var$signTypedDataLegacy;
function $03ca7a3d69ca2727$var$recoverTypedSignatureLegacy(msgParams) {
    const msgHash = $03ca7a3d69ca2727$var$typedSignatureHash(msgParams.data);
    const publicKey = $03ca7a3d69ca2727$var$recoverPublicKey(msgHash, msgParams.sig);
    const sender = $03ca7a3d69ca2727$var$ethUtil.publicToAddress(publicKey);
    return $03ca7a3d69ca2727$var$ethUtil.bufferToHex(sender);
}
$03ca7a3d69ca2727$exports.recoverTypedSignatureLegacy = $03ca7a3d69ca2727$var$recoverTypedSignatureLegacy;
function $03ca7a3d69ca2727$var$encrypt(receiverPublicKey, msgParams, version) {
    switch(version){
        case 'x25519-xsalsa20-poly1305':
            {
                if (typeof msgParams.data !== 'string') throw new Error('Cannot detect secret message, message params should be of the form {data: "secret message"} ');
                // generate ephemeral keypair
                const ephemeralKeyPair = $03ca7a3d69ca2727$var$nacl.box.keyPair();
                // assemble encryption parameters - from string to UInt8
                let pubKeyUInt8Array;
                try {
                    pubKeyUInt8Array = $03ca7a3d69ca2727$var$naclUtil.decodeBase64(receiverPublicKey);
                } catch (err) {
                    throw new Error('Bad public key');
                }
                const msgParamsUInt8Array = $03ca7a3d69ca2727$var$naclUtil.decodeUTF8(msgParams.data);
                const nonce = $03ca7a3d69ca2727$var$nacl.randomBytes($03ca7a3d69ca2727$var$nacl.box.nonceLength);
                // encrypt
                const encryptedMessage = $03ca7a3d69ca2727$var$nacl.box(msgParamsUInt8Array, nonce, pubKeyUInt8Array, ephemeralKeyPair.secretKey);
                // handle encrypted data
                const output = {
                    version: 'x25519-xsalsa20-poly1305',
                    nonce: $03ca7a3d69ca2727$var$naclUtil.encodeBase64(nonce),
                    ephemPublicKey: $03ca7a3d69ca2727$var$naclUtil.encodeBase64(ephemeralKeyPair.publicKey),
                    ciphertext: $03ca7a3d69ca2727$var$naclUtil.encodeBase64(encryptedMessage)
                };
                // return encrypted msg data
                return output;
            }
        default:
            throw new Error('Encryption type/version not supported');
    }
}
$03ca7a3d69ca2727$exports.encrypt = $03ca7a3d69ca2727$var$encrypt;
function $03ca7a3d69ca2727$var$encryptSafely(receiverPublicKey, msgParams, version) {
    const DEFAULT_PADDING_LENGTH = 2048;
    const NACL_EXTRA_BYTES = 16;
    const { data: data  } = msgParams;
    if (!data) throw new Error('Cannot encrypt empty msg.data');
    if (typeof data === 'object' && 'toJSON' in data) // remove toJSON attack vector
    // TODO, check all possible children
    throw new Error('Cannot encrypt with toJSON property.  Please remove toJSON property');
    // add padding
    const dataWithPadding = {
        data: data,
        padding: ''
    };
    // calculate padding
    const dataLength = $03ca7a3d69ca2727$require$Buffer.byteLength(JSON.stringify(dataWithPadding), 'utf-8');
    const modVal = dataLength % DEFAULT_PADDING_LENGTH;
    let padLength = 0;
    // Only pad if necessary
    if (modVal > 0) padLength = DEFAULT_PADDING_LENGTH - modVal - NACL_EXTRA_BYTES; // nacl extra bytes
    dataWithPadding.padding = '0'.repeat(padLength);
    const paddedMsgParams = {
        data: JSON.stringify(dataWithPadding)
    };
    return $03ca7a3d69ca2727$var$encrypt(receiverPublicKey, paddedMsgParams, version);
}
$03ca7a3d69ca2727$exports.encryptSafely = $03ca7a3d69ca2727$var$encryptSafely;
function $03ca7a3d69ca2727$var$decrypt(encryptedData, receiverPrivateKey) {
    switch(encryptedData.version){
        case 'x25519-xsalsa20-poly1305':
            {
                // string to buffer to UInt8Array
                const recieverPrivateKeyUint8Array = $03ca7a3d69ca2727$var$nacl_decodeHex(receiverPrivateKey);
                const recieverEncryptionPrivateKey = $03ca7a3d69ca2727$var$nacl.box.keyPair.fromSecretKey(recieverPrivateKeyUint8Array).secretKey;
                // assemble decryption parameters
                const nonce = $03ca7a3d69ca2727$var$naclUtil.decodeBase64(encryptedData.nonce);
                const ciphertext = $03ca7a3d69ca2727$var$naclUtil.decodeBase64(encryptedData.ciphertext);
                const ephemPublicKey = $03ca7a3d69ca2727$var$naclUtil.decodeBase64(encryptedData.ephemPublicKey);
                // decrypt
                const decryptedMessage = $03ca7a3d69ca2727$var$nacl.box.open(ciphertext, nonce, ephemPublicKey, recieverEncryptionPrivateKey);
                // return decrypted msg data
                let output;
                try {
                    output = $03ca7a3d69ca2727$var$naclUtil.encodeUTF8(decryptedMessage);
                } catch (err) {
                    throw new Error('Decryption failed.');
                }
                if (output) return output;
                throw new Error('Decryption failed.');
            }
        default:
            throw new Error('Encryption type/version not supported.');
    }
}
$03ca7a3d69ca2727$exports.decrypt = $03ca7a3d69ca2727$var$decrypt;
function $03ca7a3d69ca2727$var$decryptSafely(encryptedData, receiverPrivateKey) {
    const dataWithPadding = JSON.parse($03ca7a3d69ca2727$var$decrypt(encryptedData, receiverPrivateKey));
    return dataWithPadding.data;
}
$03ca7a3d69ca2727$exports.decryptSafely = $03ca7a3d69ca2727$var$decryptSafely;
function $03ca7a3d69ca2727$var$getEncryptionPublicKey(privateKey) {
    const privateKeyUint8Array = $03ca7a3d69ca2727$var$nacl_decodeHex(privateKey);
    const encryptionPublicKey = $03ca7a3d69ca2727$var$nacl.box.keyPair.fromSecretKey(privateKeyUint8Array).publicKey;
    return $03ca7a3d69ca2727$var$naclUtil.encodeBase64(encryptionPublicKey);
}
$03ca7a3d69ca2727$exports.getEncryptionPublicKey = $03ca7a3d69ca2727$var$getEncryptionPublicKey;
/**
 * A generic entry point for all typed data methods to be passed, includes a version parameter.
 */ function $03ca7a3d69ca2727$var$signTypedMessage(privateKey, msgParams, version = 'V4') {
    switch(version){
        case 'V1':
            return $03ca7a3d69ca2727$var$signTypedDataLegacy(privateKey, msgParams);
        case 'V3':
            return $03ca7a3d69ca2727$var$signTypedData(privateKey, msgParams);
        case 'V4':
        default:
            return $03ca7a3d69ca2727$var$signTypedData_v4(privateKey, msgParams);
    }
}
$03ca7a3d69ca2727$exports.signTypedMessage = $03ca7a3d69ca2727$var$signTypedMessage;
function $03ca7a3d69ca2727$var$recoverTypedMessage(msgParams, version = 'V4') {
    switch(version){
        case 'V1':
            return $03ca7a3d69ca2727$var$recoverTypedSignatureLegacy(msgParams);
        case 'V3':
            return $03ca7a3d69ca2727$var$recoverTypedSignature(msgParams);
        case 'V4':
        default:
            return $03ca7a3d69ca2727$var$recoverTypedSignature_v4(msgParams);
    }
}
$03ca7a3d69ca2727$exports.recoverTypedMessage = $03ca7a3d69ca2727$var$recoverTypedMessage;
function $03ca7a3d69ca2727$var$signTypedData(privateKey, msgParams) {
    const message = $03ca7a3d69ca2727$var$TypedDataUtils.sign(msgParams.data, false);
    const sig = $03ca7a3d69ca2727$var$ethUtil.ecsign(message, privateKey);
    return $03ca7a3d69ca2727$var$ethUtil.bufferToHex($03ca7a3d69ca2727$var$concatSig(sig.v, sig.r, sig.s));
}
$03ca7a3d69ca2727$exports.signTypedData = $03ca7a3d69ca2727$var$signTypedData;
function $03ca7a3d69ca2727$var$signTypedData_v4(privateKey, msgParams) {
    const message = $03ca7a3d69ca2727$var$TypedDataUtils.sign(msgParams.data);
    const sig = $03ca7a3d69ca2727$var$ethUtil.ecsign(message, privateKey);
    return $03ca7a3d69ca2727$var$ethUtil.bufferToHex($03ca7a3d69ca2727$var$concatSig(sig.v, sig.r, sig.s));
}
$03ca7a3d69ca2727$exports.signTypedData_v4 = $03ca7a3d69ca2727$var$signTypedData_v4;
function $03ca7a3d69ca2727$var$recoverTypedSignature(msgParams) {
    const message = $03ca7a3d69ca2727$var$TypedDataUtils.sign(msgParams.data, false);
    const publicKey = $03ca7a3d69ca2727$var$recoverPublicKey(message, msgParams.sig);
    const sender = $03ca7a3d69ca2727$var$ethUtil.publicToAddress(publicKey);
    return $03ca7a3d69ca2727$var$ethUtil.bufferToHex(sender);
}
$03ca7a3d69ca2727$exports.recoverTypedSignature = $03ca7a3d69ca2727$var$recoverTypedSignature;
function $03ca7a3d69ca2727$var$recoverTypedSignature_v4(msgParams) {
    const message = $03ca7a3d69ca2727$var$TypedDataUtils.sign(msgParams.data);
    const publicKey = $03ca7a3d69ca2727$var$recoverPublicKey(message, msgParams.sig);
    const sender = $03ca7a3d69ca2727$var$ethUtil.publicToAddress(publicKey);
    return $03ca7a3d69ca2727$var$ethUtil.bufferToHex(sender);
}
$03ca7a3d69ca2727$exports.recoverTypedSignature_v4 = $03ca7a3d69ca2727$var$recoverTypedSignature_v4;
/**
 * @param typedData - Array of data along with types, as per EIP712.
 * @returns Buffer
 */ function $03ca7a3d69ca2727$var$typedSignatureHash(typedData) {
    const error = new Error('Expect argument to be non-empty array');
    if (typeof typedData !== 'object' || !('length' in typedData) || !typedData.length) throw error;
    const data = typedData.map(function(e) {
        return e.type === 'bytes' ? $03ca7a3d69ca2727$var$ethUtil.toBuffer(e.value) : e.value;
    });
    const types = typedData.map(function(e) {
        return e.type;
    });
    const schema = typedData.map(function(e) {
        if (!e.name) throw error;
        return `${e.type} ${e.name}`;
    });
    return $03ca7a3d69ca2727$var$ethAbi.soliditySHA3([
        'bytes32',
        'bytes32'
    ], [
        $03ca7a3d69ca2727$var$ethAbi.soliditySHA3(new Array(typedData.length).fill('string'), schema),
        $03ca7a3d69ca2727$var$ethAbi.soliditySHA3(types, data), 
    ]);
}
function $03ca7a3d69ca2727$var$recoverPublicKey(hash, sig) {
    const signature = $03ca7a3d69ca2727$var$ethUtil.toBuffer(sig);
    const sigParams = $03ca7a3d69ca2727$var$ethUtil.fromRpcSig(signature);
    return $03ca7a3d69ca2727$var$ethUtil.ecrecover(hash, sigParams.v, sigParams.r, sigParams.s);
}
function $03ca7a3d69ca2727$var$getPublicKeyFor(msgParams) {
    const message = $03ca7a3d69ca2727$var$ethUtil.toBuffer(msgParams.data);
    const msgHash = $03ca7a3d69ca2727$var$ethUtil.hashPersonalMessage(message);
    return $03ca7a3d69ca2727$var$recoverPublicKey(msgHash, msgParams.sig);
}
function $03ca7a3d69ca2727$var$padWithZeroes(number, length) {
    let myString = `${number}`;
    while(myString.length < length)myString = `0${myString}`;
    return myString;
}
// converts hex strings to the Uint8Array format used by nacl
function $03ca7a3d69ca2727$var$nacl_decodeHex(msgHex) {
    const msgBase64 = $03ca7a3d69ca2727$require$Buffer.from(msgHex, 'hex').toString('base64');
    return $03ca7a3d69ca2727$var$naclUtil.decodeBase64(msgBase64);
}


var $8855d6b5606fd77f$exports = {};
var $64024b09fbacb3c3$exports = {};

(function(globalObj) {
    /*
      bignumber.js v2.4.0
      A JavaScript library for arbitrary-precision arithmetic.
      https://github.com/MikeMcl/bignumber.js
      Copyright (c) 2016 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */ var BigNumber1, cryptoObj, parseNumeric, isNumeric = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, mathceil = Math.ceil, mathfloor = Math.floor, notBool = ' not a boolean or binary digit', roundingMode = 'rounding mode', tooManyDigits = 'number type has more than 15 significant digits', ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_', BASE = 100000000000000, LOG_BASE = 14, MAX_SAFE_INTEGER = 9007199254740991, // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1
    POWS_TEN = [
        1,
        10,
        100,
        1000,
        10000,
        100000,
        1000000,
        10000000,
        100000000,
        1000000000,
        10000000000,
        100000000000,
        1000000000000,
        10000000000000
    ], SQRT_BASE = 10000000, /*
         * The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and
         * the arguments to toExponential, toFixed, toFormat, and toPrecision, beyond which an
         * exception is thrown (if ERRORS is true).
         */ MAX = 1000000000; // 0 to MAX_INT32
    if (typeof crypto != 'undefined') cryptoObj = crypto;
    /*
     * Create and return a BigNumber constructor.
     */ function constructorFactory(configObj) {
        var div, // id tracks the caller function, so its name can be included in error messages.
        id = 0, P = BigNumber.prototype, ONE = new BigNumber(1), /********************************* EDITABLE DEFAULTS **********************************/ /*
             * The default values below must be integers within the inclusive ranges stated.
             * The values can also be changed at run-time using BigNumber.config.
             */ // The maximum number of decimal places for operations involving division.
        DECIMAL_PLACES = 20, /*
             * The rounding mode used when rounding to the above decimal places, and when using
             * toExponential, toFixed, toFormat and toPrecision, and round (default value).
             * UP         0 Away from zero.
             * DOWN       1 Towards zero.
             * CEIL       2 Towards +Infinity.
             * FLOOR      3 Towards -Infinity.
             * HALF_UP    4 Towards nearest neighbour. If equidistant, up.
             * HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
             * HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
             * HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
             * HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
             */ ROUNDING_MODE = 4, // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]
        // The exponent value at and beneath which toString returns exponential notation.
        // Number type: -7
        TO_EXP_NEG = -7, // The exponent value at and above which toString returns exponential notation.
        // Number type: 21
        TO_EXP_POS = 21, // RANGE : [MIN_EXP, MAX_EXP]
        // The minimum exponent value, beneath which underflow to zero occurs.
        // Number type: -324  (5e-324)
        MIN_EXP = -10000000, // The maximum exponent value, above which overflow to Infinity occurs.
        // Number type:  308  (1.7976931348623157e+308)
        // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.
        MAX_EXP = 10000000, // Whether BigNumber Errors are ever thrown.
        ERRORS = true, // Change to intValidatorNoErrors if ERRORS is false.
        isValidInt = intValidatorWithErrors, // Whether to use cryptographically-secure random number generation, if available.
        CRYPTO = false, /*
             * The modulo mode used when calculating the modulus: a mod n.
             * The quotient (q = a / n) is calculated according to the corresponding rounding mode.
             * The remainder (r) is calculated as: r = a - n * q.
             *
             * UP        0 The remainder is positive if the dividend is negative, else is negative.
             * DOWN      1 The remainder has the same sign as the dividend.
             *             This modulo mode is commonly known as 'truncated division' and is
             *             equivalent to (a % n) in JavaScript.
             * FLOOR     3 The remainder has the same sign as the divisor (Python %).
             * HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.
             * EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).
             *             The remainder is always positive.
             *
             * The truncated division, floored division, Euclidian division and IEEE 754 remainder
             * modes are commonly used for the modulus operation.
             * Although the other rounding modes can also be used, they may not give useful results.
             */ MODULO_MODE = 1, // The maximum number of significant digits of the result of the toPower operation.
        // If POW_PRECISION is 0, there will be unlimited significant digits.
        POW_PRECISION = 100, // The format specification used by the BigNumber.prototype.toFormat method.
        FORMAT = {
            decimalSeparator: '.',
            groupSeparator: ',',
            groupSize: 3,
            secondaryGroupSize: 0,
            fractionGroupSeparator: '\xA0',
            fractionGroupSize: 0
        };
        /******************************************************************************************/ // CONSTRUCTOR
        /*
         * The BigNumber constructor and exported function.
         * Create and return a new instance of a BigNumber object.
         *
         * n {number|string|BigNumber} A numeric value.
         * [b] {number} The base of n. Integer, 2 to 64 inclusive.
         */ function BigNumber(n, b) {
            var c, e, i, num, len, str, x = this;
            // Enable constructor usage without new.
            if (!(x instanceof BigNumber)) {
                // 'BigNumber() constructor call without new: {n}'
                if (ERRORS) raise(26, 'constructor call without new', n);
                return new BigNumber(n, b);
            }
            // 'new BigNumber() base not an integer: {b}'
            // 'new BigNumber() base out of range: {b}'
            if (b == null || !isValidInt(b, 2, 64, id, 'base')) {
                // Duplicate.
                if (n instanceof BigNumber) {
                    x.s = n.s;
                    x.e = n.e;
                    x.c = (n = n.c) ? n.slice() : n;
                    id = 0;
                    return;
                }
                if ((num = typeof n == 'number') && n * 0 == 0) {
                    x.s = 1 / n < 0 ? (n = -n, -1) : 1;
                    // Fast path for integers.
                    if (n === ~~n) {
                        for(e = 0, i = n; i >= 10; i /= 10, e++);
                        x.e = e;
                        x.c = [
                            n
                        ];
                        id = 0;
                        return;
                    }
                    str = n + '';
                } else {
                    if (!isNumeric.test(str = n + '')) return parseNumeric(x, str, num);
                    x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                }
            } else {
                b = b | 0;
                str = n + '';
                // Ensure return value is rounded to DECIMAL_PLACES as with other bases.
                // Allow exponential notation to be used with base 10 argument.
                if (b == 10) {
                    x = new BigNumber(n instanceof BigNumber ? n : str);
                    return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);
                }
                // Avoid potential interpretation of Infinity and NaN as base 44+ values.
                // Any number in exponential form will fail due to the [Ee][+-].
                if ((num = typeof n == 'number') && n * 0 != 0 || !new RegExp('^-?' + (c = '[' + ALPHABET.slice(0, b) + ']+') + '(?:\\.' + c + ')?$', b < 37 ? 'i' : '').test(str)) return parseNumeric(x, str, num, b);
                if (num) {
                    x.s = 1 / n < 0 ? (str = str.slice(1), -1) : 1;
                    if (ERRORS && str.replace(/^0\.0*|\./, '').length > 15) // 'new BigNumber() number type has more than 15 significant digits: {n}'
                    raise(id, tooManyDigits, n);
                    // Prevent later check for length on converted number.
                    num = false;
                } else x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;
                str = convertBase(str, 10, b, x.s);
            }
            // Decimal point?
            if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');
            // Exponential form?
            if ((i = str.search(/e/i)) > 0) {
                // Determine exponent.
                if (e < 0) e = i;
                e += +str.slice(i + 1);
                str = str.substring(0, i);
            } else if (e < 0) // Integer.
            e = str.length;
            // Determine leading zeros.
            for(i = 0; str.charCodeAt(i) === 48; i++);
            // Determine trailing zeros.
            for(len = str.length; str.charCodeAt(--len) === 48;);
            str = str.slice(i, len + 1);
            if (str) {
                len = str.length;
                // Disallow numbers with over 15 significant digits if number type.
                // 'new BigNumber() number type has more than 15 significant digits: {n}'
                if (num && ERRORS && len > 15 && (n > MAX_SAFE_INTEGER || n !== mathfloor(n))) raise(id, tooManyDigits, x.s * n);
                e = e - i - 1;
                // Overflow?
                if (e > MAX_EXP) // Infinity.
                x.c = x.e = null;
                else if (e < MIN_EXP) // Zero.
                x.c = [
                    x.e = 0
                ];
                else {
                    x.e = e;
                    x.c = [];
                    // Transform base
                    // e is the base 10 exponent.
                    // i is where to slice str to get the first element of the coefficient array.
                    i = (e + 1) % LOG_BASE;
                    if (e < 0) i += LOG_BASE;
                    if (i < len) {
                        if (i) x.c.push(+str.slice(0, i));
                        for(len -= LOG_BASE; i < len;)x.c.push(+str.slice(i, i += LOG_BASE));
                        str = str.slice(i);
                        i = LOG_BASE - str.length;
                    } else i -= len;
                    for(; i--; str += '0');
                    x.c.push(+str);
                }
            } else // Zero.
            x.c = [
                x.e = 0
            ];
            id = 0;
        }
        // CONSTRUCTOR PROPERTIES
        BigNumber.another = constructorFactory;
        BigNumber.ROUND_UP = 0;
        BigNumber.ROUND_DOWN = 1;
        BigNumber.ROUND_CEIL = 2;
        BigNumber.ROUND_FLOOR = 3;
        BigNumber.ROUND_HALF_UP = 4;
        BigNumber.ROUND_HALF_DOWN = 5;
        BigNumber.ROUND_HALF_EVEN = 6;
        BigNumber.ROUND_HALF_CEIL = 7;
        BigNumber.ROUND_HALF_FLOOR = 8;
        BigNumber.EUCLID = 9;
        /*
         * Configure infrequently-changing library-wide settings.
         *
         * Accept an object or an argument list, with one or many of the following properties or
         * parameters respectively:
         *
         *   DECIMAL_PLACES  {number}  Integer, 0 to MAX inclusive
         *   ROUNDING_MODE   {number}  Integer, 0 to 8 inclusive
         *   EXPONENTIAL_AT  {number|number[]}  Integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to 0 incl., 0 to MAX incl.]
         *   RANGE           {number|number[]}  Non-zero integer, -MAX to MAX inclusive or
         *                                      [integer -MAX to -1 incl., integer 1 to MAX incl.]
         *   ERRORS          {boolean|number}   true, false, 1 or 0
         *   CRYPTO          {boolean|number}   true, false, 1 or 0
         *   MODULO_MODE     {number}           0 to 9 inclusive
         *   POW_PRECISION   {number}           0 to MAX inclusive
         *   FORMAT          {object}           See BigNumber.prototype.toFormat
         *      decimalSeparator       {string}
         *      groupSeparator         {string}
         *      groupSize              {number}
         *      secondaryGroupSize     {number}
         *      fractionGroupSeparator {string}
         *      fractionGroupSize      {number}
         *
         * (The values assigned to the above FORMAT object properties are not checked for validity.)
         *
         * E.g.
         * BigNumber.config(20, 4) is equivalent to
         * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })
         *
         * Ignore properties/parameters set to null or undefined.
         * Return an object with the properties current values.
         */ BigNumber.config = function() {
            var v, p, i = 0, r = {}, a = arguments, o = a[0], has = o && typeof o == 'object' ? function() {
                if (o.hasOwnProperty(p)) return (v = o[p]) != null;
            } : function() {
                if (a.length > i) return (v = a[i++]) != null;
            };
            // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.
            // 'config() DECIMAL_PLACES not an integer: {v}'
            // 'config() DECIMAL_PLACES out of range: {v}'
            if (has(p = 'DECIMAL_PLACES') && isValidInt(v, 0, MAX, 2, p)) DECIMAL_PLACES = v | 0;
            r[p] = DECIMAL_PLACES;
            // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.
            // 'config() ROUNDING_MODE not an integer: {v}'
            // 'config() ROUNDING_MODE out of range: {v}'
            if (has(p = 'ROUNDING_MODE') && isValidInt(v, 0, 8, 2, p)) ROUNDING_MODE = v | 0;
            r[p] = ROUNDING_MODE;
            // EXPONENTIAL_AT {number|number[]}
            // Integer, -MAX to MAX inclusive or [integer -MAX to 0 inclusive, 0 to MAX inclusive].
            // 'config() EXPONENTIAL_AT not an integer: {v}'
            // 'config() EXPONENTIAL_AT out of range: {v}'
            if (has(p = 'EXPONENTIAL_AT')) {
                if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, 0, 2, p) && isValidInt(v[1], 0, MAX, 2, p)) {
                        TO_EXP_NEG = v[0] | 0;
                        TO_EXP_POS = v[1] | 0;
                    }
                } else if (isValidInt(v, -MAX, MAX, 2, p)) TO_EXP_NEG = -(TO_EXP_POS = (v < 0 ? -v : v) | 0);
            }
            r[p] = [
                TO_EXP_NEG,
                TO_EXP_POS
            ];
            // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or
            // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].
            // 'config() RANGE not an integer: {v}'
            // 'config() RANGE cannot be zero: {v}'
            // 'config() RANGE out of range: {v}'
            if (has(p = 'RANGE')) {
                if (isArray(v)) {
                    if (isValidInt(v[0], -MAX, -1, 2, p) && isValidInt(v[1], 1, MAX, 2, p)) {
                        MIN_EXP = v[0] | 0;
                        MAX_EXP = v[1] | 0;
                    }
                } else if (isValidInt(v, -MAX, MAX, 2, p)) {
                    if (v | 0) MIN_EXP = -(MAX_EXP = (v < 0 ? -v : v) | 0);
                    else if (ERRORS) raise(2, p + ' cannot be zero', v);
                }
            }
            r[p] = [
                MIN_EXP,
                MAX_EXP
            ];
            // ERRORS {boolean|number} true, false, 1 or 0.
            // 'config() ERRORS not a boolean or binary digit: {v}'
            if (has(p = 'ERRORS')) {
                if (v === !!v || v === 1 || v === 0) {
                    id = 0;
                    isValidInt = (ERRORS = !!v) ? intValidatorWithErrors : intValidatorNoErrors;
                } else if (ERRORS) raise(2, p + notBool, v);
            }
            r[p] = ERRORS;
            // CRYPTO {boolean|number} true, false, 1 or 0.
            // 'config() CRYPTO not a boolean or binary digit: {v}'
            // 'config() crypto unavailable: {crypto}'
            if (has(p = 'CRYPTO')) {
                if (v === !!v || v === 1 || v === 0) {
                    CRYPTO = !!(v && cryptoObj);
                    if (v && !CRYPTO && ERRORS) raise(2, 'crypto unavailable', cryptoObj);
                } else if (ERRORS) raise(2, p + notBool, v);
            }
            r[p] = CRYPTO;
            // MODULO_MODE {number} Integer, 0 to 9 inclusive.
            // 'config() MODULO_MODE not an integer: {v}'
            // 'config() MODULO_MODE out of range: {v}'
            if (has(p = 'MODULO_MODE') && isValidInt(v, 0, 9, 2, p)) MODULO_MODE = v | 0;
            r[p] = MODULO_MODE;
            // POW_PRECISION {number} Integer, 0 to MAX inclusive.
            // 'config() POW_PRECISION not an integer: {v}'
            // 'config() POW_PRECISION out of range: {v}'
            if (has(p = 'POW_PRECISION') && isValidInt(v, 0, MAX, 2, p)) POW_PRECISION = v | 0;
            r[p] = POW_PRECISION;
            // FORMAT {object}
            // 'config() FORMAT not an object: {v}'
            if (has(p = 'FORMAT')) {
                if (typeof v == 'object') FORMAT = v;
                else if (ERRORS) raise(2, p + ' not an object', v);
            }
            r[p] = FORMAT;
            return r;
        };
        /*
         * Return a new BigNumber whose value is the maximum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */ BigNumber.max = function() {
            return maxOrMin(arguments, P.lt);
        };
        /*
         * Return a new BigNumber whose value is the minimum of the arguments.
         *
         * arguments {number|string|BigNumber}
         */ BigNumber.min = function() {
            return maxOrMin(arguments, P.gt);
        };
        /*
         * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,
         * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing
         * zeros are produced).
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         *
         * 'random() decimal places not an integer: {dp}'
         * 'random() decimal places out of range: {dp}'
         * 'random() crypto unavailable: {crypto}'
         */ BigNumber.random = function() {
            var pow2_53 = 9007199254740992;
            // Return a 53 bit integer n, where 0 <= n < 9007199254740992.
            // Check if Math.random() produces more than 32 bits of randomness.
            // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.
            // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.
            var random53bitInt = Math.random() * pow2_53 & 2097151 ? function() {
                return mathfloor(Math.random() * pow2_53);
            } : function() {
                return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
            };
            return function(dp) {
                var a, b, e, k, v, i = 0, c = [], rand = new BigNumber(ONE);
                dp = dp == null || !isValidInt(dp, 0, MAX, 14) ? DECIMAL_PLACES : dp | 0;
                k = mathceil(dp / LOG_BASE);
                if (CRYPTO) {
                    // Browsers supporting crypto.getRandomValues.
                    if (cryptoObj && cryptoObj.getRandomValues) {
                        a = cryptoObj.getRandomValues(new Uint32Array(k *= 2));
                        for(; i < k;){
                            // 53 bits:
                            // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)
                            // 11111 11111111 11111111 11111111 11100000 00000000 00000000
                            // ((Math.pow(2, 32) - 1) >>> 11).toString(2)
                            //                                     11111 11111111 11111111
                            // 0x20000 is 2^21.
                            v = a[i] * 131072 + (a[i + 1] >>> 11);
                            // Rejection sampling:
                            // 0 <= v < 9007199254740992
                            // Probability that v >= 9e15, is
                            // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251
                            if (v >= 9000000000000000) {
                                b = cryptoObj.getRandomValues(new Uint32Array(2));
                                a[i] = b[0];
                                a[i + 1] = b[1];
                            } else {
                                // 0 <= v <= 8999999999999999
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 100000000000000);
                                i += 2;
                            }
                        }
                        i = k / 2;
                    // Node.js supporting crypto.randomBytes.
                    } else if (cryptoObj && cryptoObj.randomBytes) {
                        // buffer
                        a = cryptoObj.randomBytes(k *= 7);
                        for(; i < k;){
                            // 0x1000000000000 is 2^48, 0x10000000000 is 2^40
                            // 0x100000000 is 2^32, 0x1000000 is 2^24
                            // 11111 11111111 11111111 11111111 11111111 11111111 11111111
                            // 0 <= v < 9007199254740992
                            v = (a[i] & 31) * 281474976710656 + a[i + 1] * 1099511627776 + a[i + 2] * 4294967296 + a[i + 3] * 16777216 + (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];
                            if (v >= 9000000000000000) cryptoObj.randomBytes(7).copy(a, i);
                            else {
                                // 0 <= (v % 1e14) <= 99999999999999
                                c.push(v % 100000000000000);
                                i += 7;
                            }
                        }
                        i = k / 7;
                    } else if (ERRORS) raise(14, 'crypto unavailable', cryptoObj);
                }
                // Use Math.random: CRYPTO is false or crypto is unavailable and ERRORS is false.
                if (!i) for(; i < k;){
                    v = random53bitInt();
                    if (v < 9000000000000000) c[i++] = v % 100000000000000;
                }
                k = c[--i];
                dp %= LOG_BASE;
                // Convert trailing digits to zeros according to dp.
                if (k && dp) {
                    v = POWS_TEN[LOG_BASE - dp];
                    c[i] = mathfloor(k / v) * v;
                }
                // Remove trailing elements which are zero.
                for(; c[i] === 0; c.pop(), i--);
                // Zero?
                if (i < 0) c = [
                    e = 0
                ];
                else {
                    // Remove leading elements which are zero and adjust exponent accordingly.
                    for(e = -1; c[0] === 0; c.shift(), e -= LOG_BASE);
                    // Count the digits of the first element of c to determine leading zeros, and...
                    for(i = 1, v = c[0]; v >= 10; v /= 10, i++);
                    // adjust the exponent accordingly.
                    if (i < LOG_BASE) e -= LOG_BASE - i;
                }
                rand.e = e;
                rand.c = c;
                return rand;
            };
        }();
        // PRIVATE FUNCTIONS
        // Convert a numeric string of baseIn to a numeric string of baseOut.
        function convertBase(str, baseOut, baseIn, sign) {
            var d, e, k, r, x, xc, y, i = str.indexOf('.'), dp = DECIMAL_PLACES, rm = ROUNDING_MODE;
            if (baseIn < 37) str = str.toLowerCase();
            // Non-integer.
            if (i >= 0) {
                k = POW_PRECISION;
                // Unlimited precision.
                POW_PRECISION = 0;
                str = str.replace('.', '');
                y = new BigNumber(baseIn);
                x = y.pow(str.length - i);
                POW_PRECISION = k;
                // Convert str as if an integer, then restore the fraction part by dividing the
                // result by its base raised to a power.
                y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e), 10, baseOut);
                y.e = y.c.length;
            }
            // Convert the number as integer.
            xc = toBaseOut(str, baseIn, baseOut);
            e = k = xc.length;
            // Remove trailing zeros.
            for(; xc[--k] == 0; xc.pop());
            if (!xc[0]) return '0';
            if (i < 0) --e;
            else {
                x.c = xc;
                x.e = e;
                // sign is needed for correct rounding.
                x.s = sign;
                x = div(x, y, dp, rm, baseOut);
                xc = x.c;
                r = x.r;
                e = x.e;
            }
            d = e + dp + 1;
            // The rounding digit, i.e. the digit to the right of the digit that may be rounded up.
            i = xc[d];
            k = baseOut / 2;
            r = r || d < 0 || xc[d + 1] != null;
            r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : i > k || i == k && (rm == 4 || r || rm == 6 && xc[d - 1] & 1 || rm == (x.s < 0 ? 8 : 7));
            if (d < 1 || !xc[0]) // 1^-dp or 0.
            str = r ? toFixedPoint('1', -dp) : '0';
            else {
                xc.length = d;
                if (r) // Rounding up may mean the previous digit has to be rounded up and so on.
                for(--baseOut; ++xc[--d] > baseOut;){
                    xc[d] = 0;
                    if (!d) {
                        ++e;
                        xc.unshift(1);
                    }
                }
                // Determine trailing zeros.
                for(k = xc.length; !xc[--k];);
                // E.g. [4, 11, 15] becomes 4bf.
                for(i = 0, str = ''; i <= k; str += ALPHABET.charAt(xc[i++]));
                str = toFixedPoint(str, e);
            }
            // The caller will add the sign.
            return str;
        }
        // Perform division in the specified base. Called by div and convertBase.
        div = function() {
            // Assume non-zero x and k.
            function multiply(x, k, base) {
                var m, temp, xlo, xhi, carry = 0, i = x.length, klo = k % SQRT_BASE, khi = k / SQRT_BASE | 0;
                for(x = x.slice(); i--;){
                    xlo = x[i] % SQRT_BASE;
                    xhi = x[i] / SQRT_BASE | 0;
                    m = khi * xlo + xhi * klo;
                    temp = klo * xlo + m % SQRT_BASE * SQRT_BASE + carry;
                    carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;
                    x[i] = temp % base;
                }
                if (carry) x.unshift(carry);
                return x;
            }
            function compare(a, b, aL, bL) {
                var i, cmp;
                if (aL != bL) cmp = aL > bL ? 1 : -1;
                else {
                    for(i = cmp = 0; i < aL; i++)if (a[i] != b[i]) {
                        cmp = a[i] > b[i] ? 1 : -1;
                        break;
                    }
                }
                return cmp;
            }
            function subtract(a, b, aL, base) {
                var i = 0;
                // Subtract b from a.
                for(; aL--;){
                    a[aL] -= i;
                    i = a[aL] < b[aL] ? 1 : 0;
                    a[aL] = i * base + a[aL] - b[aL];
                }
                // Remove leading zeros.
                for(; !a[0] && a.length > 1; a.shift());
            }
            // x: dividend, y: divisor.
            return function(x, y, dp, rm, base) {
                var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0, yL, yz, s = x.s == y.s ? 1 : -1, xc = x.c, yc = y.c;
                // Either NaN, Infinity or 0?
                if (!xc || !xc[0] || !yc || !yc[0]) return new BigNumber(// Return NaN if either NaN, or both Infinity or 0.
                !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN : // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
                xc && xc[0] == 0 || !yc ? s * 0 : s / 0);
                q = new BigNumber(s);
                qc = q.c = [];
                e = x.e - y.e;
                s = dp + e + 1;
                if (!base) {
                    base = BASE;
                    e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);
                    s = s / LOG_BASE | 0;
                }
                // Result exponent may be one less then the current value of e.
                // The coefficients of the BigNumbers from convertBase may have trailing zeros.
                for(i = 0; yc[i] == (xc[i] || 0); i++);
                if (yc[i] > (xc[i] || 0)) e--;
                if (s < 0) {
                    qc.push(1);
                    more = true;
                } else {
                    xL = xc.length;
                    yL = yc.length;
                    i = 0;
                    s += 2;
                    // Normalise xc and yc so highest order digit of yc is >= base / 2.
                    n = mathfloor(base / (yc[0] + 1));
                    // Not necessary, but to handle odd bases where yc[0] == ( base / 2 ) - 1.
                    // if ( n > 1 || n++ == 1 && yc[0] < base / 2 ) {
                    if (n > 1) {
                        yc = multiply(yc, n, base);
                        xc = multiply(xc, n, base);
                        yL = yc.length;
                        xL = xc.length;
                    }
                    xi = yL;
                    rem = xc.slice(0, yL);
                    remL = rem.length;
                    // Add zeros to make remainder as long as divisor.
                    for(; remL < yL; rem[remL++] = 0);
                    yz = yc.slice();
                    yz.unshift(0);
                    yc0 = yc[0];
                    if (yc[1] >= base / 2) yc0++;
                    // Not necessary, but to prevent trial digit n > base, when using base 3.
                    // else if ( base == 3 && yc0 == 1 ) yc0 = 1 + 1e-15;
                    do {
                        n = 0;
                        // Compare divisor and remainder.
                        cmp = compare(yc, rem, yL, remL);
                        // If divisor < remainder.
                        if (cmp < 0) {
                            // Calculate trial digit, n.
                            rem0 = rem[0];
                            if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);
                            // n is how many times the divisor goes into the current remainder.
                            n = mathfloor(rem0 / yc0);
                            //  Algorithm:
                            //  1. product = divisor * trial digit (n)
                            //  2. if product > remainder: product -= divisor, n--
                            //  3. remainder -= product
                            //  4. if product was < remainder at 2:
                            //    5. compare new remainder and divisor
                            //    6. If remainder > divisor: remainder -= divisor, n++
                            if (n > 1) {
                                // n may be > base only when base is 3.
                                if (n >= base) n = base - 1;
                                // product = divisor * trial digit.
                                prod = multiply(yc, n, base);
                                prodL = prod.length;
                                remL = rem.length;
                                // Compare product and remainder.
                                // If product > remainder.
                                // Trial digit n too high.
                                // n is 1 too high about 5% of the time, and is not known to have
                                // ever been more than 1 too high.
                                while(compare(prod, rem, prodL, remL) == 1){
                                    n--;
                                    // Subtract divisor from product.
                                    subtract(prod, yL < prodL ? yz : yc, prodL, base);
                                    prodL = prod.length;
                                    cmp = 1;
                                }
                            } else {
                                // n is 0 or 1, cmp is -1.
                                // If n is 0, there is no need to compare yc and rem again below,
                                // so change cmp to 1 to avoid it.
                                // If n is 1, leave cmp as -1, so yc and rem are compared again.
                                if (n == 0) // divisor < remainder, so n must be at least 1.
                                cmp = n = 1;
                                // product = divisor
                                prod = yc.slice();
                                prodL = prod.length;
                            }
                            if (prodL < remL) prod.unshift(0);
                            // Subtract product from remainder.
                            subtract(rem, prod, remL, base);
                            remL = rem.length;
                            // If product was < remainder.
                            if (cmp == -1) // Compare divisor and new remainder.
                            // If divisor < new remainder, subtract divisor from remainder.
                            // Trial digit n too low.
                            // n is 1 too low about 5% of the time, and very rarely 2 too low.
                            while(compare(yc, rem, yL, remL) < 1){
                                n++;
                                // Subtract divisor from remainder.
                                subtract(rem, yL < remL ? yz : yc, remL, base);
                                remL = rem.length;
                            }
                        } else if (cmp === 0) {
                            n++;
                            rem = [
                                0
                            ];
                        } // else cmp === 1 and n will be 0
                        // Add the next digit, n, to the result array.
                        qc[i++] = n;
                        // Update the remainder.
                        if (rem[0]) rem[remL++] = xc[xi] || 0;
                        else {
                            rem = [
                                xc[xi]
                            ];
                            remL = 1;
                        }
                    }while (((xi++) < xL || rem[0] != null) && s--)
                    more = rem[0] != null;
                    // Leading zero?
                    if (!qc[0]) qc.shift();
                }
                if (base == BASE) {
                    // To calculate q.e, first get the number of digits of qc[0].
                    for(i = 1, s = qc[0]; s >= 10; s /= 10, i++);
                    round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);
                // Caller is convertBase.
                } else {
                    q.e = e;
                    q.r = +more;
                }
                return q;
            };
        }();
        /*
         * Return a string representing the value of BigNumber n in fixed-point or exponential
         * notation rounded to the specified decimal places or significant digits.
         *
         * n is a BigNumber.
         * i is the index of the last digit required (i.e. the digit that may be rounded up).
         * rm is the rounding mode.
         * caller is caller id: toExponential 19, toFixed 20, toFormat 21, toPrecision 24.
         */ function format(n, i, rm, caller) {
            var c0, e, ne, len, str;
            rm = rm != null && isValidInt(rm, 0, 8, caller, roundingMode) ? rm | 0 : ROUNDING_MODE;
            if (!n.c) return n.toString();
            c0 = n.c[0];
            ne = n.e;
            if (i == null) {
                str = coeffToString(n.c);
                str = caller == 19 || caller == 24 && ne <= TO_EXP_NEG ? toExponential(str, ne) : toFixedPoint(str, ne);
            } else {
                n = round(new BigNumber(n), i, rm);
                // n.e may have changed if the value was rounded up.
                e = n.e;
                str = coeffToString(n.c);
                len = str.length;
                // toPrecision returns exponential notation if the number of significant digits
                // specified is less than the number of digits necessary to represent the integer
                // part of the value in fixed-point notation.
                // Exponential notation.
                if (caller == 19 || caller == 24 && (i <= e || e <= TO_EXP_NEG)) {
                    // Append zeros?
                    for(; len < i; str += '0', len++);
                    str = toExponential(str, e);
                // Fixed-point notation.
                } else {
                    i -= ne;
                    str = toFixedPoint(str, e);
                    // Append zeros?
                    if (e + 1 > len) {
                        if (--i > 0) for(str += '.'; i--; str += '0');
                    } else {
                        i += e - len;
                        if (i > 0) {
                            if (e + 1 == len) str += '.';
                            for(; i--; str += '0');
                        }
                    }
                }
            }
            return n.s < 0 && c0 ? '-' + str : str;
        }
        // Handle BigNumber.max and BigNumber.min.
        function maxOrMin(args, method) {
            var m, n, i = 0;
            if (isArray(args[0])) args = args[0];
            m = new BigNumber(args[0]);
            for(; ++i < args.length;){
                n = new BigNumber(args[i]);
                // If any number is NaN, return NaN.
                if (!n.s) {
                    m = n;
                    break;
                } else if (method.call(m, n)) m = n;
            }
            return m;
        }
        /*
         * Return true if n is an integer in range, otherwise throw.
         * Use for argument validation when ERRORS is true.
         */ function intValidatorWithErrors(n, min, max, caller, name) {
            if (n < min || n > max || n != truncate(n)) raise(caller, (name || 'decimal places') + (n < min || n > max ? ' out of range' : ' not an integer'), n);
            return true;
        }
        /*
         * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.
         * Called by minus, plus and times.
         */ function normalise(n, c, e) {
            var i = 1, j = c.length;
            // Remove trailing zeros.
            for(; !c[--j]; c.pop());
            // Calculate the base 10 exponent. First get the number of digits of c[0].
            for(j = c[0]; j >= 10; j /= 10, i++);
            // Overflow?
            if ((e = i + e * LOG_BASE - 1) > MAX_EXP) // Infinity.
            n.c = n.e = null;
            else if (e < MIN_EXP) // Zero.
            n.c = [
                n.e = 0
            ];
            else {
                n.e = e;
                n.c = c;
            }
            return n;
        }
        // Handle values that fail the validity test in BigNumber.
        parseNumeric = function() {
            var basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i, dotAfter = /^([^.]+)\.$/, dotBefore = /^\.([^.]+)$/, isInfinityOrNaN = /^-?(Infinity|NaN)$/, whitespaceOrPlus = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
            return function(x, str, num, b) {
                var base, s = num ? str : str.replace(whitespaceOrPlus, '');
                // No exception on ±Infinity or NaN.
                if (isInfinityOrNaN.test(s)) x.s = isNaN(s) ? null : s < 0 ? -1 : 1;
                else {
                    if (!num) {
                        // basePrefix = /^(-?)0([xbo])(?=\w[\w.]*$)/i
                        s = s.replace(basePrefix, function(m, p1, p2) {
                            base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;
                            return !b || b == base ? p1 : m;
                        });
                        if (b) {
                            base = b;
                            // E.g. '1.' to '1', '.1' to '0.1'
                            s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');
                        }
                        if (str != s) return new BigNumber(s, base);
                    }
                    // 'new BigNumber() not a number: {n}'
                    // 'new BigNumber() not a base {b} number: {n}'
                    if (ERRORS) raise(id, 'not a' + (b ? ' base ' + b : '') + ' number', str);
                    x.s = null;
                }
                x.c = x.e = null;
                id = 0;
            };
        }();
        // Throw a BigNumber Error.
        function raise(caller, msg, val) {
            var error = new Error([
                'new BigNumber',
                'cmp',
                'config',
                'div',
                'divToInt',
                'eq',
                'gt',
                'gte',
                'lt',
                'lte',
                'minus',
                'mod',
                'plus',
                'precision',
                'random',
                'round',
                'shift',
                'times',
                'toDigits',
                'toExponential',
                'toFixed',
                'toFormat',
                'toFraction',
                'pow',
                'toPrecision',
                'toString',
                'BigNumber' // 26
            ][caller] + '() ' + msg + ': ' + val);
            error.name = 'BigNumber Error';
            id = 0;
            throw error;
        }
        /*
         * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.
         * If r is truthy, it is known that there are more digits after the rounding digit.
         */ function round(x, sd, rm, r) {
            var d, i, j, k, n, ni, rd, xc = x.c, pows10 = POWS_TEN;
            // if x is not Infinity or NaN...
            if (xc) {
                // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.
                // n is a base 1e14 number, the value of the element of array x.c containing rd.
                // ni is the index of n within x.c.
                // d is the number of digits of n.
                // i is the index of rd within n including leading zeros.
                // j is the actual index of rd within n (if < 0, rd is a leading zero).
                out: {
                    // Get the number of digits of the first element of xc.
                    for(d = 1, k = xc[0]; k >= 10; k /= 10, d++);
                    i = sd - d;
                    // If the rounding digit is in the first element of xc...
                    if (i < 0) {
                        i += LOG_BASE;
                        j = sd;
                        n = xc[ni = 0];
                        // Get the rounding digit at index j of n.
                        rd = n / pows10[d - j - 1] % 10 | 0;
                    } else {
                        ni = mathceil((i + 1) / LOG_BASE);
                        if (ni >= xc.length) {
                            if (r) {
                                // Needed by sqrt.
                                for(; xc.length <= ni; xc.push(0));
                                n = rd = 0;
                                d = 1;
                                i %= LOG_BASE;
                                j = i - LOG_BASE + 1;
                            } else break out;
                        } else {
                            n = k = xc[ni];
                            // Get the number of digits of n.
                            for(d = 1; k >= 10; k /= 10, d++);
                            // Get the index of rd within n.
                            i %= LOG_BASE;
                            // Get the index of rd within n, adjusted for leading zeros.
                            // The number of leading zeros of n is given by LOG_BASE - d.
                            j = i - LOG_BASE + d;
                            // Get the rounding digit at index j of n.
                            rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;
                        }
                    }
                    r = r || sd < 0 || // Are there any non-zero digits after the rounding digit?
                    // The expression  n % pows10[ d - j - 1 ]  returns all digits of n to the right
                    // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
                    xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);
                    r = rm < 4 ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
                    (i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10 & 1 || rm == (x.s < 0 ? 8 : 7));
                    if (sd < 1 || !xc[0]) {
                        xc.length = 0;
                        if (r) {
                            // Convert sd to decimal places.
                            sd -= x.e + 1;
                            // 1, 0.1, 0.01, 0.001, 0.0001 etc.
                            xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];
                            x.e = -sd || 0;
                        } else // Zero.
                        xc[0] = x.e = 0;
                        return x;
                    }
                    // Remove excess digits.
                    if (i == 0) {
                        xc.length = ni;
                        k = 1;
                        ni--;
                    } else {
                        xc.length = ni + 1;
                        k = pows10[LOG_BASE - i];
                        // E.g. 56700 becomes 56000 if 7 is the rounding digit.
                        // j > 0 means i > number of leading zeros of n.
                        xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;
                    }
                    // Round up?
                    if (r) {
                        for(;;)// If the digit to be rounded up is in the first element of xc...
                        if (ni == 0) {
                            // i will be the length of xc[0] before k is added.
                            for(i = 1, j = xc[0]; j >= 10; j /= 10, i++);
                            j = xc[0] += k;
                            for(k = 1; j >= 10; j /= 10, k++);
                            // if i != k the length has increased.
                            if (i != k) {
                                x.e++;
                                if (xc[0] == BASE) xc[0] = 1;
                            }
                            break;
                        } else {
                            xc[ni] += k;
                            if (xc[ni] != BASE) break;
                            xc[ni--] = 0;
                            k = 1;
                        }
                    }
                    // Remove trailing zeros.
                    for(i = xc.length; xc[--i] === 0; xc.pop());
                }
                // Overflow? Infinity.
                if (x.e > MAX_EXP) x.c = x.e = null;
                else if (x.e < MIN_EXP) x.c = [
                    x.e = 0
                ];
            }
            return x;
        }
        // PROTOTYPE/INSTANCE METHODS
        /*
         * Return a new BigNumber whose value is the absolute value of this BigNumber.
         */ P.absoluteValue = P.abs = function() {
            var x = new BigNumber(this);
            if (x.s < 0) x.s = 1;
            return x;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of Infinity.
         */ P.ceil = function() {
            return round(new BigNumber(this), this.e + 1, 2);
        };
        /*
         * Return
         * 1 if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * -1 if the value of this BigNumber is less than the value of BigNumber(y, b),
         * 0 if they have the same value,
         * or null if the value of either is NaN.
         */ P.comparedTo = P.cmp = function(y, b) {
            id = 1;
            return compare1(this, new BigNumber(y, b));
        };
        /*
         * Return the number of decimal places of the value of this BigNumber, or null if the value
         * of this BigNumber is ±Infinity or NaN.
         */ P.decimalPlaces = P.dp = function() {
            var n, v, c = this.c;
            if (!c) return null;
            n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;
            // Subtract the number of trailing zeros of the last number.
            if (v = c[v]) for(; v % 10 == 0; v /= 10, n--);
            if (n < 0) n = 0;
            return n;
        };
        /*
         *  n / 0 = I
         *  n / N = N
         *  n / I = 0
         *  0 / n = 0
         *  0 / 0 = N
         *  0 / N = N
         *  0 / I = 0
         *  N / n = N
         *  N / 0 = N
         *  N / N = N
         *  N / I = N
         *  I / n = I
         *  I / 0 = I
         *  I / N = N
         *  I / I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber divided by the value of
         * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */ P.dividedBy = P.div = function(y, b) {
            id = 3;
            return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);
        };
        /*
         * Return a new BigNumber whose value is the integer part of dividing the value of this
         * BigNumber by the value of BigNumber(y, b).
         */ P.dividedToIntegerBy = P.divToInt = function(y, b) {
            id = 4;
            return div(this, new BigNumber(y, b), 0, 1);
        };
        /*
         * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),
         * otherwise returns false.
         */ P.equals = P.eq = function(y, b) {
            id = 5;
            return compare1(this, new BigNumber(y, b)) === 0;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a whole
         * number in the direction of -Infinity.
         */ P.floor = function() {
            return round(new BigNumber(this), this.e + 1, 3);
        };
        /*
         * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),
         * otherwise returns false.
         */ P.greaterThan = P.gt = function(y, b) {
            id = 6;
            return compare1(this, new BigNumber(y, b)) > 0;
        };
        /*
         * Return true if the value of this BigNumber is greater than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */ P.greaterThanOrEqualTo = P.gte = function(y, b) {
            id = 7;
            return (b = compare1(this, new BigNumber(y, b))) === 1 || b === 0;
        };
        /*
         * Return true if the value of this BigNumber is a finite number, otherwise returns false.
         */ P.isFinite = function() {
            return !!this.c;
        };
        /*
         * Return true if the value of this BigNumber is an integer, otherwise return false.
         */ P.isInteger = P.isInt = function() {
            return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;
        };
        /*
         * Return true if the value of this BigNumber is NaN, otherwise returns false.
         */ P.isNaN = function() {
            return !this.s;
        };
        /*
         * Return true if the value of this BigNumber is negative, otherwise returns false.
         */ P.isNegative = P.isNeg = function() {
            return this.s < 0;
        };
        /*
         * Return true if the value of this BigNumber is 0 or -0, otherwise returns false.
         */ P.isZero = function() {
            return !!this.c && this.c[0] == 0;
        };
        /*
         * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),
         * otherwise returns false.
         */ P.lessThan = P.lt = function(y, b) {
            id = 8;
            return compare1(this, new BigNumber(y, b)) < 0;
        };
        /*
         * Return true if the value of this BigNumber is less than or equal to the value of
         * BigNumber(y, b), otherwise returns false.
         */ P.lessThanOrEqualTo = P.lte = function(y, b) {
            id = 9;
            return (b = compare1(this, new BigNumber(y, b))) === -1 || b === 0;
        };
        /*
         *  n - 0 = n
         *  n - N = N
         *  n - I = -I
         *  0 - n = -n
         *  0 - 0 = 0
         *  0 - N = N
         *  0 - I = -I
         *  N - n = N
         *  N - 0 = N
         *  N - N = N
         *  N - I = N
         *  I - n = I
         *  I - 0 = I
         *  I - N = N
         *  I - I = N
         *
         * Return a new BigNumber whose value is the value of this BigNumber minus the value of
         * BigNumber(y, b).
         */ P.minus = P.sub = function(y, b) {
            var i, j, t, xLTy, x = this, a = x.s;
            id = 10;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.plus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Either Infinity?
                if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);
                // Either zero?
                if (!xc[0] || !yc[0]) // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x : // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
                ROUNDING_MODE == 3 ? -0 : 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Determine which is the bigger number.
            if (a = xe - ye) {
                if (xLTy = a < 0) {
                    a = -a;
                    t = xc;
                } else {
                    ye = xe;
                    t = yc;
                }
                t.reverse();
                // Prepend zeros to equalise exponents.
                for(b = a; b--; t.push(0));
                t.reverse();
            } else {
                // Exponents equal. Check digit by digit.
                j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;
                for(a = b = 0; b < j; b++)if (xc[b] != yc[b]) {
                    xLTy = xc[b] < yc[b];
                    break;
                }
            }
            // x < y? Point xc to the array of the bigger number.
            if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;
            b = (j = yc.length) - (i = xc.length);
            // Append zeros to xc if shorter.
            // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.
            if (b > 0) for(; b--; xc[i++] = 0);
            b = BASE - 1;
            // Subtract yc from xc.
            for(; j > a;){
                if (xc[--j] < yc[j]) {
                    for(i = j; i && !xc[--i]; xc[i] = b);
                    --xc[i];
                    xc[j] += BASE;
                }
                xc[j] -= yc[j];
            }
            // Remove leading zeros and adjust exponent accordingly.
            for(; xc[0] == 0; xc.shift(), --ye);
            // Zero?
            if (!xc[0]) {
                // Following IEEE 754 (2008) 6.3,
                // n - n = +0  but  n - n = -0  when rounding towards -Infinity.
                y.s = ROUNDING_MODE == 3 ? -1 : 1;
                y.c = [
                    y.e = 0
                ];
                return y;
            }
            // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity
            // for finite x and y.
            return normalise(y, xc, ye);
        };
        /*
         *   n % 0 =  N
         *   n % N =  N
         *   n % I =  n
         *   0 % n =  0
         *  -0 % n = -0
         *   0 % 0 =  N
         *   0 % N =  N
         *   0 % I =  0
         *   N % n =  N
         *   N % 0 =  N
         *   N % N =  N
         *   N % I =  N
         *   I % n =  N
         *   I % 0 =  N
         *   I % N =  N
         *   I % I =  N
         *
         * Return a new BigNumber whose value is the value of this BigNumber modulo the value of
         * BigNumber(y, b). The result depends on the value of MODULO_MODE.
         */ P.modulo = P.mod = function(y, b) {
            var q, s, x = this;
            id = 11;
            y = new BigNumber(y, b);
            // Return NaN if x is Infinity or NaN, or y is NaN or zero.
            if (!x.c || !y.s || y.c && !y.c[0]) return new BigNumber(NaN);
            else if (!y.c || x.c && !x.c[0]) return new BigNumber(x);
            if (MODULO_MODE == 9) {
                // Euclidian division: q = sign(y) * floor(x / abs(y))
                // r = x - qy    where  0 <= r < abs(y)
                s = y.s;
                y.s = 1;
                q = div(x, y, 0, 3);
                y.s = s;
                q.s *= s;
            } else q = div(x, y, 0, MODULO_MODE);
            return x.minus(q.times(y));
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber negated,
         * i.e. multiplied by -1.
         */ P.negated = P.neg = function() {
            var x = new BigNumber(this);
            x.s = -x.s || null;
            return x;
        };
        /*
         *  n + 0 = n
         *  n + N = N
         *  n + I = I
         *  0 + n = n
         *  0 + 0 = 0
         *  0 + N = N
         *  0 + I = I
         *  N + n = N
         *  N + 0 = N
         *  N + N = N
         *  N + I = N
         *  I + n = I
         *  I + 0 = I
         *  I + N = N
         *  I + I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber plus the value of
         * BigNumber(y, b).
         */ P.plus = P.add = function(y, b) {
            var t, x = this, a = x.s;
            id = 12;
            y = new BigNumber(y, b);
            b = y.s;
            // Either NaN?
            if (!a || !b) return new BigNumber(NaN);
            // Signs differ?
            if (a != b) {
                y.s = -b;
                return x.minus(y);
            }
            var xe = x.e / LOG_BASE, ye = y.e / LOG_BASE, xc = x.c, yc = y.c;
            if (!xe || !ye) {
                // Return ±Infinity if either ±Infinity.
                if (!xc || !yc) return new BigNumber(a / 0);
                // Either zero?
                // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.
                if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);
            }
            xe = bitFloor(xe);
            ye = bitFloor(ye);
            xc = xc.slice();
            // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.
            if (a = xe - ye) {
                if (a > 0) {
                    ye = xe;
                    t = yc;
                } else {
                    a = -a;
                    t = xc;
                }
                t.reverse();
                for(; a--; t.push(0));
                t.reverse();
            }
            a = xc.length;
            b = yc.length;
            // Point xc to the longer array, and b to the shorter length.
            if (a - b < 0) t = yc, yc = xc, xc = t, b = a;
            // Only start adding at yc.length - 1 as the further digits of xc can be ignored.
            for(a = 0; b;){
                a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;
                xc[b] %= BASE;
            }
            if (a) {
                xc.unshift(a);
                ++ye;
            }
            // No need to check for zero, as +x + +y != 0 && -x + -y != 0
            // ye = MAX_EXP + 1 possible
            return normalise(y, xc, ye);
        };
        /*
         * Return the number of significant digits of the value of this BigNumber.
         *
         * [z] {boolean|number} Whether to count integer-part trailing zeros: true, false, 1 or 0.
         */ P.precision = P.sd = function(z) {
            var n, v, x = this, c = x.c;
            // 'precision() argument not a boolean or binary digit: {z}'
            if (z != null && z !== !!z && z !== 1 && z !== 0) {
                if (ERRORS) raise(13, 'argument' + notBool, z);
                if (z != !!z) z = null;
            }
            if (!c) return null;
            v = c.length - 1;
            n = v * LOG_BASE + 1;
            if (v = c[v]) {
                // Subtract the number of trailing zeros of the last element.
                for(; v % 10 == 0; v /= 10, n--);
                // Add the number of digits of the first element.
                for(v = c[0]; v >= 10; v /= 10, n++);
            }
            if (z && x.e + 1 > n) n = x.e + 1;
            return n;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * dp decimal places using rounding mode rm, or to 0 and ROUNDING_MODE respectively if
         * omitted.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'round() decimal places out of range: {dp}'
         * 'round() decimal places not an integer: {dp}'
         * 'round() rounding mode not an integer: {rm}'
         * 'round() rounding mode out of range: {rm}'
         */ P.round = function(dp, rm) {
            var n = new BigNumber(this);
            if (dp == null || isValidInt(dp, 0, MAX, 15)) round(n, ~~dp + this.e + 1, rm == null || !isValidInt(rm, 0, 8, 15, roundingMode) ? ROUNDING_MODE : rm | 0);
            return n;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber shifted by k places
         * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.
         *
         * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         *
         * If k is out of range and ERRORS is false, the result will be ±0 if k < 0, or ±Infinity
         * otherwise.
         *
         * 'shift() argument not an integer: {k}'
         * 'shift() argument out of range: {k}'
         */ P.shift = function(k) {
            var n = this;
            return isValidInt(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 16, 'argument') ? n.times('1e' + truncate(k)) : new BigNumber(n.c && n.c[0] && (k < -MAX_SAFE_INTEGER || k > MAX_SAFE_INTEGER) ? n.s * (k < 0 ? 0 : 1 / 0) : n);
        };
        /*
         *  sqrt(-n) =  N
         *  sqrt( N) =  N
         *  sqrt(-I) =  N
         *  sqrt( I) =  I
         *  sqrt( 0) =  0
         *  sqrt(-0) = -0
         *
         * Return a new BigNumber whose value is the square root of the value of this BigNumber,
         * rounded according to DECIMAL_PLACES and ROUNDING_MODE.
         */ P.squareRoot = P.sqrt = function() {
            var m, n, r, rep, t, x = this, c = x.c, s = x.s, e = x.e, dp = DECIMAL_PLACES + 4, half = new BigNumber('0.5');
            // Negative/NaN/Infinity/zero?
            if (s !== 1 || !c || !c[0]) return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);
            // Initial estimate.
            s = Math.sqrt(+x);
            // Math.sqrt underflow/overflow?
            // Pass x to Math.sqrt as integer, then adjust the exponent of the result.
            if (s == 0 || s == 1 / 0) {
                n = coeffToString(c);
                if ((n.length + e) % 2 == 0) n += '0';
                s = Math.sqrt(n);
                e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);
                if (s == 1 / 0) n = '1e' + e;
                else {
                    n = s.toExponential();
                    n = n.slice(0, n.indexOf('e') + 1) + e;
                }
                r = new BigNumber(n);
            } else r = new BigNumber(s + '');
            // Check for zero.
            // r could be zero if MIN_EXP is changed after the this value was created.
            // This would cause a division by zero (x/t) and hence Infinity below, which would cause
            // coeffToString to throw.
            if (r.c[0]) {
                e = r.e;
                s = e + dp;
                if (s < 3) s = 0;
                // Newton-Raphson iteration.
                for(;;){
                    t = r;
                    r = half.times(t.plus(div(x, t, dp, 1)));
                    if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {
                        // The exponent of r may here be one less than the final result exponent,
                        // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits
                        // are indexed correctly.
                        if (r.e < e) --s;
                        n = n.slice(s - 3, s + 1);
                        // The 4th rounding digit may be in error by -1 so if the 4 rounding digits
                        // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the
                        // iteration.
                        if (n == '9999' || !rep && n == '4999') {
                            // On the first iteration only, check to see if rounding up gives the
                            // exact result as the nines may infinitely repeat.
                            if (!rep) {
                                round(t, t.e + DECIMAL_PLACES + 2, 0);
                                if (t.times(t).eq(x)) {
                                    r = t;
                                    break;
                                }
                            }
                            dp += 4;
                            s += 4;
                            rep = 1;
                        } else {
                            // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact
                            // result. If not, then there are further digits and m will be truthy.
                            if (!+n || !+n.slice(1) && n.charAt(0) == '5') {
                                // Truncate to the first rounding digit.
                                round(r, r.e + DECIMAL_PLACES + 2, 1);
                                m = !r.times(r).eq(x);
                            }
                            break;
                        }
                    }
                }
            }
            return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);
        };
        /*
         *  n * 0 = 0
         *  n * N = N
         *  n * I = I
         *  0 * n = 0
         *  0 * 0 = 0
         *  0 * N = N
         *  0 * I = N
         *  N * n = N
         *  N * 0 = N
         *  N * N = N
         *  N * I = N
         *  I * n = I
         *  I * 0 = N
         *  I * N = N
         *  I * I = I
         *
         * Return a new BigNumber whose value is the value of this BigNumber times the value of
         * BigNumber(y, b).
         */ P.times = P.mul = function(y, b) {
            var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc, base, sqrtBase, x = this, xc = x.c, yc = (id = 17, y = new BigNumber(y, b)).c;
            // Either NaN, ±Infinity or ±0?
            if (!xc || !yc || !xc[0] || !yc[0]) {
                // Return NaN if either is NaN, or one is 0 and the other is Infinity.
                if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) y.c = y.e = y.s = null;
                else {
                    y.s *= x.s;
                    // Return ±Infinity if either is ±Infinity.
                    if (!xc || !yc) y.c = y.e = null;
                    else {
                        y.c = [
                            0
                        ];
                        y.e = 0;
                    }
                }
                return y;
            }
            e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);
            y.s *= x.s;
            xcL = xc.length;
            ycL = yc.length;
            // Ensure xc points to longer array and xcL to its length.
            if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;
            // Initialise the result array with zeros.
            for(i = xcL + ycL, zc = []; i--; zc.push(0));
            base = BASE;
            sqrtBase = SQRT_BASE;
            for(i = ycL; --i >= 0;){
                c = 0;
                ylo = yc[i] % sqrtBase;
                yhi = yc[i] / sqrtBase | 0;
                for(k = xcL, j = i + k; j > i;){
                    xlo = xc[--k] % sqrtBase;
                    xhi = xc[k] / sqrtBase | 0;
                    m = yhi * xlo + xhi * ylo;
                    xlo = ylo * xlo + m % sqrtBase * sqrtBase + zc[j] + c;
                    c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;
                    zc[j--] = xlo % base;
                }
                zc[j] = c;
            }
            if (c) ++e;
            else zc.shift();
            return normalise(y, zc, e);
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber rounded to a maximum of
         * sd significant digits using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toDigits() precision out of range: {sd}'
         * 'toDigits() precision not an integer: {sd}'
         * 'toDigits() rounding mode not an integer: {rm}'
         * 'toDigits() rounding mode out of range: {rm}'
         */ P.toDigits = function(sd, rm) {
            var n = new BigNumber(this);
            sd = sd == null || !isValidInt(sd, 1, MAX, 18, 'precision') ? null : sd | 0;
            rm = rm == null || !isValidInt(rm, 0, 8, 18, roundingMode) ? ROUNDING_MODE : rm | 0;
            return sd ? round(n, sd, rm) : n;
        };
        /*
         * Return a string representing the value of this BigNumber in exponential notation and
         * rounded using ROUNDING_MODE to dp fixed decimal places.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toExponential() decimal places not an integer: {dp}'
         * 'toExponential() decimal places out of range: {dp}'
         * 'toExponential() rounding mode not an integer: {rm}'
         * 'toExponential() rounding mode out of range: {rm}'
         */ P.toExponential = function(dp, rm) {
            return format(this, dp != null && isValidInt(dp, 0, MAX, 19) ? ~~dp + 1 : null, rm, 19);
        };
        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounding
         * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.
         *
         * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',
         * but e.g. (-0.00001).toFixed(0) is '-0'.
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFixed() decimal places not an integer: {dp}'
         * 'toFixed() decimal places out of range: {dp}'
         * 'toFixed() rounding mode not an integer: {rm}'
         * 'toFixed() rounding mode out of range: {rm}'
         */ P.toFixed = function(dp, rm) {
            return format(this, dp != null && isValidInt(dp, 0, MAX, 20) ? ~~dp + this.e + 1 : null, rm, 20);
        };
        /*
         * Return a string representing the value of this BigNumber in fixed-point notation rounded
         * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties
         * of the FORMAT object (see BigNumber.config).
         *
         * FORMAT = {
         *      decimalSeparator : '.',
         *      groupSeparator : ',',
         *      groupSize : 3,
         *      secondaryGroupSize : 0,
         *      fractionGroupSeparator : '\xA0',    // non-breaking space
         *      fractionGroupSize : 0
         * };
         *
         * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toFormat() decimal places not an integer: {dp}'
         * 'toFormat() decimal places out of range: {dp}'
         * 'toFormat() rounding mode not an integer: {rm}'
         * 'toFormat() rounding mode out of range: {rm}'
         */ P.toFormat = function(dp, rm) {
            var str = format(this, dp != null && isValidInt(dp, 0, MAX, 21) ? ~~dp + this.e + 1 : null, rm, 21);
            if (this.c) {
                var i, arr = str.split('.'), g1 = +FORMAT.groupSize, g2 = +FORMAT.secondaryGroupSize, groupSeparator = FORMAT.groupSeparator, intPart = arr[0], fractionPart = arr[1], isNeg = this.s < 0, intDigits = isNeg ? intPart.slice(1) : intPart, len = intDigits.length;
                if (g2) i = g1, g1 = g2, g2 = i, len -= i;
                if (g1 > 0 && len > 0) {
                    i = len % g1 || g1;
                    intPart = intDigits.substr(0, i);
                    for(; i < len; i += g1)intPart += groupSeparator + intDigits.substr(i, g1);
                    if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);
                    if (isNeg) intPart = '-' + intPart;
                }
                str = fractionPart ? intPart + FORMAT.decimalSeparator + ((g2 = +FORMAT.fractionGroupSize) ? fractionPart.replace(new RegExp('\\d{' + g2 + '}\\B', 'g'), '$&' + FORMAT.fractionGroupSeparator) : fractionPart) : intPart;
            }
            return str;
        };
        /*
         * Return a string array representing the value of this BigNumber as a simple fraction with
         * an integer numerator and an integer denominator. The denominator will be a positive
         * non-zero value less than or equal to the specified maximum denominator. If a maximum
         * denominator is not specified, the denominator will be the lowest value necessary to
         * represent the number exactly.
         *
         * [md] {number|string|BigNumber} Integer >= 1 and < Infinity. The maximum denominator.
         *
         * 'toFraction() max denominator not an integer: {md}'
         * 'toFraction() max denominator out of range: {md}'
         */ P.toFraction = function(md) {
            var arr, d0, d2, e, exp, n, n0, q, s, k = ERRORS, x = this, xc = x.c, d = new BigNumber(ONE), n1 = d0 = new BigNumber(ONE), d1 = n0 = new BigNumber(ONE);
            if (md != null) {
                ERRORS = false;
                n = new BigNumber(md);
                ERRORS = k;
                if (!(k = n.isInt()) || n.lt(ONE)) {
                    if (ERRORS) raise(22, 'max denominator ' + (k ? 'out of range' : 'not an integer'), md);
                    // ERRORS is false:
                    // If md is a finite non-integer >= 1, round it to an integer and use it.
                    md = !k && n.c && round(n, n.e + 1, 1).gte(ONE) ? n : null;
                }
            }
            if (!xc) return x.toString();
            s = coeffToString(xc);
            // Determine initial denominator.
            // d is a power of 10 and the minimum max denominator that specifies the value exactly.
            e = d.e = s.length - x.e - 1;
            d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];
            md = !md || n.cmp(d) > 0 ? e > 0 ? d : n1 : n;
            exp = MAX_EXP;
            MAX_EXP = 1 / 0;
            n = new BigNumber(s);
            // n0 = d1 = 0
            n0.c[0] = 0;
            for(;;){
                q = div(n, d, 0, 1);
                d2 = d0.plus(q.times(d1));
                if (d2.cmp(md) == 1) break;
                d0 = d1;
                d1 = d2;
                n1 = n0.plus(q.times(d2 = n1));
                n0 = d2;
                d = n.minus(q.times(d2 = d));
                n = d2;
            }
            d2 = div(md.minus(d0), d1, 0, 1);
            n0 = n0.plus(d2.times(n1));
            d0 = d0.plus(d2.times(d1));
            n0.s = n1.s = x.s;
            e *= 2;
            // Determine which fraction is closer to x, n0/d0 or n1/d1
            arr = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().cmp(div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [
                n1.toString(),
                d1.toString()
            ] : [
                n0.toString(),
                d0.toString()
            ];
            MAX_EXP = exp;
            return arr;
        };
        /*
         * Return the value of this BigNumber converted to a number primitive.
         */ P.toNumber = function() {
            return +this;
        };
        /*
         * Return a BigNumber whose value is the value of this BigNumber raised to the power n.
         * If m is present, return the result modulo m.
         * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.
         * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using
         * ROUNDING_MODE.
         *
         * The modular power operation works efficiently when x, n, and m are positive integers,
         * otherwise it is equivalent to calculating x.toPower(n).modulo(m) (with POW_PRECISION 0).
         *
         * n {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.
         * [m] {number|string|BigNumber} The modulus.
         *
         * 'pow() exponent not an integer: {n}'
         * 'pow() exponent out of range: {n}'
         *
         * Performs 54 loop iterations for n of 9007199254740991.
         */ P.toPower = P.pow = function(n, m) {
            var k, y, z, i = mathfloor(n < 0 ? -n : +n), x = this;
            if (m != null) {
                id = 23;
                m = new BigNumber(m);
            }
            // Pass ±Infinity to Math.pow if exponent is out of range.
            if (!isValidInt(n, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER, 23, 'exponent') && (!isFinite(n) || i > MAX_SAFE_INTEGER && (n /= 0) || parseFloat(n) != n && (n = NaN, true)) || n == 0) {
                k = Math.pow(+x, n);
                return new BigNumber(m ? k % m : k);
            }
            if (m) {
                if (n > 1 && x.gt(ONE) && x.isInt() && m.gt(ONE) && m.isInt()) x = x.mod(m);
                else {
                    z = m;
                    // Nullify m so only a single mod operation is performed at the end.
                    m = null;
                }
            } else if (POW_PRECISION) // Truncating each coefficient array to a length of k after each multiplication
            // equates to truncating significant digits to POW_PRECISION + [28, 41],
            // i.e. there will be a minimum of 28 guard digits retained.
            // (Using + 1.5 would give [9, 21] guard digits.)
            k = mathceil(POW_PRECISION / LOG_BASE + 2);
            y = new BigNumber(ONE);
            for(;;){
                if (i % 2) {
                    y = y.times(x);
                    if (!y.c) break;
                    if (k) {
                        if (y.c.length > k) y.c.length = k;
                    } else if (m) y = y.mod(m);
                }
                i = mathfloor(i / 2);
                if (!i) break;
                x = x.times(x);
                if (k) {
                    if (x.c && x.c.length > k) x.c.length = k;
                } else if (m) x = x.mod(m);
            }
            if (m) return y;
            if (n < 0) y = ONE.div(y);
            return z ? y.mod(z) : k ? round(y, POW_PRECISION, ROUNDING_MODE) : y;
        };
        /*
         * Return a string representing the value of this BigNumber rounded to sd significant digits
         * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits
         * necessary to represent the integer part of the value in fixed-point notation, then use
         * exponential notation.
         *
         * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.
         * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.
         *
         * 'toPrecision() precision not an integer: {sd}'
         * 'toPrecision() precision out of range: {sd}'
         * 'toPrecision() rounding mode not an integer: {rm}'
         * 'toPrecision() rounding mode out of range: {rm}'
         */ P.toPrecision = function(sd, rm) {
            return format(this, sd != null && isValidInt(sd, 1, MAX, 24, 'precision') ? sd | 0 : null, rm, 24);
        };
        /*
         * Return a string representing the value of this BigNumber in base b, or base 10 if b is
         * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and
         * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent
         * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than
         * TO_EXP_NEG, return exponential notation.
         *
         * [b] {number} Integer, 2 to 64 inclusive.
         *
         * 'toString() base not an integer: {b}'
         * 'toString() base out of range: {b}'
         */ P.toString = function(b) {
            var str, n = this, s = n.s, e = n.e;
            // Infinity or NaN?
            if (e === null) {
                if (s) {
                    str = 'Infinity';
                    if (s < 0) str = '-' + str;
                } else str = 'NaN';
            } else {
                str = coeffToString(n.c);
                if (b == null || !isValidInt(b, 2, 64, 25, 'base')) str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);
                else str = convertBase(toFixedPoint(str, e), b | 0, 10, s);
                if (s < 0 && n.c[0]) str = '-' + str;
            }
            return str;
        };
        /*
         * Return a new BigNumber whose value is the value of this BigNumber truncated to a whole
         * number.
         */ P.truncated = P.trunc = function() {
            return round(new BigNumber(this), this.e + 1, 1);
        };
        /*
         * Return as toString, but do not accept a base argument, and include the minus sign for
         * negative zero.
         */ P.valueOf = P.toJSON = function() {
            var str, n = this, e = n.e;
            if (e === null) return n.toString();
            str = coeffToString(n.c);
            str = e <= TO_EXP_NEG || e >= TO_EXP_POS ? toExponential(str, e) : toFixedPoint(str, e);
            return n.s < 0 ? '-' + str : str;
        };
        // Aliases for BigDecimal methods.
        //P.add = P.plus;         // P.add included above
        //P.subtract = P.minus;   // P.sub included above
        //P.multiply = P.times;   // P.mul included above
        //P.divide = P.div;
        //P.remainder = P.mod;
        //P.compareTo = P.cmp;
        //P.negate = P.neg;
        if (configObj != null) BigNumber.config(configObj);
        return BigNumber;
    }
    // PRIVATE HELPER FUNCTIONS
    function bitFloor(n) {
        var i = n | 0;
        return n > 0 || n === i ? i : i - 1;
    }
    // Return a coefficient array as a string of base 10 digits.
    function coeffToString(a) {
        var s, z, i = 1, j = a.length, r = a[0] + '';
        for(; i < j;){
            s = a[i++] + '';
            z = LOG_BASE - s.length;
            for(; z--; s = '0' + s);
            r += s;
        }
        // Determine trailing zeros.
        for(j = r.length; r.charCodeAt(--j) === 48;);
        return r.slice(0, j + 1 || 1);
    }
    // Compare the value of BigNumbers x and y.
    function compare1(x, y) {
        var a, b, xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;
        // Either NaN?
        if (!i || !j) return null;
        a = xc && !xc[0];
        b = yc && !yc[0];
        // Either zero?
        if (a || b) return a ? b ? 0 : -j : i;
        // Signs differ?
        if (i != j) return i;
        a = i < 0;
        b = k == l;
        // Either Infinity?
        if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;
        // Compare exponents.
        if (!b) return k > l ^ a ? 1 : -1;
        j = (k = xc.length) < (l = yc.length) ? k : l;
        // Compare digit by digit.
        for(i = 0; i < j; i++)if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;
        // Compare lengths.
        return k == l ? 0 : k > l ^ a ? 1 : -1;
    }
    /*
     * Return true if n is a valid number in range, otherwise false.
     * Use for argument validation when ERRORS is false.
     * Note: parseInt('1e+1') == 1 but parseFloat('1e+1') == 10.
     */ function intValidatorNoErrors(n, min, max) {
        return (n = truncate(n)) >= min && n <= max;
    }
    function isArray(obj) {
        return Object.prototype.toString.call(obj) == '[object Array]';
    }
    /*
     * Convert string of baseIn to an array of numbers of baseOut.
     * Eg. convertBase('255', 10, 16) returns [15, 15].
     * Eg. convertBase('ff', 16, 10) returns [2, 5, 5].
     */ function toBaseOut(str, baseIn, baseOut) {
        var j, arr = [
            0
        ], arrL, i = 0, len = str.length;
        for(; i < len;){
            for(arrL = arr.length; arrL--; arr[arrL] *= baseIn);
            arr[j = 0] += ALPHABET.indexOf(str.charAt(i++));
            for(; j < arr.length; j++)if (arr[j] > baseOut - 1) {
                if (arr[j + 1] == null) arr[j + 1] = 0;
                arr[j + 1] += arr[j] / baseOut | 0;
                arr[j] %= baseOut;
            }
        }
        return arr.reverse();
    }
    function toExponential(str, e) {
        return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) + (e < 0 ? 'e' : 'e+') + e;
    }
    function toFixedPoint(str, e) {
        var len, z;
        // Negative exponent?
        if (e < 0) {
            // Prepend zeros.
            for(z = '0.'; ++e; z += '0');
            str = z + str;
        // Positive exponent
        } else {
            len = str.length;
            // Append zeros.
            if (++e > len) {
                for(z = '0', e -= len; --e; z += '0');
                str += z;
            } else if (e < len) str = str.slice(0, e) + '.' + str.slice(e);
        }
        return str;
    }
    function truncate(n) {
        n = parseFloat(n);
        return n < 0 ? mathceil(n) : mathfloor(n);
    }
    // EXPORT
    BigNumber1 = constructorFactory();
    BigNumber1.default = BigNumber1.BigNumber = BigNumber1;
    // AMD.
    if (typeof define == 'function' && define.amd) define(function() {
        return BigNumber1;
    });
    else if ($64024b09fbacb3c3$exports) {
        $64024b09fbacb3c3$exports = BigNumber1;
        // Split string stops browserify adding crypto shim.
        if (!cryptoObj) try {
            cryptoObj = (parcelRequire("auv6H"));
        } catch (e) {}
    // Browser.
    } else {
        if (!globalObj) globalObj = typeof self != 'undefined' ? self : Function('return this')();
        globalObj.BigNumber = BigNumber1;
    }
})($64024b09fbacb3c3$exports);


var $8855d6b5606fd77f$var$Units = {};
var $3057ca908770636d$exports = {};
$3057ca908770636d$exports = JSON.parse("{\"wei\":\"1\",\"kwei\":\"1000\",\"Kwei\":\"1000\",\"babbage\":\"1000\",\"femtoether\":\"1000\",\"mwei\":\"1000000\",\"Mwei\":\"1000000\",\"lovelace\":\"1000000\",\"picoether\":\"1000000\",\"gwei\":\"1000000000\",\"Gwei\":\"1000000000\",\"shannon\":\"1000000000\",\"nanoether\":\"1000000000\",\"nano\":\"1000000000\",\"szabo\":\"1000000000000\",\"microether\":\"1000000000000\",\"micro\":\"1000000000000\",\"finney\":\"1000000000000000\",\"milliether\":\"1000000000000000\",\"milli\":\"1000000000000000\",\"ether\":\"1000000000000000000\",\"eth\":\"1000000000000000000\",\"kether\":\"1000000000000000000000\",\"grand\":\"1000000000000000000000\",\"mether\":\"1000000000000000000000000\",\"gether\":\"1000000000000000000000000000\",\"tether\":\"1000000000000000000000000000000\"}");


var $8855d6b5606fd77f$var$units = {};
Object.keys($3057ca908770636d$exports).map(function(unit) {
    $8855d6b5606fd77f$var$units[unit] = new $64024b09fbacb3c3$exports($3057ca908770636d$exports[unit], 10);
});
$8855d6b5606fd77f$var$Units.units = $3057ca908770636d$exports;
var $8855d6b5606fd77f$var$re = RegExp(/^[0-9]+\.?[0-9]*$/);
$8855d6b5606fd77f$var$Units.convert = function(value, from, to) {
    if (!$8855d6b5606fd77f$var$re.test(value)) throw new Error('Unsupported value');
    from = from.toLowerCase();
    if (!$8855d6b5606fd77f$var$units[from]) throw new Error('Unsupported input unit');
    to = to.toLowerCase();
    if (!$8855d6b5606fd77f$var$units[to]) throw new Error('Unsupported output unit');
    return new $64024b09fbacb3c3$exports(value, 10).mul($8855d6b5606fd77f$var$units[from]).round(0, $64024b09fbacb3c3$exports.ROUND_DOWN).div($8855d6b5606fd77f$var$units[to]).toString(10);
};
$8855d6b5606fd77f$var$Units.lazyConvert = function(value, to) {
    var tmp = value.split(' ');
    if (tmp.length !== 2) throw new Error('Invalid input');
    return $8855d6b5606fd77f$var$Units.convert(tmp[0], tmp[1], to) + ' ' + to;
};
$8855d6b5606fd77f$exports = $8855d6b5606fd77f$var$Units;


let $f047d79a9426f7d2$export$908ff786c04d5297;
(function($f047d79a9426f7d2$export$908ff786c04d5297) {
    $f047d79a9426f7d2$export$908ff786c04d5297["solana"] = "solana";
    $f047d79a9426f7d2$export$908ff786c04d5297["ethereum"] = "ethereum";
    $f047d79a9426f7d2$export$908ff786c04d5297["content"] = "content";
    $f047d79a9426f7d2$export$908ff786c04d5297["background"] = "background";
    $f047d79a9426f7d2$export$908ff786c04d5297["popup"] = "popup";
})($f047d79a9426f7d2$export$908ff786c04d5297 || ($f047d79a9426f7d2$export$908ff786c04d5297 = {}));
async function $f047d79a9426f7d2$export$61027ddcc22c3df2(message) {
    try {
        return browser.runtime.sendNativeMessage('application.id', message);
    } catch (error) {
        const errorMessage = error instanceof Error ? error.message : error;
        console.error('Caught error in backend messaging', errorMessage);
        return {
            ...message,
            error: errorMessage
        };
    }
}
function $f047d79a9426f7d2$export$8c67b4fe4bab8610(request) {
    let message = {
        sender: $f047d79a9426f7d2$export$908ff786c04d5297.popup,
        destination: $f047d79a9426f7d2$export$908ff786c04d5297.content,
        request: request
    };
    browser.tabs.query({
        active: true,
        currentWindow: true
    }, (tabs)=>{
        const [tab] = tabs;
        if (tab && tab.id) browser.tabs.sendMessage(tab.id, message);
    });
}


const $1feaf5137e56a072$export$2b1d391cd05230fd = (fileName)=>(message, ...others)=>{
        console.log(`[${fileName}.js] ${message}`, ...others);
    }
;
const $1feaf5137e56a072$export$b522027998979def = (fileName)=>(message, ...others)=>console.error(`[${fileName}.js] ${message}`, ...others)
;


class $82190d7555a6a6f5$export$b3953ebc8b2c2650 {
    constructor(rpcUrl){
        this.rpcUrl = rpcUrl;
    }
    getBlockNumber() {
        return this.call({
            id: 0,
            jsonrpc: '2.0',
            method: 'eth_blockNumber',
            params: []
        }).then((json)=>json.result
        );
    }
    getBlockByNumber(number) {
        return this.call({
            id: 0,
            jsonrpc: '2.0',
            method: 'eth_getBlockByNumber',
            params: [
                number,
                false
            ]
        }).then((json)=>json.result
        );
    }
    getFilterLogs(filter) {
        return this.call({
            id: 0,
            jsonrpc: '2.0',
            method: 'eth_getLogs',
            params: [
                filter
            ]
        });
    }
    async call(payload) {
        if (payload.jsonrpc == null) payload.jsonrpc = '2.0';
        return fetch(this.rpcUrl, {
            method: 'POST',
            headers: {
                Accept: 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
        }).then((response)=>response.json()
        ).then((json)=>{
            if (!json.result && json.error) {
                console.log('<== rpc error', json.error);
                throw new Error(json.error.message || 'rpc error');
            }
            return json;
        });
    }
} // module.exports = RPCServer;


class $b7fa9e57665452d9$export$417589b978208a8f extends Error {
    constructor(code, message){
        super();
        this.code = code;
        this.message = message;
    }
    toString() {
        return `${this.message} (${this.code})`;
    }
} // module.exports = ProviderRpcError;



class $6a4ba04c9712eb9a$export$d2ca453b913dcdea {
    static genId() {
        return new Date().getTime() + Math.floor(Math.random() * 1000);
    }
    // static flatMap(array: any[], func: any) {
    //   return [].concat(...array.map(func));
    // }
    // static intRange(from, to) {
    //   if (from >= to) {
    //     return [];
    //   }
    //   return new Array(to - from).fill().map((_, i) => i + from);
    // }
    static hexToInt(hexString) {
        if (hexString === undefined || hexString === null) return hexString;
        return Number.parseInt(hexString, 16);
    }
    static intToHex(int) {
        if (int === undefined || int === null) return int;
        let hexString = int.toString(16);
        return '0x' + hexString;
    }
    // message: Bytes | string
    static messageToBuffer(message) {
        var buffer = $ef9975513e2e43d1$export$a143d493d941bafc.from([]);
        try {
            if (typeof message === 'string') buffer = $ef9975513e2e43d1$export$a143d493d941bafc.from(message.replace('0x', ''), 'hex');
            else buffer = $ef9975513e2e43d1$export$a143d493d941bafc.from(message);
        } catch (err) {
            console.log(`messageToBuffer error: ${err}`);
        }
        return buffer;
    }
    static bufferToHex(buf) {
        return '0x' + $ef9975513e2e43d1$export$a143d493d941bafc.from(buf).toString('hex');
    }
} // module.exports = Utils;


class $86a3c5a31a9adec4$export$969de7e83370a961 {
    constructor(){
        this.intIds = new Map();
    }
    genId() {
        return new Date().getTime() + Math.floor(Math.random() * 1000);
    }
    tryRestoreId(payload) {
        let id = this.tryPopId(payload.id);
        if (id) payload.id = id;
    }
    tryPopId(id) {
        let originId = this.intIds.get(id);
        if (originId) this.intIds.delete(id);
        return originId;
    }
} // module.exports = IdMapping;


var $17166201e7aeaf64$exports = {};
"use strict";
Object.defineProperty($17166201e7aeaf64$exports, "__esModule", {
    value: true
});
// MIT © 2017 azu
var $17166201e7aeaf64$var$hasOwn = Object.prototype.hasOwnProperty;
// Object.is ponyfill
$17166201e7aeaf64$exports.is = function(x, y) {
    if (x === y) return x !== 0 || y !== 0 || 1 / x === 1 / y;
    else return x !== x && y !== y;
};
/**
 * Return true, if `objectA` is shallow equal to `objectB`.
 * Pass Custom equality function to `customEqual`.
 * Default equality is `Object.is`
 *
 * Options:
 *
 * - `customEqual`: function should return true if the `a` value is equal to `b` value.
 * - `debug`: enable debug info to console log. This log will be disable in production build
 */ $17166201e7aeaf64$exports.shallowEqual = function(objectA, objectB, options) {
    if (objectA === objectB) return true;
    if (typeof objectA !== "object" || objectA === null) {
        var out;
        return false;
    }
    if (typeof objectB !== "object" || objectB === null) {
        var out;
        return false;
    }
    var keysA = Object.keys(objectA);
    var keysB = Object.keys(objectB);
    if (keysA.length !== keysB.length) {
        var out;
        return false;
    }
    var isEqual = options && typeof options.customEqual === "function" ? options.customEqual : $17166201e7aeaf64$exports.is;
    for(var i = 0; i < keysA.length; i++){
        var key = keysA[i];
        if (!$17166201e7aeaf64$var$hasOwn.call(objectB, key) || !isEqual(objectA[key], objectB[key])) {
            var out;
            return false;
        }
    }
    return true;
};


class $ddce45652d33f7aa$export$d53114150807fd22 {
    constructor(props){
        this.props = Object.freeze(props);
    }
    equals(vo) {
        if (vo === null || vo === undefined) return false;
        if (vo.props === undefined) return false;
        return $17166201e7aeaf64$exports.shallowEqual(this.props, vo.props);
    }
}




let $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad;
(function($ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad) {
    $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad["ConnectDapp"] = 'connectDapp';
    $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad["SignAndSendTransaction"] = 'signAndSendTransaction';
    $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad["SignTransaction"] = 'signTransaction';
    $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad["SignPersonalMessage"] = 'signPersonalMessage';
})($ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad || ($ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad = {}));
let $ebac0c3c7faf13a9$export$a7e1148f0e98483a;
(function($ebac0c3c7faf13a9$export$a7e1148f0e98483a) {
    $ebac0c3c7faf13a9$export$a7e1148f0e98483a["ConnectDapp"] = 'eth_requestAccounts';
    $ebac0c3c7faf13a9$export$a7e1148f0e98483a["SignAndSendTransaction"] = 'eth_sendTransaction';
    $ebac0c3c7faf13a9$export$a7e1148f0e98483a["SignPersonalMessage"] = 'signPersonalMessage';
})($ebac0c3c7faf13a9$export$a7e1148f0e98483a || ($ebac0c3c7faf13a9$export$a7e1148f0e98483a = {}));
let $ebac0c3c7faf13a9$export$6f8959d005e6c8f0;
(function($ebac0c3c7faf13a9$export$6f8959d005e6c8f0) {
    $ebac0c3c7faf13a9$export$6f8959d005e6c8f0["ConnectDapp"] = 'solana_getAccount';
    $ebac0c3c7faf13a9$export$6f8959d005e6c8f0["SignAndSendTransaction"] = 'solana_signAndSendTransaction';
    $ebac0c3c7faf13a9$export$6f8959d005e6c8f0["SignTransaction"] = 'solana_signTransaction';
    $ebac0c3c7faf13a9$export$6f8959d005e6c8f0["SignAllTransactions"] = 'solana_signAllTransactions';
})($ebac0c3c7faf13a9$export$6f8959d005e6c8f0 || ($ebac0c3c7faf13a9$export$6f8959d005e6c8f0 = {}));
class $ebac0c3c7faf13a9$export$3d1391be359ed341 extends $ddce45652d33f7aa$export$d53114150807fd22 {
    getID() {
        return this.props.id;
    }
    getType() {
        return this.props.type;
    }
    getMethod() {
        return this.props.method;
    }
    getPayload() {
        return this.props.payload;
    }
    getChain() {
        return this.props.chain;
    }
    static create(props) {
        return new $ebac0c3c7faf13a9$export$3d1391be359ed341(props);
    }
}


let $3b20efb592179be7$export$f18d5acc27d70423;
(function($3b20efb592179be7$export$f18d5acc27d70423) {
    $3b20efb592179be7$export$f18d5acc27d70423["Ethereum"] = 'ethereum';
    $3b20efb592179be7$export$f18d5acc27d70423["Solana"] = 'solana';
})($3b20efb592179be7$export$f18d5acc27d70423 || ($3b20efb592179be7$export$f18d5acc27d70423 = {}));


const $95ce67a0e4b48b20$var$log = $1feaf5137e56a072$export$2b1d391cd05230fd('ethereum');
// MARK: - Class
class $95ce67a0e4b48b20$var$Ethereum extends $a0h4l.EventEmitter {
    isLedgerConnect = true;
    constructor(config){
        super();
        $95ce67a0e4b48b20$var$log(`Ethereum constructed with config: ${JSON.stringify(config)}`);
        this.networkVersion = '' + config.chainId;
        this.chainId = '0x' + (config.chainId || 1).toString(16);
        this.address = '';
        this.ready = false;
        this.rpc = new $82190d7555a6a6f5$export$b3953ebc8b2c2650(config.rpcUrl);
        this.setConfig(config);
        this.idMapping = new $86a3c5a31a9adec4$export$969de7e83370a961();
        this.callbacks = new Map();
        this.wrapResults = new Map();
        // this.isDebug = !!config.isDebug;
        this.isDebug = true;
        this.emitConnect(config.chainId);
        window.addEventListener('message', async (event)=>{
            const message = event.data;
            if (message.destination === $f047d79a9426f7d2$export$908ff786c04d5297.ethereum) {
                $95ce67a0e4b48b20$var$log(`received response for id ${message.response.id}`, event.data);
                const id = message.response.id;
                const payload = message.response.payload;
                if (this.callbacks.get(id) == null) {
                    $95ce67a0e4b48b20$var$log('Could not find id', id, '. Ignoring.');
                    return;
                }
                switch(message.response.method){
                    case 'eth_requestAccounts':
                        this.setAddress(payload[0]);
                        break;
                }
                this.sendResponse(id, payload);
                this.close();
            }
        });
    }
    setAddress(address) {
        const lowerAddress = (address || '').toLowerCase();
        this.address = lowerAddress;
        this.ready = !!address;
        for(var i = 0; i < window.frames.length; i++){
            const frame = window.frames[i];
            if (frame.ethereum && frame.ethereum.isTrust) {
                frame.ethereum.address = lowerAddress;
                frame.ethereum.ready = !!address;
            }
        }
    }
    setConfig(config) {
        this.setAddress(config.address);
        this.chainId = config.chainId;
        this.rpc = new $82190d7555a6a6f5$export$b3953ebc8b2c2650(config.rpcUrl);
        this.isDebug = !!config.isDebug;
    }
    request(payload) {
        // this points to window in methods like web3.eth.getAccounts()
        var that = this;
        if (!(this instanceof $95ce67a0e4b48b20$var$Ethereum)) that = window.ethereum;
        return that._request(payload, false);
    }
    /**
   * @deprecated Listen to "connect" event instead.
   */ isConnected() {
        return true;
    }
    /**
   * @deprecated Use request({method: "eth_requestAccounts"}) instead.
   */ enable() {
        $95ce67a0e4b48b20$var$log('enable() is deprecated, please use window.ethereum.request({method: "eth_requestAccounts"}) instead.');
        return this.request({
            id: $6a4ba04c9712eb9a$export$d2ca453b913dcdea.genId(),
            method: 'eth_requestAccounts',
            params: [],
            jsonrpc: '2.0'
        });
    }
    /**
   * @deprecated Use request() method instead.
   */ send(payload) {
        if (this.isDebug) console.log(`==> send payload ${JSON.stringify(payload)}`);
        let response = {
            jsonrpc: '2.0',
            id: payload.id,
            result: null
        };
        switch(payload.method){
            // case 'eth_accounts':
            //     response.result = this.eth_accounts(payload);
            //     break;
            case 'eth_coinbase':
                response.result = this.eth_coinbase();
                break;
            case 'net_version':
                response.result = this.net_version();
                break;
            case 'eth_chainId':
                response.result = this.eth_chainId();
                break;
            default:
                throw new $b7fa9e57665452d9$export$417589b978208a8f(4200, `Ledger Connect does not support calling ${payload.method} synchronously without a callback. Please provide a callback parameter to call ${payload.method} asynchronously.`);
        }
        return response;
    }
    /**
   * @deprecated Use request() method instead.
   */ sendAsync(payload, callback) {
        $95ce67a0e4b48b20$var$log('sendAsync(data, callback) is deprecated, please use window.ethereum.request(data) instead.');
        // this points to window in methods like web3.eth.getAccounts()
        var that = this;
        if (!(this instanceof $95ce67a0e4b48b20$var$Ethereum)) that = window.ethereum;
        if (Array.isArray(payload)) $95ce67a0e4b48b20$var$log('*** unhandled payload type ***');
        else that._request(payload).then((data)=>callback(null, data)
        ).catch((error)=>callback(error, null)
        );
    }
    /**
   * @private Internal rpc handler
   */ _request(payload, wrapResult = true) {
        console.log('_request', payload);
        if (this.isDebug) $95ce67a0e4b48b20$var$log(`==> _request payload ${JSON.stringify(payload)}`);
        return new Promise((resolve, reject)=>{
            if (!payload.id) payload.id = $6a4ba04c9712eb9a$export$d2ca453b913dcdea.genId();
            this.callbacks.set(payload.id, (error, data)=>{
                if (error) {
                    $95ce67a0e4b48b20$var$log('rejecting with', payload.id, error);
                    reject(error);
                } else {
                    $95ce67a0e4b48b20$var$log('resolving with', payload.id, data);
                    resolve(data);
                }
            });
            this.wrapResults.set(payload.id, wrapResult);
            switch(payload.method){
                case 'eth_accounts':
                    return this.eth_accounts(payload);
                // return this.sendResponse(payload.id, this.eth_accounts());
                case 'eth_coinbase':
                    return this.sendResponse(payload.id, this.eth_coinbase());
                case 'net_version':
                    return this.sendResponse(payload.id, this.net_version());
                case 'eth_chainId':
                    return this.sendResponse(payload.id, this.chainId);
                case 'eth_sign':
                    return this.eth_sign(payload);
                case 'personal_sign':
                    return this.personal_sign(payload);
                case 'personal_ecRecover':
                    return this.personal_ecRecover(payload);
                case 'eth_signTypedData_v3':
                    return this.eth_signTypedData(payload, false);
                case 'eth_signTypedData':
                case 'eth_signTypedData_v4':
                    return this.eth_signTypedData(payload, true);
                case 'eth_sendTransaction':
                    return this.eth_sendTransaction(payload);
                case 'eth_requestAccounts':
                    return this.eth_requestAccounts(payload);
                case 'wallet_requestPermissions':
                    // Doesn't seem to work on metamask test dapp
                    return this.sendResponse(payload.id, []);
                case 'wallet_getPermissions':
                    let permissions = {
                        invoker: window.location.href,
                        parentCapability: 'eth_accounts',
                        caveats: []
                    };
                    return this.sendResponse(payload.id, [
                        permissions
                    ]);
                case 'wallet_watchAsset':
                    return this.wallet_watchAsset(payload);
                case 'wallet_addEthereumChain':
                    return this.wallet_addEthereumChain(payload);
                case 'wallet_switchEthereumChain':
                    return this.sendResponse(payload.id, this.chainId);
                // return this.wallet_switchEthereumChain(payload);
                case 'eth_newFilter':
                case 'eth_newBlockFilter':
                case 'eth_newPendingTransactionFilter':
                case 'eth_uninstallFilter':
                case 'eth_subscribe':
                    throw new $b7fa9e57665452d9$export$417589b978208a8f(4200, `Trust does not support calling ${payload.method}. Please use your own solution`);
                // @ts-ignore
                case 'eth_getTransactionReceipt':
                    // Workaround to handle nested tx hash from Etherscan
                    if (typeof payload.params[0]['result'] === 'string') payload.params = [
                        payload.params[0]['result']
                    ];
                // Fallthrough to call RPC
                default:
                    // call upstream rpc
                    this.callbacks.delete(payload.id);
                    this.wrapResults.delete(payload.id);
                    return this.rpc.call(payload).then((response)=>{
                        if (this.isDebug) $95ce67a0e4b48b20$var$log(`<== rpc response ${JSON.stringify(response)}`);
                        wrapResult ? resolve(response) : resolve(response.result);
                    }).catch(reject);
            }
        });
    }
    emitConnect(chainId) {
        this.emit('connect', {
            chainId: chainId
        });
    }
    emitChainChanged(chainId) {
        this.emit('chainChanged', chainId);
        this.emit('networkChanged', chainId);
    }
    eth_accounts(payload) {
        if (!this.address) this.eth_requestAccounts(payload);
        else this.sendResponse(payload.id, [
            this.address
        ]);
    }
    eth_coinbase() {
        return this.address;
    }
    net_version() {
        return this.networkVersion || null;
    }
    eth_chainId() {
        return this.chainId;
    }
    eth_sign(payload) {
        const buffer = $6a4ba04c9712eb9a$export$d2ca453b913dcdea.messageToBuffer(payload.params[1]);
        const hex = $6a4ba04c9712eb9a$export$d2ca453b913dcdea.bufferToHex(buffer);
        if ($e3351dc48ac30dae$export$2e2bcd8739ae039(buffer)) this.postMessage({
            id: payload.id,
            type: $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad.SignPersonalMessage,
            method: $ebac0c3c7faf13a9$export$a7e1148f0e98483a.SignPersonalMessage,
            chain: $3b20efb592179be7$export$f18d5acc27d70423.Ethereum,
            payload: {
                data: hex
            }
        });
        else this.sendError(payload.id, new $b7fa9e57665452d9$export$417589b978208a8f(4100, 'unsupported method'));
    }
    personal_sign(payload) {
        const message = payload.params[0];
        const buffer = $6a4ba04c9712eb9a$export$d2ca453b913dcdea.messageToBuffer(message);
        const data = buffer.length === 0 ? $6a4ba04c9712eb9a$export$d2ca453b913dcdea.bufferToHex(message) : message;
        this.postMessage({
            id: payload.id,
            type: $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad.SignPersonalMessage,
            method: $ebac0c3c7faf13a9$export$a7e1148f0e98483a.SignPersonalMessage,
            chain: $3b20efb592179be7$export$f18d5acc27d70423.Ethereum,
            payload: {
                data: data
            }
        });
    }
    personal_ecRecover(payload) {
        // this.postMessage('ecRecover', payload.id, {
        //   signature: payload.params[1],
        //   message: payload.params[0],
        // });
        this.sendError(payload.id, new $b7fa9e57665452d9$export$417589b978208a8f(4100, 'unsupported method'));
    }
    eth_signTypedData(payload, useV4) {
        const message = JSON.parse(payload.params[1]);
        const hash = $03ca7a3d69ca2727$exports.TypedDataUtils.sign(message, useV4);
        // this.postMessage('signTypedMessage', payload.id, {
        //   data: '0x' + hash.toString('hex'),
        //   raw: payload.params[1],
        // });
        this.sendError(payload.id, new $b7fa9e57665452d9$export$417589b978208a8f(4100, 'unsupported method'));
    }
    async eth_sendTransaction(payload) {
        let params = payload.params;
        params[0]['nonce'] = await this.getLatestTxCount(this.address);
        // Some dapps leave this empty for non-ETH transfers and we currently
        // expect it to be a string.
        if (!params[0]['value']) params[0]['value'] = '0x0';
        await this.setGasValues(this.chainId, params);
        if (this.isDebug) this.logParams(params);
        this.postMessage({
            id: payload.id,
            type: $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad.SignAndSendTransaction,
            method: $ebac0c3c7faf13a9$export$a7e1148f0e98483a.SignAndSendTransaction,
            chain: $3b20efb592179be7$export$f18d5acc27d70423.Ethereum,
            payload: params[0]
        });
    }
    logParams(params) {
        $95ce67a0e4b48b20$var$log(`ropsten maxFeePerGas: ${$8855d6b5606fd77f$exports.convert(Number(params[0]['maxFeePerGas']), 'wei', 'gwei')}`);
        $95ce67a0e4b48b20$var$log(`ropsten maxPriorityFeePerGas: ${$8855d6b5606fd77f$exports.convert(Number(params[0]['maxPriorityFeePerGas']), 'wei', 'gwei')}`);
        $95ce67a0e4b48b20$var$log(`estimated gasLimit: ${Number(params[0]['gasLimit'])}`);
        $95ce67a0e4b48b20$var$log(`nonce: ${Number(params[0]['nonce'])}`);
    }
    eth_requestAccounts(payload) {
        if (!this.address) this.postMessage({
            id: payload.id,
            type: $ebac0c3c7faf13a9$export$8d9ecf8a6190d0ad.ConnectDapp,
            method: $ebac0c3c7faf13a9$export$a7e1148f0e98483a.ConnectDapp,
            chain: $3b20efb592179be7$export$f18d5acc27d70423.Ethereum,
            payload: undefined
        });
        else this.sendResponse(payload.id, [
            this.address
        ]);
    }
    wallet_watchAsset(payload) {
        $95ce67a0e4b48b20$var$log(`wallet_watchAsset unsupported: ${payload}`);
        this.sendError(payload.id, new $b7fa9e57665452d9$export$417589b978208a8f(4100, 'unsupported method'));
    // let options = payload.params.options;
    // this.postMessage("watchAsset", payload.id, {
    //     type: payload.type,
    //     contract: options.address,
    //     symbol: options.symbol,
    //     decimals: options.decimals || 0,
    // });
    }
    wallet_addEthereumChain(payload) {
        // this.postMessage('addEthereumChain', payload.id, payload.params[0]);
        this.sendError(payload.id, new $b7fa9e57665452d9$export$417589b978208a8f(4100, 'unsupported method'));
    }
    wallet_switchEthereumChain(payload) {
        // this.postMessage('switchEthereumChain', payload.id, payload.params[0]);
        this.sendError(payload.id, new $b7fa9e57665452d9$export$417589b978208a8f(4100, 'unsupported method'));
    }
    // js -> native message handler
    postMessage(request) {
        $95ce67a0e4b48b20$var$log(`posting message: ${request.method}`);
        if (this.ready || request.method === $ebac0c3c7faf13a9$export$a7e1148f0e98483a.ConnectDapp) {
            let object = {
                sender: $f047d79a9426f7d2$export$908ff786c04d5297.ethereum,
                destination: $f047d79a9426f7d2$export$908ff786c04d5297.content,
                request: request
            };
            window.postMessage(object);
        } else // don't forget to verify in the app
        this.sendError(request.id, new $b7fa9e57665452d9$export$417589b978208a8f(4100, 'provider is not ready'));
    }
    // native result -> js
    sendResponse(id, result) {
        let originId = this.idMapping.tryPopId(id) || id;
        let callback = this.callbacks.get(id);
        let wrapResult = this.wrapResults.get(id);
        let data;
        data = {
            jsonrpc: '2.0',
            id: originId,
            result: null
        };
        if (result.jsonrpc && result.result) data.result = result.result;
        else data.result = result;
        if (this.isDebug) $95ce67a0e4b48b20$var$log(`<== sendResponse id: ${id}, result: ${JSON.stringify(result)}`);
        if (callback) {
            $95ce67a0e4b48b20$var$log(`callback id: ${id} found, calling with result: ${result}`, wrapResult);
            wrapResult ? callback(null, data) : callback(null, result);
            this.callbacks.delete(id);
        } else {
            $95ce67a0e4b48b20$var$log(`callback id: ${id} not found`);
            // check if it's iframe callback
            for(var i = 0; i < window.frames.length; i++){
                const frame = window.frames[i];
                try {
                    if (frame.ethereum.callbacks.has(id)) {
                        $95ce67a0e4b48b20$var$log(`found frame with callback, sending response`);
                        frame.ethereum.sendResponse(id, result);
                    }
                } catch (error) {
                    $95ce67a0e4b48b20$var$log(`send response to frame error: ${error}`);
                }
            }
        }
    }
    /**
   * @private Internal native error -> js
   */ sendError(id, error) {
        $95ce67a0e4b48b20$var$log(`<== ${id} sendError ${error}`);
        let callback = this.callbacks.get(id);
        if (callback) {
            callback(error instanceof Error ? error : new Error(error), null);
            this.callbacks.delete(id);
        }
    }
    close() {
        $95ce67a0e4b48b20$var$log(`Ethereum close()`);
        window.postMessage(`cancel`);
    }
    ensureLeading0x(input) {
        if (input.startsWith('0x')) return input;
        else return `0x${input}`;
    }
    async setGasValues(chainId, params) {
        switch(chainId){
            case '0x1':
                const priceAndLimit = await Promise.all([
                    this.getGasPrice(),
                    this.estimateGasLimit(params)
                ]);
                let gasPrice = priceAndLimit[0];
                let maxPriorityFeePerGas = $8855d6b5606fd77f$exports.convert(gasPrice.maxPriorityFeePerGas, 'gwei', 'wei');
                let maxFeePerGas = $8855d6b5606fd77f$exports.convert(gasPrice.maxFeePerGas, 'gwei', 'wei');
                params[0]['maxPriorityFeePerGas'] = '0x' + Number(maxPriorityFeePerGas).toString(16);
                params[0]['maxFeePerGas'] = '0x' + Number(maxFeePerGas).toString(16);
                params[0]['gasLimit'] = priceAndLimit[1];
                break;
            case '0x3':
                const responses = await Promise.all([
                    this.getMaxPriorityFeePerGas(),
                    this.getRopstenGasPrice(),
                    this.estimateGasLimit(params), 
                ]);
                params[0]['maxPriorityFeePerGas'] = responses[0];
                params[0]['maxFeePerGas'] = responses[1];
                params[0]['gasLimit'] = responses[2];
                break;
            default:
                break;
        }
    }
    async getLatestTxCount(address) {
        let txCountPayload = {
            id: $6a4ba04c9712eb9a$export$d2ca453b913dcdea.genId(),
            method: 'eth_getTransactionCount',
            params: [
                address,
                'pending'
            ],
            jsonrpc: '2.0'
        };
        const response = await this.rpc.call(txCountPayload);
        return response['result'];
    }
    async getMaxPriorityFeePerGas() {
        let txCountPayload = {
            id: $6a4ba04c9712eb9a$export$d2ca453b913dcdea.genId(),
            method: 'eth_maxPriorityFeePerGas',
            params: [],
            jsonrpc: '2.0'
        };
        const response = await this.rpc.call(txCountPayload);
        return response['result'];
    }
    async estimateGasLimit(params) {
        let estimatedGasAmountPayload = {
            id: $6a4ba04c9712eb9a$export$d2ca453b913dcdea.genId(),
            method: 'eth_estimateGas',
            params: [
                {
                    from: params.from,
                    to: params.to,
                    value: params.value,
                    data: params.data
                }, 
            ],
            jsonrpc: '2.0'
        };
        const response = await this.rpc.call(estimatedGasAmountPayload);
        return response['result'];
    }
    // For testing only, since Blocknative doesn't support Ropsten
    async getRopstenGasPrice() {
        let txCountPayload = {
            id: $6a4ba04c9712eb9a$export$d2ca453b913dcdea.genId(),
            method: 'eth_gasPrice',
            params: [],
            jsonrpc: '2.0'
        };
        const response = await this.rpc.call(txCountPayload);
        // Double the gas price since it tends to be far too low
        const price = Math.round(Number(response['result'] * 2)).toString(16);
        return this.ensureLeading0x(price);
    }
    async getGasPrice() {
        return new Promise(async (resolve, reject)=>{
            try {
                const response = await fetch('https://api.blocknative.com/gasprices/blockprices', {
                    method: 'GET',
                    headers: {
                        Accept: 'application/json',
                        'Content-Type': 'application/json',
                        Authorization: 'aab43665-f779-4dbd-9e27-e057b70a16a9'
                    }
                });
                const json = await response.json();
                // Return the highest confidence gas price for now
                resolve(json.blockPrices[0].estimatedPrices[0]);
            } catch (error) {
                console.error('Error while getting gas price', error);
                reject(error);
            }
        });
    }
}
// MARK: - Export
let $95ce67a0e4b48b20$var$config = {
    isDebug: true,
    chainId: '0x1',
    rpcUrl: 'https://eth-mainnet.alchemyapi.io/v2/-kuNbDetSLplTph8eLySef5J8Rww1DEp'
};
window.ethereum = new $95ce67a0e4b48b20$var$Ethereum($95ce67a0e4b48b20$var$config);
$95ce67a0e4b48b20$var$log(`loaded`);
var $95ce67a0e4b48b20$export$2e2bcd8739ae039 = $95ce67a0e4b48b20$var$Ethereum;

})();
//# sourceMappingURL=index.js.map
